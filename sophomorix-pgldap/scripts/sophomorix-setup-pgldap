#!/usr/bin/perl 
# Dieses Script (sophomorix-setup-pgldap) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# This Script adds directories and files that are necessary for sophomorix-base 
# It should be run as postinst
use strict;
use DBI;
use Getopt::Long;
Getopt::Long::Configure ("bundling");


# Todo replace debconf calls with thomas values

#use Sophomorix::SophomorixConfig; 
use Sophomorix::SophomorixBase; 

my $replace="";


my $basename="";
my $domainname="";
my $servername="";
my $smbworkgroup="";
my $internip="";
my $sid="";
my $smbserverstring="";
my $ldappassword="";
my $dbpassword="";
my $dbname="";

print "Using the following values to configure the system\n";
############################################################
# read the values from the config file
############################################################
my $config_file="/etc/sophomorix/pgldap/pgldap.conf";
if (-e $config_file) { 
   { package PgLdapConf ; do "$config_file"}
   $domainname=$PgLdapConf::domainname;
   $servername=$PgLdapConf::servername;
   $smbworkgroup=$PgLdapConf::smbworkgroup;
   $smbserverstring=$PgLdapConf::smbserverstring;
   $internip=$PgLdapConf::internip;
   $ldappassword=$PgLdapConf::ldappassword;
   $dbpassword=$PgLdapConf::dbpassword;
   $dbname=$PgLdapConf::dbname;
}

############################################################
# get debconf data, one by one
############################################################

# domainname
#------------------------------------------------------------
my $domainname_debconf=&get_debconf_value("linuxmuster-base", "domainname",0);
# process debconf data
if ($domainname_debconf ne 0){
    # from debconf
    $domainname=$domainname_debconf;    
    print "   Domainname from debconf     :   $domainname \n";
} else {
    # from config file
    print "   Domainname from pgldap.conf :   $domainname \n";
}


# servername
#------------------------------------------------------------
my $servername_debconf=&get_debconf_value("linuxmuster-base", "servername",0);
# process debconf data
if ($servername_debconf ne 0){
    # from debconf
    $servername=$servername_debconf;    
    print "   Servername from debconf     :   $servername \n";
} else {
    # from config file
    print "   Servername from pgldap.conf :   $servername \n";
}


# workgroup from samba
#------------------------------------------------------------
my $smbworkgroup_debconf=&get_debconf_value("linuxmuster-base", "workgroup",0);
# process debconf data
if ($smbworkgroup_debconf ne 0){
    # from debconf
    $smbworkgroup=$smbworkgroup_debconf;    
    print "   Workgroup from debconf      :   $smbworkgroup \n";
} else {
    # from config file
    print "   Workgroup from pgldap.conf  :   $smbworkgroup \n";
}

# internal ip
#------------------------------------------------------------
my $internip_debconf=&get_debconf_value("linuxmuster-base", "internip",0);
# process debconf data
if ($internip_debconf ne 0){
    # from debconf
    $internip=$internip_debconf;    
    print "   Internal IP from debconf    :   $internip \n";
} else {
    # from config file
    print "   Internal IP from pgldap.conf:   $internip \n";
}





############################################################
# Replace the following config-files
############################################################
# path to the template-files
my $template="/usr/share/sophomorix/config-templates";

# ldap
my $ldap_conf="/etc/ldap/ldap.conf";
my $slapd_conf="/etc/ldap/slapd.conf";
my $smbldap_conf="/etc/smbldap-tools/smbldap.conf";
my $ldap_secret="/etc/ldap.secret";
my $nsswitch_conf="/etc/nsswitch.conf";
my $libnssldap_conf="/etc/libnss-ldap.conf";
my $smb_ldap_conf="/etc/smbldap-tools/smbldap.conf";
my $smb_ldap_bind_conf="/etc/smbldap-tools/smbldap_bind.conf";

# pg
my $odbc_ini="/etc/odbc.ini";
my $odbcinst_ini="/etc/odbcinst.ini";
my $sophomorix_db="/usr/share/sophomorix/config-templates/pg/sophomorix.sql";

# pam
my $common_account="/etc/pam.d/common-account";
my $common_auth="/etc/pam.d/common-auth";
my $common_password="/etc/pam.d/common-password";
my $common_session="/etc/pam.d/common-session";
my $pam_ldap_conf="/etc/pam_ldap.conf";

# samba
my $smb_conf="/etc/samba/smb.conf";

# bdb
my $db_config="/var/lib/ldap/DB_CONFIG";


############################################################
# message
############################################################
#my $message="# Do not change this file! \n# This configuration file was automatically created";
my $message1="Do not change this file! It will be overwritten!";
my $message2="This configuration file was automatically created by sophomorix-setup-pgldap";

############################################################
# basename
############################################################
my @ldapdomains=();
my (@domains)= split(/\./,$domainname);
foreach my $value (@domains) {
    push @ldapdomains, "dc=${value}";
}
$basename = join "," , @ldapdomains;


############################################################
# SMB server string
############################################################
print "   Samba Server String         :   $smbserverstring \n";

############################################################
# Database
############################################################
print "   Database name               :   $dbname \n";



# the great replacement string
$replace= " -e 's/\@\@basename\@\@/${basename}/g'". 
          " -e 's/\@\@servername\@\@/${servername}/g'". 
          " -e 's/\@\@internip\@\@/${internip}/g'". 
          " -e 's/\@\@sid\@\@/${sid}/g'". 
          " -e 's/\@\@workgroup\@\@/${smbworkgroup}/g'". 
          " -e 's/\@\@smbserverstring\@\@/${smbserverstring}/g'". 
          " -e 's/\@\@ldappassword\@\@/${ldappassword}/g'". 
          " -e 's/\@\@dbpassword\@\@/${dbpassword}/g'". 
          " -e 's/\@\@dbname\@\@/${dbname}/g'". 
          " -e 's/\@\@message1\@\@/${message1}/g'". 
          " -e 's/\@\@message2\@\@/${message2}/g'"; 


# do it, ldap 
system("sed $replace ${template}/ldap/ldap.conf.template > $ldap_conf"); 
system("sed $replace ${template}/ldap/slapd.conf.template > $slapd_conf"); 
system("sed $replace ${template}/ldap/smbldap.conf.template > $smbldap_conf"); 
system("sed $replace ${template}/ldap/ldap.secret.template > $ldap_secret"); 
system("sed $replace ${template}/ldap/nsswitch.conf.template > $nsswitch_conf"); 
system("sed $replace ${template}/ldap/libnss-ldap.conf.template > $libnssldap_conf"); 

# do it, pg
system("sed $replace ${template}/pg/odbc.ini.template > $odbc_ini"); 
system("sed $replace ${template}/pg/odbcinst.ini.template > $odbcinst_ini");

# what to do:
# 3x basename
# 1x sid
# ... 
#system("sed $replace ${template}/pg/sophomorix.sql.template > $sophomorix_db"); 

# do it, pam
system("sed $replace ${template}/pam/common-account.template > $common_account"); 
system("sed $replace ${template}/pam/common-auth.template > $common_auth"); 
system("sed $replace ${template}/pam/common-password.template > $common_password"); 
system("sed $replace ${template}/pam/common-session.template > $common_session"); 
system("sed $replace ${template}/pam/pam_ldap.conf.template > $pam_ldap_conf"); 

# do it, samba
system("sed $replace ${template}/samba/smb.conf.template > $smb_conf"); 

# do it, bdb
system("sed $replace ${template}/bdb/DB_CONFIG > $db_config"); 



# Set password in /var/lib/samba/secrets.tdb
# Todo ??????
# smbpasswd -w server




############################################################
# restarting services 
############################################################

# stop samba
system("/etc/init.d/samba stop");
sleep 2;
system("killall smbd");
system("killall nmbd");


# stop ldap
system("/etc/init.d/slapd stop");
sleep 2;
system("killall slapd");


# stop postgres
system("/etc/init.d/postgresql stop");
sleep 5;
system("killall postmaster");




# starting postgres
system("/etc/init.d/postgresql start");

sleep 2;

# starting ldap
system("/etc/init.d/slapd start");

sleep 2;




############################################################
# SID
############################################################
$sid=`net getlocalsid`;
($a,$sid)=split(/:/,$sid);
$sid=~s/ //g;
chomp($sid);
print "   SID from the system         :   $sid \n";
#print "---$sid---\n";


# change the great replacement string (with new sid)
$replace= " -e 's/\@\@basename\@\@/${basename}/g'". 
          " -e 's/\@\@servername\@\@/${servername}/g'". 
          " -e 's/\@\@internip\@\@/${internip}/g'". 
          " -e 's/\@\@sid\@\@/${sid}/g'". 
          " -e 's/\@\@workgroup\@\@/${smbworkgroup}/g'". 
          " -e 's/\@\@smbserverstring\@\@/${smbserverstring}/g'". 
          " -e 's/\@\@ldappassword\@\@/${ldappassword}/g'". 
          " -e 's/\@\@dbpassword\@\@/${dbpassword}/g'". 
          " -e 's/\@\@dbname\@\@/${dbname}/g'". 
          " -e 's/\@\@message1\@\@/${message1}/g'". 
          " -e 's/\@\@message2\@\@/${message2}/g'"; 


# patch smbtools
system("sed $replace ${template}/ldap/smbldap.conf.template > $smb_ldap_conf"); 
system("sed $replace ${template}/ldap/smbldap_bind.conf.template > $smb_ldap_bind_conf"); 





# starting samba
system("/etc/init.d/samba start");

# nscd
system("/etc/init.d/nscd restart");








exit;




# sophomorix-databas is a persistent database
# should be in /var/lib/sophomorix
# database type is postgresql -> no choice
# connection: unix socket or tcp/ip ??? automatically
# host is localhost -> no choice
# password is auto-generaded -> no choice
# database name is sophomorix -> no choice
#
# backup database when updating -> show where to find backups
# remove database when deconfigure/remove package -> no
# remove database when purge package -> no


# moodle
# moodle macht keinen Eintrag in /etc/postgresql/pg-hba.conf
# wieso tuts trotzdem 
# (when user moodle is added (adduser), then it works ->  pg-hba.conf:  ident)


print "##### sophomorix-setup-pgldap is configuring postres for sophomorix-pgldap ...\n";






my $dbname="sopo12";
my $dbuser=$dbname;
my $pass_file="/etc/sophomorix/pgldap.secret";
my $pass="server77";
my $dbh;



# use password from option, when given
# else: create long random password






# make sure database exists
system("su --command='createuser $dbuser -A -D' postgres");
# make sure database exists
system("su --command='createdb $dbname' postgres");




# check if I can connect without password
print "\nChecking if you have a password set for the sophomorix user ...\n"; 

my $dbh = DBI->connect("dbi:Pg:dbname=$dbname", "$dbuser","",
               { RaiseError => 1, PrintError => 0, AutoCommit => 1 });

if (defined $dbh){
    print "   Connection without password was succesful!\n";
    print "   I'm setting a random password ($pass_file)!\n";
    # todo

} else {
    print "   Could not connect to database without password!\n";
}



# sql-command to create user

# CREATE USER $dbname WITH PASSWORD $password

# include the following line to /etc/postgresql/pg_hba.conf:
# local   all   all    passwd
# local   sophmorix   sophomorix    passwd


# datenbank uploaden
# su postgres; psql < datenbank.sql



# check if I can connect with saved password
print "\nChecking if I can connect with ramdom password from $pass_file ...\n"; 

# read the password
if (-e $pass_file){
   my $pass_saved=&get_password($pass_file);
   print "   Trying to connect as $dbuser to $dbname with password $pass_saved!\n";

   my $dbh = DBI->connect("dbi:Pg:dbname=$dbname", "$dbuser","$pass_saved",
               { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
   if (defined $dbh){
    print "   Connection with password $pass_saved successful!\n";
    print "   Database $dbname ready for user $dbuser!\n";
  } else {
      print "   Could not connect to database with password $pass_saved!\n";
  }
} else{
    print "\n There is no saved password, skipping ...\n";
}




print "\n##### sophomorix-setup-pgldap is configuring openldap for sophomorix-pgldap ...\n";









# phppgadmin: edit /etc/phppgadmin/apache.conf
#             restart apache






############################################################
# sub
############################################################

sub save_password {
    my ($password,$file)=@_;
    open (FILE, ">$file");
    print FILE $password;
    close (FILE);

}


sub get_password {
    my ($file)=@_;
    my $password;
    open (FILE, "<$file");
    while (<FILE>){
        #print "Line: $_ \n";
	$password=$_;
    }
    close (FILE);
    return $password;
}

