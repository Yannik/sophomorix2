#!/usr/bin/perl 
# Dieses Script (sophomorix-setup-pgldap) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# This Script adds directories and files that are necessary for sophomorix-base 
# It should be run as postinst
use strict;
use DBI;
use Getopt::Long;
Getopt::Long::Configure ("bundling");


# Todo replace debconf calls with thomas values

#use Sophomorix::SophomorixConfig; 
use Sophomorix::SophomorixBase; 
use Sophomorix::SophomorixPgLdap qw(
                                    check_connections
                                    db_connect
                                    get_smb_sid
                                   );

my $replace="";


my $basename="";
my $domainname="";
my $servername="";
my $smbworkgroup="";
my $internip="";
my $sid="";
my $smbserverstring="";
my $ldappassword="";
my $dbpassword="";
my $dbname="";

my $help=0;
my $new_database=0;
my $keep_database=0;


# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "new-database" => \$new_database,
           "keep-database" => \$keep_database,
          );


# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);








# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print "\n$scriptname configures sophomorix, postgresql, slapd and samba \n";
   print('
Options
  -h  / --help
  --new-database    deletes the database and creates a new one (Dangerous!!)
  --keep-database   do not drop the database, keep it unmodified
');
   print "\n";
   exit;
}




# print $keep_database,"\n";
# print $new_database,"\n";
# print $help,"\n";






print "Using the following values to configure the system\n";
############################################################
# read the values from the config file
############################################################
my $config_file="/etc/sophomorix/pgldap/pgldap.conf";
if (-e $config_file) { 
   { package PgLdapConf ; do "$config_file"}
   $domainname=$PgLdapConf::domainname;
   $servername=$PgLdapConf::servername;
   $smbworkgroup=$PgLdapConf::smbworkgroup;
   $smbserverstring=$PgLdapConf::smbserverstring;
   $internip=$PgLdapConf::internip;
   $ldappassword=$PgLdapConf::ldappassword;
   $dbpassword=$PgLdapConf::dbpassword;
   $dbname=$PgLdapConf::dbname;
}

############################################################
# get debconf data, one by one
############################################################

# domainname
#------------------------------------------------------------
my $domainname_debconf=&get_debconf_value("linuxmuster-base", "domainname",0);
# process debconf data
if ($domainname_debconf ne 0){
    # from debconf
    $domainname=$domainname_debconf;    
    print "   Domainname from debconf     :   $domainname \n";
} else {
    # from config file
    print "   Domainname from pgldap.conf :   $domainname \n";
}


# servername
#------------------------------------------------------------
my $servername_debconf=&get_debconf_value("linuxmuster-base", "servername",0);
# process debconf data
if ($servername_debconf ne 0){
    # from debconf
    $servername=$servername_debconf;    
    print "   Servername from debconf     :   $servername \n";
} else {
    # from config file
    print "   Servername from pgldap.conf :   $servername \n";
}


# workgroup from samba
#------------------------------------------------------------
my $smbworkgroup_debconf=&get_debconf_value("linuxmuster-base", "workgroup",0);
# process debconf data
if ($smbworkgroup_debconf ne 0){
    # from debconf
    $smbworkgroup=$smbworkgroup_debconf;    
    print "   Workgroup from debconf      :   $smbworkgroup \n";
} else {
    # from config file
    print "   Workgroup from pgldap.conf  :   $smbworkgroup \n";
}

# internal ip
#------------------------------------------------------------
my $internip_debconf=&get_debconf_value("linuxmuster-base", "internip",0);
# process debconf data
if ($internip_debconf ne 0){
    # from debconf
    $internip=$internip_debconf;    
    print "   Internal IP from debconf    :   $internip \n";
} else {
    # from config file
    print "   Internal IP from pgldap.conf:   $internip \n";
}





############################################################
# Replace the following config-files
############################################################
# path to the template-files
my $template="/usr/share/sophomorix/config-templates";

# ldap
my $ldap_conf="/etc/ldap/ldap.conf";
my $slapd_conf="/etc/ldap/slapd.conf";
my $smbldap_conf="/etc/smbldap-tools/smbldap.conf";
my $ldap_secret="/etc/ldap.secret";
my $nsswitch_conf="/etc/nsswitch.conf";
my $libnssldap_conf="/etc/libnss-ldap.conf";
my $smb_ldap_conf="/etc/smbldap-tools/smbldap.conf";
my $smb_ldap_bind_conf="/etc/smbldap-tools/smbldap_bind.conf";

# pg
my $odbc_ini="/etc/odbc.ini";
my $odbcinst_ini="/etc/odbcinst.ini";
my $sophomorix_db="/usr/share/sophomorix/config-templates/pg/sophomorix.sql";

# pam
my $common_account="/etc/pam.d/common-account";
my $common_auth="/etc/pam.d/common-auth";
my $common_password="/etc/pam.d/common-password";
my $common_session="/etc/pam.d/common-session";
my $pam_ldap_conf="/etc/pam_ldap.conf";

# samba
my $smb_conf="/etc/samba/smb.conf";

# bdb
my $db_config="/var/lib/ldap/DB_CONFIG";


############################################################
# message
############################################################
my $message1="Do not change this file! It will be overwritten!";
my $message2="This configuration file was automatically created by sophomorix-setup-pgldap";

############################################################
# basename
############################################################
my @ldapdomains=();
my (@domains)= split(/\./,$domainname);
foreach my $value (@domains) {
    push @ldapdomains, "dc=${value}";
}
$basename = join "," , @ldapdomains;


############################################################
# SMB server string
############################################################
print "   Samba Server String         :   $smbserverstring \n";

############################################################
# Database
############################################################
print "   Database name               :   $dbname \n";



# the great replacement string
$replace= " -e 's/\@\@basename\@\@/${basename}/g'". 
          " -e 's/\@\@servername\@\@/${servername}/g'". 
          " -e 's/\@\@internip\@\@/${internip}/g'". 
          " -e 's/\@\@sid\@\@/${sid}/g'". 
          " -e 's/\@\@workgroup\@\@/${smbworkgroup}/g'". 
          " -e 's/\@\@smbserverstring\@\@/${smbserverstring}/g'". 
          " -e 's/\@\@ldappassword\@\@/${ldappassword}/g'". 
          " -e 's/\@\@dbpassword\@\@/${dbpassword}/g'". 
          " -e 's/\@\@dbname\@\@/${dbname}/g'". 
          " -e 's/\@\@message1\@\@/${message1}/g'". 
          " -e 's/\@\@message2\@\@/${message2}/g'"; 


# do it, ldap 
system("sed $replace ${template}/ldap/ldap.conf.template > $ldap_conf"); 
system("sed $replace ${template}/ldap/slapd.conf.template > $slapd_conf"); 
system("sed $replace ${template}/ldap/smbldap.conf.template > $smbldap_conf"); 
system("sed $replace ${template}/ldap/ldap.secret.template > $ldap_secret"); 
system("sed $replace ${template}/ldap/nsswitch.conf.template > $nsswitch_conf"); 
system("sed $replace ${template}/ldap/libnss-ldap.conf.template > $libnssldap_conf"); 

# do it, pg
system("sed $replace ${template}/pg/odbc.ini.template > $odbc_ini"); 
system("sed $replace ${template}/pg/odbcinst.ini.template > $odbcinst_ini");


# pg_hba.conf
my $seen_postgres=0;
my $seen_local_ldap=0;
my $seen_host_ldap=0;
my @line=();



&insert_line_before("local;all;postgres;ident;postgres",
                    "local;all;postgres;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");

&insert_line_before("local;all;ldap;ident;ldap",
                    "local;all;postgres;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");


&insert_line_before("local;template1;ldap;password;",
                    "local;all;all;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");

&insert_line_before("local;ldap;ldap;password;",
                    "local;all;all;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");

&insert_line_before("host;template1;ldap;127.0.0.1;255.255.255.255;password",
                    "host;all;all;127.0.0.1;255.255.255.255;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");

&insert_line_before("host;ldap;ldap;127.0.0.1;255.255.255.255;password",
                    "host;all;all;127.0.0.1;255.255.255.255;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");


# sollte raus ???
# local all all ident sameuser     sollte raus
# host all all 127.0.0.1 255.255.255.255 ident sameuser



# pg_ident.conf
my $seen_ident_postgres=0;
my $seen_ident_postgres_pg=0;
my $seen_ident_ldap=0;
my $file_ident="/etc/postgresql/pg_ident.conf";
my $file_ident_tmp="/etc/postgresql/pg_ident.conf.tmp";
print "Working on pg-ident.conf\n";
open(IDENT, "<$file_ident") || die "Fehler: $!";
open(IDENTMP, ">$file_ident_tmp") || die "Fehler: $!";
while (<IDENT>) {
    chomp(); # Returnzeichen abschneiden
    if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
    #if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
    my (@line) = split(/\s+/);
    if ($line[0] eq "postgres" and
       $line[1] eq "root" and
       $line[2] eq "postgres") {
       $seen_ident_postgres=1;
       print "   Line is in $file_ident already ...  doing nothing.\n";
    }
    if ($line[0] eq "postgres" and
       $line[1] eq "postgres" and
       $line[2] eq "postgres") {
       $seen_ident_postgres_pg=1;
       print "   Line is in $file_ident already ...  doing nothing.\n";
    }
    if ($line[0] eq "ldap" and
       $line[1] eq "root" and
       $line[2] eq "ldap") {
       $seen_ident_ldap=1;
       print "   Line is in $file_ident already ...  doing nothing.\n";
    }
    print IDENTMP $_,"\n";
}

if ($seen_ident_postgres==0){
    print IDENTMP "postgres       root       postgres\n";
}

if ($seen_ident_postgres_pg==0){
    print IDENTMP "postgres       postgres   postgres\n";
}

if ($seen_ident_ldap==0){
    print IDENTMP "ldap           root       ldap\n";
}


close(IDENT);
close(IDENTMP);
system("mv /etc/postgresql/pg_ident.conf.tmp /etc/postgresql/pg_ident.conf");


# what to do:
# 3x basename
# 1x sid
# ... 
#system("sed $replace ${template}/pg/sophomorix.sql.template > $sophomorix_db"); 

# do it, pam
system("sed $replace ${template}/pam/common-account.template > $common_account"); 
system("sed $replace ${template}/pam/common-auth.template > $common_auth"); 
system("sed $replace ${template}/pam/common-password.template > $common_password"); 
system("sed $replace ${template}/pam/common-session.template > $common_session"); 
system("sed $replace ${template}/pam/pam_ldap.conf.template > $pam_ldap_conf"); 

# do it, samba
system("sed $replace ${template}/samba/smb.conf.template > $smb_conf"); 

# do it, bdb
system("sed $replace ${template}/bdb/DB_CONFIG > $db_config"); 


# Set password in /var/lib/samba/secrets.tdb
system("smbpasswd -w server");
# Set password in /var/lib/samba/secrets.tdb






############################################################
# restarting services 
############################################################

# stop samba
system("/etc/init.d/samba stop");
sleep 2;
system("killall smbd");
system("killall nmbd");


# stop ldap
system("/etc/init.d/slapd stop");
sleep 2;
system("killall slapd");


# stop postgres
system("/etc/init.d/postgresql stop");
sleep 5;
system("killall postmaster");




# starting postgres
system("/etc/init.d/postgresql start");

sleep 5;

#system("su --command='createdb -U postgres ldap' postgres");
#system("createdb -U postgres ldap");




if ($new_database==1){
    print "\nWARNING: I will drop your database ldap in 5 seconds!\n";
    print "\n Hit Control-C to abort, ...!\n\n";
    sleep 5;
    system("droplang -U postgres plpgsql ldap");
    system("dropdb -U postgres ldap");
    system("dropuser -U postgres ldap");
    sleep 2;
}

# create new database if necessary
if ($keep_database==0 or $new_database==1){
    &create_database();
} else {
    print "\nKeeping the old database ldap \n\n";
}


# setting the ldap suffix dn=x
&set_ldap_suffix_pg($basename);


# setting the SID for existing users/groups
# ???????
#&set_samba_sid();



sleep 5;



# starting ldap
system("/etc/init.d/slapd start");

sleep 2;




############################################################
# SID
############################################################
$sid=`net getlocalsid`;
($a,$sid)=split(/:/,$sid);
$sid=~s/ //g;
chomp($sid);
print "   SID from the system         :   $sid \n";
#print "---$sid---\n";


# change the great replacement string (with new sid)
$replace= " -e 's/\@\@basename\@\@/${basename}/g'". 
          " -e 's/\@\@servername\@\@/${servername}/g'". 
          " -e 's/\@\@internip\@\@/${internip}/g'". 
          " -e 's/\@\@sid\@\@/${sid}/g'". 
          " -e 's/\@\@workgroup\@\@/${smbworkgroup}/g'". 
          " -e 's/\@\@smbserverstring\@\@/${smbserverstring}/g'". 
          " -e 's/\@\@ldappassword\@\@/${ldappassword}/g'". 
          " -e 's/\@\@dbpassword\@\@/${dbpassword}/g'". 
          " -e 's/\@\@dbname\@\@/${dbname}/g'". 
          " -e 's/\@\@message1\@\@/${message1}/g'". 
          " -e 's/\@\@message2\@\@/${message2}/g'"; 


# patch smbtools
system("sed $replace ${template}/ldap/smbldap.conf.template > $smb_ldap_conf"); 
system("sed $replace ${template}/ldap/smbldap_bind.conf.template > $smb_ldap_bind_conf"); 









# starting samba
system("/etc/init.d/samba start");

# ssh 
system("/etc/init.d/ssh restart");

# nscd
if (-e "/etc/init.d/nscd"){
   system("/etc/init.d/nscd stop");
   sleep 2;
   system("killall nscd");
   sleep 2;
   system("killall -9 nscd");
   system("/etc/init.d/nscd start");
}



# evtl. noch anders
#system("smbldap-populate -a admin");

#system("sophomorix-add --smbroot --password server");


# adding groups
#system("sophomorix-groupadd -g 512 'Domain Admins'");
##? system("sophomorix-groupadd -g 544 'Administrators'");
##? system("sophomorix-groupadd -g 551 'Backup Operators'");
#system("sophomorix-groupadd -g 515 'Domain Computers'");
#system("sophomorix-groupadd -g 514 'Domain Guests'");
#system("sophomorix-groupadd -g 550 'Print Operators'");
#system("sophomorix-groupadd -g 552 'Replicators'");

# adding users
#system("sophomorix-useradd --gecos Administrator --homedir /home/Administrator --group 'Domain Admins' --password server Administrator");


# adding groups with smbldap-tools
system("smbldap-groupadd -g 512 'domadmins'");
system("net groupmap add rid=512 unixgroup=domadmins ntgroup='Domain Admins'");

system("smbldap-groupadd -g 513 'domusers'");
system("net groupmap add rid=513 unixgroup=domusers ntgroup='Domain Users'");

system("smbldap-groupadd -g 514 'domguests'");
system("net groupmap add rid=514 unixgroup=domguests ntgroup='Domain Guests'");

system("smbldap-groupadd -g 515 'domcomputers'");
system("net groupmap add rid=515 unixgroup=domcomputers ntgroup='Domain Computers'");

system("smbldap-groupadd -g 550 'printoperators'");
system("net groupmap add rid=550 unixgroup=printoperators ntgroup='Print Operators'");

system("smbldap-groupadd -g 552 'replicators'");
system("net groupmap add rid=552 unixgroup=replicators ntgroup='Replicators'");

system("smbldap-groupadd -g 544 'administrators'");
system("net groupmap add rid=544 unixgroup=administrators ntgroup='Administrators'");

system("smbldap-groupadd -g 548 'accountoperators'");
system("net groupmap add rid=548 unixgroup=accountoperators ntgroup='Account Operators'");

system("smbldap-groupadd -g 551 'backupoperators'");
system("net groupmap add rid=551 unixgroup=backupoperators ntgroup='Backup Operators'");




# adding users
system("smbldap-useradd -a  -c Administrator -m -d /home/Administrator -g 'domadmins' -s /bin/false Administrator");




# todo /etc/rc2.d samba auf 21 erhöhen






exit;




# sophomorix-databas is a persistent database
# should be in /var/lib/sophomorix
# database type is postgresql -> no choice
# connection: unix socket or tcp/ip ??? automatically
# host is localhost -> no choice
# password is auto-generaded -> no choice
# database name is sophomorix -> no choice
#
# backup database when updating -> show where to find backups
# remove database when deconfigure/remove package -> no
# remove database when purge package -> no


# moodle
# moodle macht keinen Eintrag in /etc/postgresql/pg-hba.conf
# wieso tuts trotzdem 
# (when user moodle is added (adduser), then it works ->  pg-hba.conf:  ident)


my $pass_file="";
my $dbuser="";

# read the password
if (-e $pass_file){
   my $pass_saved=&get_password($pass_file);
   print "   Trying to connect as $dbuser to $dbname with password $pass_saved!\n";

   my $dbh = DBI->connect("dbi:Pg:dbname=$dbname", "$dbuser","$pass_saved",
               { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
   if (defined $dbh){
    print "   Connection with password $pass_saved successful!\n";
    print "   Database $dbname ready for user $dbuser!\n";
  } else {
      print "   Could not connect to database with password $pass_saved!\n";
  }
} else{
    print "\n There is no saved password, skipping ...\n";
}




print "\n##### sophomorix-setup-pgldap is configuring openldap for sophomorix-pgldap ...\n";









# phppgadmin: edit /etc/phppgadmin/apache.conf
#             restart apache






############################################################
# sub
############################################################

sub set_samba_sid {
    my $sid=&get_smb_sid();
    my $dbh=&db_connect();
    my $sql="";
    print "\nSetting SID in the database to $sid \n";

    my $sth= $dbh->prepare( "SELECT sambasid,sambaprimarygroupsid,id 
                             FROM samba_sam_account" );
       $sth->execute();

    my $array_ref = $sth->fetchall_arrayref();

    my $i=0;
    foreach ( @{ $array_ref } ) {
       my $user_sid=${$array_ref}[$i][0];
       my $group_sid=${$array_ref}[$i][1];
       my $id=${$array_ref}[$i][2];

       print " OLD user-sid :  $user_sid  \n";
       print " OLD group-sid:  $group_sid \n";

       my $new_user_sid=&new_sid($sid,$user_sid);
       my $new_group_sid=&new_sid($sid,$group_sid);

       print " NEW user-sid :  $new_user_sid  \n";
       print " NEW group-sid:  $new_group_sid \n";

       $sql="UPDATE samba_sam_account 
             SET 
             sambasid='$new_user_sid', sambaprimarygroupsid='$new_group_sid'
             WHERE id=$id";
       print $sql,"\n";
       #$dbh->do($sql);
       $i++;
    }   
}



sub new_sid {
    my ($sid,$old) = @_;
    my (@list) = split(/-/,$old);
    my $last = pop @list;
    my $new = $sid."-".$last

}






sub set_ldap_suffix_pg {
    my ($suffix) = @_;
    if (not defined $suffix or $suffix eq ""){
        print "I won't set a emty ldap suffix!\n "
    } else {
       my $dbh=&db_connect();
       my $sql="";
       print "\nUpdating sldap suffix in the postgres databast to $suffix \n";
    
       my $sth= $dbh->prepare( "SELECT dn,id FROM ldap_entries" );
          $sth->execute();

       my $array_ref = $sth->fetchall_arrayref();

       my $i=0;
       foreach ( @{ $array_ref } ) {
          my $old_dn=${$array_ref}[$i][0];
          my $id=${$array_ref}[$i][1];
          print " OLD dn:  $old_dn \n";
          # split at first 'dn'
          my ($old_cn)=split(/dc=/,$old_dn);
          my $new_dn=$old_cn.$suffix;
          print "  NEW dn: $new_dn \n";
          $sql="UPDATE ldap_entries SET dn='$new_dn' WHERE id=$id";
          #print $sql,"\n";
          $dbh->do($sql);
          $i++;
       }   
    }
}


sub create_database {
    print "Creating database ldap \n";
    system("psql -U postgres template1 < /usr/share/sophomorix/config-templates/pg/sophomorix-admin.sql");
    system("psql -U postgres ldap < /usr/share/sophomorix/config-templates/pg/sophomorix-lang.sql");
    system("psql -U ldap ldap < /usr/share/sophomorix/config-templates/pg/sophomorix.sql");


}


sub insert_line_before {
    my ($insert_line,$before,$file) = @_;
    my $file_tmp=$file.".tmp";
    my $seen_line=0;
    my @insert_line = split(/;/,$insert_line);
    my @before = split(/;/,$before);
    print "Checking if line is to be inserted into $file:\n";
#    print "   Insert_Line: $insert_line[0]  ","$insert_line[1]  ",
#                          "$insert_line[2]  ","$insert_line[3]  ",
#                          "$insert_line[4]  ","$insert_line[5]  ",
#                          "$insert_line[6]  \n";

#    print "   Before:      $before[0]  " ,"$before[1]  ",
#                          "$before[2]  ","$before[3]  ",
#                          "$before[4]  ","$before[5]  ",
#                          "$before[6]  \n";

    open(HBA, "<$file") || die "Fehler: $!";
    open(HBATMP, ">$file_tmp") || die "Fehler: $!";
    while (<HBA>) {
      chomp(); # Returnzeichen abschneiden
#      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
#      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      my (@line) = split(/\s+/);
      if ($line[0] eq $insert_line[0] and
          $line[1] eq $insert_line[1] and
          $line[2] eq $insert_line[2] and
          $line[3] eq $insert_line[3] and
          $line[4] eq $insert_line[4] and
          $line[5] eq $insert_line[5] and
          $line[6] eq $insert_line[6]
         ){
          $seen_line=1;
          # doing nothing
          print "   Line is in $file already ...  doing nothing.\n";
          #print HBATMP $_,"\n",
          #next;
      }
      if ($before[0] eq $line[0] and
          $before[1] eq $line[1] and
          $before[2] eq $line[2] and
          $before[3] eq $line[3] and
          $before[4] eq $line[4] and
          $before[5] eq $line[5] and
          $before[6] eq $line[6] and
          $seen_line==0
         ){
          print "   Inserting new line, ...\n";
          print HBATMP "$insert_line[0]   ",
                       "$insert_line[1]        ",
                       "$insert_line[2]         ",
                       "$insert_line[3]      ",
                       "$insert_line[4]      ",
                       "$insert_line[5]      ",
	               "$insert_line[6]\n";
    }
        print HBATMP "$_","\n",
  }
  close(HBA);
  close(HBATMP);
  system("mv $file_tmp $file");
}




sub save_password {
    my ($password,$file)=@_;
    open (FILE, ">$file");
    print FILE $password;
    close (FILE);

}


sub get_password {
    my ($file)=@_;
    my $password;
    open (FILE, "<$file");
    while (<FILE>){
        #print "Line: $_ \n";
	$password=$_;
    }
    close (FILE);
    return $password;
}

