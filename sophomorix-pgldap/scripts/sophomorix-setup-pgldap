#!/usr/bin/perl 
# $Id$
# Dieses Script (sophomorix-setup-pgldap) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# This Script adds directories and files that are necessary for sophomorix-base 
# It should be run as postinst
use strict;
use DBI;
use Getopt::Long;
Getopt::Long::Configure ("bundling");


# Todo replace debconf calls with thomas values

use Sophomorix::SophomorixConfig; 
use Sophomorix::SophomorixBase; 
use Sophomorix::SophomorixPgLdap qw(
                                    check_connections
                                    db_connect
                                    db_disconnect
                                    get_smb_sid
                                    create_class_db_entry
                                   );

my @arguments = @ARGV;

my $replace="";

$Conf::log_level=1;

my $basedn="";
my $domainname="";
my $servername="";
my $smbworkgroup="";
my $internip="";
my $internmask="";
my $sid="";
my $smbserverstring="";
my $dbname="";
my $ldappw="";
my $dbpw="";

my $info=0;
my $help=0;
my $new_database=0;
my $keep_database=0;
my $config_file=0;

my $create_indices_only=0;
my $drop_indices_only=0;
my $update_indices=0;

my $old_version="";
my $new_version="";
my @upgrade_sql_id=();
my %upgrade_sql_id_filename=();

my @upgrade_scripts_id=();
my %upgrade_scripts_id_filename=();

my $ldappassword = "";
my $dbpassword = "";
my $ldap_explanation="";
my $db_explanation="";

my $old_password_file="/etc/ldap/slapd.conf";

my $timestamp=&zeit_stempel();


# Parsen der Optionen
my $testopt=GetOptions(
           "verbose|v+" => \$Conf::log_level,
           "help|h" => \$help,
           "info|i" => \$info,
           "configfile" => \$config_file,
           "oldversion|=s" => \$old_version,
           "newversion|=s" => \$new_version,
           "ldappw|ldappassword=s" => \$ldappw,
           "dbpw|dbpassword=s" => \$dbpw,
           "new-database" => \$new_database,
           "keep-database" => \$keep_database,
           "create-indices-only" => \$create_indices_only,
           "drop-indices-only" => \$drop_indices_only,
           "update-indices-only" => \$update_indices,
          );


# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);
&log_script_start(@arguments);


############################################################
# manage indices
############################################################

# --update-indices
if ($update_indices==1) {
    $create_indices_only=1;
    $drop_indices_only=1;
}

# --drop-indices
if ($drop_indices_only==1) {
    &drop_indices();
    # exit, 
    if ($create_indices_only==0){
        &log_script_exit("",1,1,0,@arguments);
    }
}

# --create-indices
if ($create_indices_only==1) {
    &create_indices();
    &log_script_exit("",1,1,0,@arguments);
}


############################################################
# manage passwords
############################################################

# fetch old passwords
my ($old_ldappw,$old_dbpw)=&fetch_ldap_pg_passwords();

# ldap password
if ($ldappw ne ""){
    # use password given as option
    $ldappassword = $ldappw;
    $ldap_explanation="Password from Option";
} elsif ($old_ldappw ne "") {
    # reuse old password 
    $ldappassword = $old_ldappw;
    $ldap_explanation="reuse old password";
} else {
    # generate random password
    $ldappassword = int( rand(9999999999)) + 9999999999;
    $ldap_explanation="new random password";
}

# db password
if ($dbpw ne ""){
    # use password given as option
    $dbpassword = $dbpw;
    $db_explanation="Password from Option";
} elsif ($old_dbpw ne "") {
    # reuse old password 
    $dbpassword = $old_dbpw;
    $db_explanation="reuse old password";
} else {
    # generate random password
    $dbpassword = int( rand(9999999999)) + 9999999999;
    $db_explanation="new random password";
}


############################################################
# --help
############################################################
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print "\n$scriptname configures sophomorix, postgresql, slapd and samba \n";
   print('
Options
  -h  / --help
  -i  / --info      show values used for configuration, do nothing

What settings to use:
  --configfile      use values from /etc/sophomorix/pgldap/pgldap.conf

How to handle the database
  Version numbers are correctly set when using the debian package system
  --oldversion debian-version-number 
  --newversion debian-version-number

  These Options are for debugging (or when you are crazy!)
  --new-database    deletes the database and creates a new one (Dangerous!!)
  --keep-database   do not drop the database, keep it unmodified

What passwords to use:
  --ldappw string   use string as ldap rootdn password 
      Standard password is:
         - if given in /etc/ldap/slapd.conf :reuse old password
         - else: generate a random 10 digit number as password
  --dbpw string   use string as ldap database password 
      Standard password is:
         - if given in /etc/ldap/slapd.conf :reuse old password
         - else: generate a random 10 digit number as password

Update indices only:
indices are update automatically if you do not specify one of the following options

  --create-indices-only 
      This is for testing only

  --drop-indices-only 
      This is for testing only

  --update-indices-only 
      Drop indices listed in drop-index.sql and create indices in create-index.sql
      Use this, when you edit the above files  files and you want to check 
      performance gain (or loss).
      This is for testing only
');
   print "\n";
   &log_script_exit("",1,1,0,@arguments);
}





print "Using the following values to configure the system\n";
############################################################
# read the values from the config file
############################################################
my $config_file="/etc/sophomorix/pgldap/pgldap.conf";
if (-e $config_file) { 
   { package PgLdapConf ; do "$config_file"}
   $domainname=$PgLdapConf::domainname;
   $servername=$PgLdapConf::servername;
   $smbworkgroup=$PgLdapConf::smbworkgroup;
   $smbserverstring=$PgLdapConf::smbserverstring;
   $internip=$PgLdapConf::internip;
   $internmask=$PgLdapConf::internmask;
   $dbname=$PgLdapConf::dbname;
}

############################################################
# get debconf data, one by one
############################################################

if ($config_file==0){

# domainname
#------------------------------------------------------------
my $domainname_debconf=
    &get_debconf_value("linuxmuster-base", "domainname",0);
# process debconf data
if ($domainname_debconf ne 0){
    # from debconf
    $domainname=$domainname_debconf;    
    print "   Domainname from debconf              : $domainname \n";
} else {
    # from config file
    print "   Domainname from pgldap.conf          : $domainname \n";
}



# servername
#------------------------------------------------------------
my $servername_debconf=
    &get_debconf_value("linuxmuster-base", "servername",0);
# process debconf data
if ($servername_debconf ne 0){
    # from debconf
    $servername=$servername_debconf;    
    print "   Servername from debconf              : $servername \n";
} else {
    # from config file
    print "   Servername from pgldap.conf          : $servername \n";
}


# workgroup from samba
#------------------------------------------------------------
my $smbworkgroup_debconf=
    &get_debconf_value("linuxmuster-base", "workgroup",0);
# process debconf data
if ($smbworkgroup_debconf ne 0){
    # from debconf
    $smbworkgroup=$smbworkgroup_debconf;    
    print "   Workgroup from debconf               : $smbworkgroup \n";
} else {
    # from config file
    print "   Workgroup from pgldap.conf           : $smbworkgroup \n";
}

# internal ip
#------------------------------------------------------------
my $internsubrange_debconf=
    &get_debconf_value("linuxmuster-base", "internsubrange",0);
# process debconf data
if ($internsubrange_debconf ne 0){
    # from debconf
    my ($min,$max)=split(/-/,$internsubrange_debconf);    
    $internip="10.".$min.".0.0";    
    print "   Internal IP from debconf             : $internip \n";
} else {
    # from config file
    print "   Internal IP from pgldap.conf         : $internip \n";
}


# internal netmask
#------------------------------------------------------------
my $internmask_debconf=
    &get_debconf_value("linuxmuster-base", "internmask",0);
# process debconf data
if ($internmask_debconf ne 0){
    # from debconf
    $internmask=$internmask_debconf;    
    print "   Internal netmask from debconf        : $internmask \n";
} else {
    # from config file
    print "   Internal netmask from pgldap.conf    : $internmask \n";
}


} # end $config_file==0


printf "   ldappassword %23s : ********** \n","($ldap_explanation)";
printf "   dbpassword   %23s : ********** \n","($db_explanation)";


# institutes
#------------------------------------------------------------
my (@institutes)= split(/\./,$domainname);
# take away the last
pop @institutes;

my $institutes = join "." , @institutes;
print "   String for institutes(ldap) :   $institutes \n";


if ($old_version eq "" or not defined $old_version ){
    # ask dpkg for old Version
    my $line=`dpkg -l sophomorix-pgldap | grep 'sophomorix-pg'`;
    chomp($line);
    my ($status,$name,$version,$desc)=split(/\s+/,$line);
    $old_version=$version;
#    # make sure to run all upgrads
#    $old_version="0.0.0-0";
}

if ($new_version eq "" or not defined $new_version ){
    # ask dpkg for new Version
    my $line=`dpkg -l sophomorix-pgldap | grep 'sophomorix-pg'`;
    chomp($line);
    my ($status,$name,$version,$desc)=split(/\s+/,$line);
    $new_version=$version;
}

print "Database Versions:\n";
print "   Old Debian Package Version  :   $old_version \n";
print "   New Debian Package Version  :   $new_version \n";





# db upgrade
my @all_db_upgrades=();
opendir(UPGRADE, ${DevelConf::sql_upgrade_path}) or 
     die "can't opendir ${DevelConf::sql_upgrade_path}: $!";
while (defined(my $filename = readdir(UPGRADE))) {
    # do something with "$dirname/$file"
    if ($filename=~m/.sql$/){
       #print "$filename \n";
       push @all_db_upgrades, $filename;

    }
}
closedir(UPGRADE);


@all_db_upgrades = sort @all_db_upgrades;

print "Checking upgrade sql files (not ordered):\n";
foreach my $file (@all_db_upgrades){
    my $version="";
    # extract Version from filename
    if ($file=~m/sophomorix_(.*).sql/){
        $version=$1;
    }
    my @old = split(/[\.-]/,$old_version);
    my @new = split(/[\.-]/,$new_version);
    my @file = split(/[\.-]/,$version);

    # print "Old: ", @old, "\n";
    # print "New: ", @new, "\n";
    # print "File:", @file, "\n";

    # calculating number
    my $file_number=$file[3]
                   +$file[2]*1000
                   +$file[1]*1000*1000
                   +$file[0]*1000*1000*1000;
    my $old_number=$old[3]
                  +$old[2]*1000
                  +$old[1]*1000*1000
                  +$old[0]*1000*1000*1000;
    my $new_number=$new[3]
                  +$new[2]*1000
                  +$new[1]*1000*1000
                  +$new[0]*1000*1000*1000;

    #print $file_number,"\n";
    #print $old_number,"\n";
    #print $new_number,"\n";

    #           - To old
    #  old ...  - To old
    #           + Run
    #           + Run 
    #  new ...  + Run
    #           - To new
    #           - To new

    if ($file_number > $old_number and $file_number <= $new_number){
        print "      ***Run $file as upgrade\n";
        push @upgrade_sql_id, $file_number;
        $upgrade_sql_id_filename{$file_number}=$file;        
    } elsif ($file_number <= $old_number){
        print "      File $file is to old\n";
    } elsif ($file_number > $new_number){
        print "      File $file is to new\n";
    }
}


# sorting the id numbers
@upgrade_sql_id= sort {$a <=> $b} @upgrade_sql_id;


print "Files to run for upgrade of database in correct order: \n";

foreach my $file_id (@upgrade_sql_id){
    printf "   %14s   %-40s \n",$file_id, $upgrade_sql_id_filename{$file_id};
}
print "\n";






# scripts upgrade
my @all_script_upgrades=();
opendir(SUPGRADE, ${DevelConf::upgrade_path_script}) or 
    die "can't opendir ${DevelConf::upgrade_path_script}: $!";
while (defined(my $filename = readdir(SUPGRADE))) {
    # do something with "$dirname/$file"
    if ($filename=~m/.upgrade$/){
       #print "$filename \n";
       push @all_script_upgrades, $filename;

    }
}
closedir(SUPGRADE);


@all_script_upgrades = sort @all_script_upgrades;

print "Checking upgrade script files (not ordered):\n";
foreach my $file (@all_script_upgrades){
    my $version="";
    # extract Version from filename
    if ($file=~m/sophomorix_(.*).upgrade/){
        $version=$1;
    }
    my @old = split(/[\.-]/,$old_version);
    my @new = split(/[\.-]/,$new_version);
    my @file = split(/[\.-]/,$version);

    #print "Old: ", @old, "\n";
    #print "New: ", @new, "\n";
    #print "File:", @file, "\n";

    # calculating number
    my $file_number=$file[3]
                   +$file[2]*1000
                   +$file[1]*1000*1000
                   +$file[0]*1000*1000*1000;
    my $old_number=$old[3]
                  +$old[2]*1000
                  +$old[1]*1000*1000
                  +$old[0]*1000*1000*1000;
    my $new_number=$new[3]
                  +$new[2]*1000
                  +$new[1]*1000*1000
                  +$new[0]*1000*1000*1000;

    #print $file_number,"\n";
    #print $old_number,"\n";
    #print $new_number,"\n";

    #           - To old
    #  old ...  - To old
    #           + Run
    #           + Run 
    #  new ...  + Run
    #           - To new
    #           - To new

    if ($file_number > $old_number and $file_number <= $new_number){
        print "      ***Run $file as upgrade\n";
        push @upgrade_scripts_id, $file_number;
        $upgrade_scripts_id_filename{$file_number}=$file;        
    } elsif ($file_number <= $old_number){
        print "      File $file is to old\n";
    } elsif ($file_number > $new_number){
        print "      File $file is to new\n";
    }
}


# sorting the id numbers
@upgrade_scripts_id= sort {$a <=> $b} @upgrade_scripts_id;


print "Scripts to run for upgrade in correct order: \n";

foreach my $file_id (@upgrade_scripts_id){
    printf "   %14s   %-40s \n",$file_id, $upgrade_scripts_id_filename{$file_id};
}
print "\n";




if ($info==1){
    # show values only
    &log_script_exit("",1,1,0,@arguments);
}





############################################################
# Replace the following config-files
############################################################
# path to the template-files
#my $template="/usr/share/sophomorix/config-templates";
my $template=${DevelConf::config_template_pfad};


# ldap
my $ldap_conf="/etc/ldap/ldap.conf";
my $slapd_conf="/etc/ldap/slapd.conf";
my $smbldap_conf="/etc/smbldap-tools/smbldap.conf";
my $ldap_secret="/etc/ldap.secret";
my $nsswitch_conf="/etc/nsswitch.conf";
my $libnssldap_conf="/etc/libnss-ldap.conf";
my $smb_ldap_conf="/etc/smbldap-tools/smbldap.conf";
my $smb_ldap_bind_conf="/etc/smbldap-tools/smbldap_bind.conf";

# pg
my $odbc_ini="/etc/odbc.ini";
my $odbcinst_ini="/etc/odbcinst.ini";
#my $sophomorix_db="/usr/share/sophomorix/config-templates/pg/sophomorix.sql";
my $sophomorix_db=${DevelConf::sql_create_path}."sophomorix.sql";

# pam
my $common_account="/etc/pam.d/common-account";
my $common_auth="/etc/pam.d/common-auth";
my $common_password="/etc/pam.d/common-password";
my $common_session="/etc/pam.d/common-session";
my $pam_ldap_conf="/etc/pam_ldap.conf";

# samba
# use linuxmuster-base if existing
my $smb_conf_template=${template}."/samba/smb.conf.template";
if (-e "$DevelConf::linuxmuster_base_smb_conf"){
    $smb_conf_template=${DevelConf::linuxmuster_base_smb_conf};
}

my $smb_netlogon_bat=${DevelConf::devel_netlogon_path}."/logon.bat";
if (-e "$DevelConf::linuxmuster_base_logon_bat"){
    $smb_netlogon_bat=${DevelConf::linuxmuster_base_logon_bat};
}

my $smb_netlogin_bat=${DevelConf::devel_netlogon_path}."/login.bat";
if (-e "$DevelConf::linuxmuster_base_login_bat"){
    $smb_netlogin_bat=${DevelConf::linuxmuster_base_login_bat};
}




# bdb
my $db_config="/var/lib/ldap/DB_CONFIG";


############################################################
# message
############################################################
my $message1="Do not change this file! It will be overwritten!";
my $message2="This configuration file was automatically created by sophomorix-setup-pgldap";
my $message3="Last Modification: $timestamp";



############################################################
# basedn
############################################################
my @ldapdomains=();
my (@domains)= split(/\./,$domainname);
foreach my $value (@domains) {
    push @ldapdomains, "dc=${value}";
}
$basedn = join "," , @ldapdomains;


############################################################
# SMB server string
############################################################
print "   Samba Server String         :   $smbserverstring \n";

############################################################
# Database
############################################################
print "   Database name               :   $dbname \n";



# the great replacement string
$replace= " -e 's/\@\@basedn\@\@/${basedn}/g'". 
          " -e 's/\@\@servername\@\@/${servername}/g'". 
          " -e 's/\@\@internip\@\@/${internip}/g'". 
          " -e 's/\@\@serverip\@\@/${internip}/g'". 
          " -e 's/\@\@internmask\@\@/${internmask}/g'". 
          " -e 's/\@\@sid\@\@/${sid}/g'". 
          " -e 's/\@\@workgroup\@\@/${smbworkgroup}/g'". 
          " -e 's/\@\@smbserverstring\@\@/${smbserverstring}/g'". 
          " -e 's/\@\@ldappassword\@\@/${ldappassword}/g'". 
          " -e 's/\@\@dbpassword\@\@/${dbpassword}/g'". 
          " -e 's/\@\@dbname\@\@/${dbname}/g'". 
          " -e 's/\@\@teachersgroup\@\@/${DevelConf::teacher}/g'". 
          " -e 's/\@\@administrator\@\@/${DevelConf::smb_administrator}/g'". 
          " -e 's/\@\@domadmin\@\@/${DevelConf::smb_domadmin}/g'". 
          " -e 's/\@\@domadmins\@\@/${DevelConf::smb_domadmin_group}/g'". 
          " -e 's/\@\@message1\@\@/${message1}/g'". 
          " -e 's/\@\@message2\@\@/${message2}/g'".
          " -e 's/\@\@message3\@\@/${message3}/g'"; 


# repair.directories einlesen
my %permissions=&get_alle_verzeichnis_rechte();



# do it, ldap 
system("sed $replace ${template}/ldap/ldap.conf.template > $ldap_conf"); 
system("sed $replace ${template}/ldap/slapd.conf.template > $slapd_conf"); 
system("sed $replace ${template}/ldap/smbldap.conf.template > $smbldap_conf"); 
system("sed $replace ${template}/ldap/ldap.secret.template > $ldap_secret"); 
system("sed $replace ${template}/ldap/nsswitch.conf.template > $nsswitch_conf"); 
system("sed $replace ${template}/ldap/libnss-ldap.conf.template > $libnssldap_conf"); 

# do it, pg
system("sed $replace ${template}/pg/odbc.ini.template > $odbc_ini"); 
system("sed $replace ${template}/pg/odbcinst.ini.template > $odbcinst_ini");


# pg_hba.conf
my $seen_postgres=0;
my $seen_local_ldap=0;
my $seen_host_ldap=0;
my @line=();



&insert_line_before("local;all;postgres;ident;postgres",
                    "local;all;postgres;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");

&insert_line_before("local;all;ldap;ident;ldap",
                    "local;all;postgres;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");


&insert_line_before("local;template1;ldap;password;",
                    "local;all;all;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");

&insert_line_before("local;ldap;ldap;password;",
                    "local;all;all;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");

&insert_line_before("host;template1;ldap;127.0.0.1;255.255.255.255;password",
                    "host;all;all;127.0.0.1;255.255.255.255;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");

&insert_line_before("host;ldap;ldap;127.0.0.1;255.255.255.255;password",
                    "host;all;all;127.0.0.1;255.255.255.255;ident;sameuser",
                    "/etc/postgresql/pg_hba.conf");


# sollte raus ???
# local all all ident sameuser     sollte raus
# host all all 127.0.0.1 255.255.255.255 ident sameuser



# pg_ident.conf
my $seen_ident_postgres=0;
my $seen_ident_postgres_pg=0;
my $seen_ident_ldap=0;
my $file_ident="/etc/postgresql/pg_ident.conf";
my $file_ident_tmp="/etc/postgresql/pg_ident.conf.tmp";
print "Working on pg-ident.conf\n";
open(IDENT, "<$file_ident") || die "Fehler: $!";
open(IDENTMP, ">$file_ident_tmp") || die "Fehler: $!";
while (<IDENT>) {
    chomp(); # Returnzeichen abschneiden
    if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
    #if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
    my (@line) = split(/\s+/);
    if ($line[0] eq "postgres" and
       $line[1] eq "root" and
       $line[2] eq "postgres") {
       $seen_ident_postgres=1;
       print "   Line is in $file_ident already ...  doing nothing.\n";
    }
    if ($line[0] eq "postgres" and
       $line[1] eq "postgres" and
       $line[2] eq "postgres") {
       $seen_ident_postgres_pg=1;
       print "   Line is in $file_ident already ...  doing nothing.\n";
    }
    if ($line[0] eq "ldap" and
       $line[1] eq "root" and
       $line[2] eq "ldap") {
       $seen_ident_ldap=1;
       print "   Line is in $file_ident already ...  doing nothing.\n";
    }
    print IDENTMP $_,"\n";
}

if ($seen_ident_postgres==0){
    print IDENTMP "postgres       root       postgres\n";
}

if ($seen_ident_postgres_pg==0){
    print IDENTMP "postgres       postgres   postgres\n";
}

if ($seen_ident_ldap==0){
    print IDENTMP "ldap           root       ldap\n";
}


close(IDENT);
close(IDENTMP);
system("mv /etc/postgresql/pg_ident.conf.tmp /etc/postgresql/pg_ident.conf");


# what to do:
# 3x basedn
# 1x sid
# ... 
#system("sed $replace ${template}/pg/sophomorix.sql.template > $sophomorix_db"); 

# do it, pam
system("sed $replace ${template}/pam/common-account.template > $common_account"); 
system("sed $replace ${template}/pam/common-auth.template > $common_auth"); 
system("sed $replace ${template}/pam/common-password.template > $common_password"); 
system("sed $replace ${template}/pam/common-session.template > $common_session"); 
system("sed $replace ${template}/pam/pam_ldap.conf.template > $pam_ldap_conf"); 

# do it, samba
# samba part 1
&setup_verzeichnis("\$homedir_samba","$DevelConf::homedir_samba");
system("sed $replace ${smb_conf_template} > ${DevelConf::smb_conf}"); 

if (not -e "$DevelConf::smb_conf_global_sys"){
    system("cp $DevelConf::smb_conf_global $DevelConf::smb_conf_global_sys");
    system("chmod 644 $DevelConf::smb_conf_global_sys");
}

# do it, bdb
system("sed $replace ${template}/bdb/DB_CONFIG > $db_config"); 


# Set password in /var/lib/samba/secrets.tdb
system("smbpasswd -w $ldappassword");





############################################################
# restarting services 
############################################################

# stop samba
system("/etc/init.d/samba stop");
sleep 2;
system("killall smbd");
system("killall nmbd");


# stop ldap
system("/etc/init.d/slapd stop");
sleep 2;
system("killall slapd");


# stop postgres
system("/etc/init.d/postgresql stop");
sleep 5;
system("killall postmaster");




# starting postgres
system("/etc/init.d/postgresql start");

sleep 5;

#system("su --command='createdb -U postgres ldap' postgres");
#system("createdb -U postgres ldap");




if ($new_database==1){
    print "\nWARNING: I will drop your database ldap in 5 seconds!\n";
    print "\n Hit Control-C to abort, ...!\n\n";
    sleep 5;
    system("droplang -U postgres plpgsql ldap");
    system("dropdb -U postgres ldap");
    system("dropuser -U postgres ldap");
    sleep 2;
}


# trying to connect
my $dbh = DBI->connect("dbi:Pg:dbname=ldap", "ldap","pass",
          { RaiseError => 0, PrintError => 0});

# create new database if necessary
if ( ($old_version eq "0.0.0-0" and not defined $dbh) or $new_database==1){
    print "\ncreating the postgresql database ldap \n\n";
    &create_database();
} else {
    print "\nNOT creating the postgresql database ldap \n\n";
}


# upgrade database if necessary
if ($keep_database==1){
    print "\nNOT running upgrades on postgresql database ldap (option given)\n\n";
} else {
    &upgrade_database();
}

print "\n\n";

# create new indices
&drop_indices();
&create_indices();


# run upgrade scripts
&run_upgrade_scripts();


# setting the password
&set_db_passwd($dbpassword);


# setting the ldap suffix dn=x
&set_ldap_suffix_pg($basedn);


# setting institutes
#&set_ldap_institutes($institutes);


# setting the SID for existing users/groups
# ???????
#&set_samba_sid();



sleep 5;



# starting ldap
system("/etc/init.d/slapd start");

sleep 2;




############################################################
# SID
############################################################
$sid=`net getlocalsid`;
($a,$sid)=split(/:/,$sid);
$sid=~s/ //g;
chomp($sid);
print "   SID from the system         :   $sid \n";
#print "---$sid---\n";


# change the great replacement string (with new sid)
$replace= " -e 's/\@\@basedn\@\@/${basedn}/g'". 
          " -e 's/\@\@servername\@\@/${servername}/g'". 
          " -e 's/\@\@internip\@\@/${internip}/g'". 
          " -e 's/\@\@serverip\@\@/${internip}/g'". 
          " -e 's/\@\@internmask\@\@/${internmask}/g'". 
          " -e 's/\@\@sid\@\@/${sid}/g'". 
          " -e 's/\@\@workgroup\@\@/${smbworkgroup}/g'". 
          " -e 's/\@\@smbserverstring\@\@/${smbserverstring}/g'". 
          " -e 's/\@\@ldappassword\@\@/${ldappassword}/g'". 
          " -e 's/\@\@dbpassword\@\@/${dbpassword}/g'". 
          " -e 's/\@\@dbname\@\@/${dbname}/g'". 
          " -e 's/\@\@message1\@\@/${message1}/g'". 
          " -e 's/\@\@message2\@\@/${message2}/g'".
          " -e 's/\@\@message3\@\@/${message3}/g'"; 


# patch smbtools
system("sed $replace ${template}/ldap/smbldap.conf.template > $smb_ldap_conf"); 
system("sed $replace ${template}/ldap/smbldap_bind.conf.template > $smb_ldap_bind_conf"); 









# starting samba
system("/etc/init.d/samba start");

# ssh 
system("/etc/init.d/ssh restart");

# nscd
if (-e "/etc/init.d/nscd"){
   system("/etc/init.d/nscd stop");
   sleep 2;
   system("killall nscd");
   sleep 2;
   system("killall -9 nscd");
   system("/etc/init.d/nscd start");
}


# adding groups with smbldap-tools
&add_ldap_group("domadmins","Domain Admins",512);
&add_ldap_group("domusers","Domain Users",513);
&add_ldap_group("domguests","Domain Guests",514);
&add_ldap_group("domcomputers","Domain Computers",515);
# local groups
&add_local_ldap_group("printoperators","Print Operators",550);
#&add_local_ldap_group("pgmadmins","Program Administrators",999);
&add_local_ldap_group("wwwadmin","Web Administrators",997);
&add_local_ldap_group("replicators","Replicators",552);
&add_local_ldap_group("administrators","Administrators",544);
&add_local_ldap_group("accountoperators","Account Operators",548);
&add_local_ldap_group("backupoperators","Backup Operators",551);


&setup_verzeichnis("\$homedir_all_admins","$DevelConf::homedir_all_admins");

# adding users
# administrator is equal to admin in ml 2.x
system("smbldap-useradd -u 998 -a  -c administrator -m -d /home/administrators/administrator -g 'domadmins' -G 'administrators,printoperators' -s /bin/bash administrator");

# pgmadmin is to install programs on the win clients
system("smbldap-useradd -u 999 -a  -c 'Programm Administrator' -m -d /home/administrators/pgmadmin -g 'domadmins' -s /bin/false pgmadmin");


# wwwadmin for web services (moodle, opengroupware, imp ...   ) NOT a windows user
system("smbldap-useradd -u 997 -c 'web Administrator' -m -d /home/administrators/wwwadmin -g 'wwwadmin' -s /bin/false wwwadmin");

# domadmin (for joining the domain)
system("smbldap-useradd -a -u 996 -c 'Domain Admin' -m -d /dev/null -g 'domadmins' -s /bin/false domadmin");


# group teachers part 1
&create_class_db_entry(${DevelConf::teacher},4);

&setup_verzeichnis("\$share_share","$DevelConf::share_share");

# todo /etc/rc2.d samba auf 21 erhöhen

# Adding directories
# First Parameter: search for "$homedir_teacher" in repair.directories an do NOT
#    expand to the variable $homedir_teacher (i.e. dont forget the leading \)
# Second Parameter: Expand to the contents of $homedir_teacher wich is defined in
#    sophomorix-devel.conf 
&setup_verzeichnis("\$homedir_teacher","$DevelConf::homedir_teacher");
&setup_verzeichnis("\$homedir_pupil","$DevelConf::homedir_pupil");
&setup_verzeichnis("\$homedir_ws","$DevelConf::homedir_ws");


# share
&setup_verzeichnis("\$share_exams","$DevelConf::share_exams");
&setup_verzeichnis("\$share_classes","$DevelConf::share_classes");
&setup_verzeichnis("\$share_subclasses","$DevelConf::share_subclasses");
&setup_verzeichnis("\$share_projects","$DevelConf::share_projects");
&setup_verzeichnis("\$share_school","$DevelConf::share_school");

# tasks
&setup_verzeichnis("\$tasks_tasks","$DevelConf::tasks_tasks");
&setup_verzeichnis("\$tasks_classes","$DevelConf::tasks_classes");
&setup_verzeichnis("\$tasks_rooms","$DevelConf::tasks_rooms");
&setup_verzeichnis("\$tasks_subclasses","$DevelConf::tasks_subclasses");
&setup_verzeichnis("\$tasks_projects","$DevelConf::tasks_projects");
&setup_verzeichnis("\$tasks_teachers","$DevelConf::tasks_teachers");

# samba part 2
&setup_verzeichnis("\$homedir_samba_netlogon",
                   "$DevelConf::homedir_samba_netlogon");
&setup_verzeichnis("\$homedir_samba_progs",
                   "$DevelConf::homedir_samba_progs");
&setup_verzeichnis("\$homedir_samba_cds",
                   "$DevelConf::homedir_samba_cds");

#print "${template}/samba/netlogon/logon.bat.template > $smb_netlogon_bat \n";
#print "${template}/samba/netlogon/login.bat.template > $smb_netlogin_bat \n";
system("sed $replace ${template}/samba/netlogon/logon.bat.template > $smb_netlogon_bat"); 
system("sed $replace ${template}/samba/netlogon/login.bat.template > $smb_netlogin_bat"); 


# www stuff
&setup_verzeichnis("/var/www","/var/www");
&setup_verzeichnis("\$www_people","$DevelConf::www_people");
&setup_verzeichnis("\$www_students","$DevelConf::www_students");
&setup_verzeichnis("\$www_classes","$DevelConf::www_classes");
&setup_verzeichnis("\$www_projects","$DevelConf::www_projects");


# make important data readable by root only
&setup_verzeichnis("\$var_lib_pfad","$DevelConf::var_lib_pfad");
&setup_verzeichnis("\$log_files","$DevelConf::var_lib_pfad");





# group teachers part 2
&provide_class_files(${DevelConf::teacher});

# make some files owned by root.root and 0600
&make_some_files_root_only();


&log_script_end(@arguments);




# sophomorix-database is a persistent database
# should be in /var/lib/sophomorix
# database type is postgresql -> no choice
# connection: unix socket or tcp/ip ??? automatically
# host is localhost -> no choice
# password is auto-generaded -> no choice
# database name is sophomorix -> no choice
#
# backup database when upgrading -> show where to find backups
# remove database when deconfigure/remove package -> no
# remove database when purge package -> no


# moodle
# moodle macht keinen Eintrag in /etc/postgresql/pg-hba.conf
# wieso tuts trotzdem 
# (when user moodle is added (adduser), then it works ->  pg-hba.conf:  ident)


#my $pass_file="";
#my $dbuser="";

## read the password
#if (-e $pass_file){
#   my $pass_saved=&get_password($pass_file);
#   print "   Trying to connect as $dbuser to $dbname with password $pass_saved!\n";
#
#   my $dbh = DBI->connect("dbi:Pg:dbname=$dbname", "$dbuser","$pass_saved",
#               { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
#   if (defined $dbh){
#    print "   Connection with password $pass_saved successful!\n";
#    print "   Database $dbname ready for user $dbuser!\n";
#  } else {
#      print "   Could not connect to database with password $pass_saved!\n";
#  }
#} else{
#    print "\n There is no saved password, skipping ...\n";
#}
#
#
#
#print "\n##### sophomorix-setup-pgldap is configuring openldap for sophomorix-pgldap ...\n";

# phppgadmin: edit /etc/phppgadmin/apache.conf
#             restart apache






############################################################
# sub
############################################################

sub create_indices {
    # read indices from file
    &titel("Creating indices in $DevelConf::sql_create_index");
    system("psql -U ldap ldap < $DevelConf::sql_create_index");
}


sub drop_indices {
#    my ($restart) = @_;
#    if (not defined $restart){
#        $restart=0;
#    }
    &titel("Dropping indices in $DevelConf::sql_drop_index");
    open(DROP, "<$DevelConf::sql_drop_index") || die "Fehler: $!";
    while (<DROP>) {
        chomp(); # Returnzeichen abschneiden
        s/\s//g;
        if (/^\#/ or $_ eq "") {
            next;
        }
        my $index = $_;
        print "   Trying to drop $index ...\n";

        # connect, but dont raise errors
        my $dbh=&db_connect(0);

        my $sql="DROP INDEX $index;";	
        if($Conf::log_level>=3){
           print "\nSQL: $sql\n";
        }
        if ($dbh->do($sql)){
            print "      DROPPED index $index\n";
        } else {
            my $err_str=$dbh->errstr;
            if ($err_str=~/existiert nicht/){
                # german errors
		print "      WARNING: index $index is nonexisting\n";
            } else {
                # other languages
		print "      $err_str";

            }
        }
        &db_disconnect($dbh);
    }
    close(DROP);
    #if ($restart==1){
        #system("/etc/init.de/slapd stop");
        #sleep 1;    
        #system("/etc/init.de/slapd start");    
    #}
}


sub add_ldap_group {
    my ($unix_group,$nt_group,$gid) = @_;
    if (defined getgrnam($unix_group)) {
        print "Group $unix_group (NT: $nt_group) exists already.\n";
    } else {
        system("smbldap-groupadd -g $gid '$unix_group'");
        system("net groupmap add rid=$gid unixgroup='$unix_group' ntgroup='$nt_group'");
    }
}

sub add_local_ldap_group {
    my ($unix_group,$nt_group,$gid) = @_;
    if (defined getgrnam($unix_group)) {
        print "Group $unix_group (NT: $nt_group) exists already.\n";
    } else {
        system("smbldap-groupadd -g $gid '$unix_group'");
        system("net groupmap add sid='S-1-5-32-$gid' unixgroup='$unix_group' ntgroup='$nt_group' type=local");
    }
}

sub set_samba_sid {
    my $sid=&get_smb_sid();
    my $dbh=&db_connect();
    my $sql="";
    print "\nSetting SID in the database to $sid \n";

    my $sth= $dbh->prepare( "SELECT sambasid,sambaprimarygroupsid,id 
                             FROM samba_sam_account" );
       $sth->execute();

    my $array_ref = $sth->fetchall_arrayref();

    my $i=0;
    foreach ( @{ $array_ref } ) {
       my $user_sid=${$array_ref}[$i][0];
       my $group_sid=${$array_ref}[$i][1];
       my $id=${$array_ref}[$i][2];

       print " OLD user-sid :  $user_sid  \n";
       print " OLD group-sid:  $group_sid \n";

       my $new_user_sid=&new_sid($sid,$user_sid);
       my $new_group_sid=&new_sid($sid,$group_sid);

       print " NEW user-sid :  $new_user_sid  \n";
       print " NEW group-sid:  $new_group_sid \n";

       $sql="UPDATE samba_sam_account 
             SET 
             sambasid='$new_user_sid', sambaprimarygroupsid='$new_group_sid'
             WHERE id=$id";
       print $sql,"\n";
       #$dbh->do($sql);
       $i++;
    }   
    &db_disconnect($dbh);
}



sub new_sid {
    my ($sid,$old) = @_;
    my (@list) = split(/-/,$old);
    my $last = pop @list;
    my $new = $sid."-".$last

}




sub set_ldap_institutes {
    # what about bsz.local.domain.de or so???????
    my $dbh=&db_connect();
    my $sql="";
    print "\nUpdating institutes to $institutes \n";
    $sql="UPDATE institutes SET name='$institutes' WHERE id=1";
    print $sql,"\n";
    $dbh->do($sql);

    &db_disconnect($dbh);
}


sub set_db_passwd {
    my ($pass) = @_;
    my $dbh=&db_connect();
    my $sql="";
    print "\nUpdating password of user ldap \n";
    $sql="ALTER USER ldap WITH ENCRYPTED password '$pass'";
    # WARNING: The following line prints the password
    #print $sql,"\n";
    $dbh->do($sql);
    &db_disconnect($dbh);
}

sub set_ldap_suffix_pg {
    my ($suffix) = @_;
    if (not defined $suffix or $suffix eq ""){
        print "I won't set a empty ldap suffix!\n "
    } else {
       my $dbh=&db_connect();
       my $sql="";
       print "\nUpdating sldap suffix in the postgres database to $suffix \n";

       # updating ldap_entries
       my $sth= $dbh->prepare( "SELECT dn,id FROM ldap_entries" );
          $sth->execute();

       my $array_ref = $sth->fetchall_arrayref();

       my $i=0;
       foreach ( @{ $array_ref } ) {
          my $old_dn=${$array_ref}[$i][0];
          my $id=${$array_ref}[$i][1];
          print " OLD dn:  $old_dn \n";
          # split at first 'dn'
          my ($old_cn)=split(/dc=/,$old_dn);
          my $new_dn=$old_cn.$suffix;
          print "  NEW dn: $new_dn \n";
          $sql="UPDATE ldap_entries SET dn='$new_dn' WHERE id=$id";
          #print $sql,"\n";
          $dbh->do($sql);
          $i++;
       }
       &db_disconnect($dbh);
    }
}


sub create_database {
    print "Creating database ldap \n";
    my $file_admin = ${DevelConf::sql_create_path}."sophomorix-admin.sql";
    my $file_lang = ${DevelConf::sql_create_path}."sophomorix-lang.sql";
    my $file_db = ${DevelConf::sql_create_path}."sophomorix.sql";
    system("psql -U postgres template1 < $file_admin");
    system("psql -U postgres ldap < $file_lang");
    system("psql -U ldap ldap < $file_db");
}



sub upgrade_database {
#    if ($old_version eq "0.0.0-0"){
#        print "NOT upgrading database ldap (Old package is $old_version) \n";
#    } else {
        print "Upgrading database ldap with the following files: \n";
        foreach my $file_id (@upgrade_sql_id){
            my $file = ${DevelConf::sql_upgrade_path}.
                       $upgrade_sql_id_filename{$file_id};
            print "  $file \n";
            system("psql -U ldap ldap < $file");
        }
#    }
}

sub run_upgrade_scripts {
#    if ($old_version eq "0.0.0-0"){
#        print "NOT running upgrade scripts (Old package is $old_version) \n";
#    } else {
        print "\nRunning the following upgrade scripts: \n";
        foreach my $file_id (@upgrade_scripts_id){
            my $file = ${DevelConf::upgrade_path_script}.
               $upgrade_scripts_id_filename{$file_id};
            print "  $file \n";
            chmod 0755, $file;
            system("$file");
        }
#    }
}


sub insert_line_before {
    my ($insert_line,$before,$file) = @_;
    my $file_tmp=$file.".tmp";
    my $seen_line=0;
    my @insert_line = split(/;/,$insert_line);
    my @before = split(/;/,$before);
    print "Checking if line is to be inserted into $file:\n";
#    print "   Insert_Line: $insert_line[0]  ","$insert_line[1]  ",
#                          "$insert_line[2]  ","$insert_line[3]  ",
#                          "$insert_line[4]  ","$insert_line[5]  ",
#                          "$insert_line[6]  \n";

#    print "   Before:      $before[0]  " ,"$before[1]  ",
#                          "$before[2]  ","$before[3]  ",
#                          "$before[4]  ","$before[5]  ",
#                          "$before[6]  \n";

    open(HBA, "<$file") || die "Fehler: $!";
    open(HBATMP, ">$file_tmp") || die "Fehler: $!";
    while (<HBA>) {
      chomp(); # Returnzeichen abschneiden
#      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
#      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      my (@line) = split(/\s+/);
      if ($line[0] eq $insert_line[0] and
          $line[1] eq $insert_line[1] and
          $line[2] eq $insert_line[2] and
          $line[3] eq $insert_line[3] and
          $line[4] eq $insert_line[4] and
          $line[5] eq $insert_line[5] and
          $line[6] eq $insert_line[6]
         ){
          $seen_line=1;
          # doing nothing
          print "   Line is in $file already ...  doing nothing.\n";
          #print HBATMP $_,"\n",
          #next;
      }
      if ($before[0] eq $line[0] and
          $before[1] eq $line[1] and
          $before[2] eq $line[2] and
          $before[3] eq $line[3] and
          $before[4] eq $line[4] and
          $before[5] eq $line[5] and
          $before[6] eq $line[6] and
          $seen_line==0
         ){
          print "   Inserting new line, ...\n";
          print HBATMP "$insert_line[0]   ",
                       "$insert_line[1]        ",
                       "$insert_line[2]         ",
                       "$insert_line[3]      ",
                       "$insert_line[4]      ",
                       "$insert_line[5]      ",
	               "$insert_line[6]\n";
    }
        print HBATMP "$_","\n",
  }
  close(HBA);
  close(HBATMP);
  system("mv $file_tmp $file");
}




sub save_password {
    my ($password,$file)=@_;
    open (FILE, ">$file");
    print FILE $password;
    close (FILE);

}


sub fetch_ldap_pg_passwords {
    #my $config_file="/etc/ldap/slapd.conf";
    my $ldap_passwd="";
    my $pg_passwd="";
    print "Fetching old passwords from ${config_file}\n";
    if (-e $old_password_file) {
         # looking for password
 	 open (CONF, $old_password_file);
         while (<CONF>){
             chomp();
             if (/(^dbpasswd)\s{1,}?(.*)/){
                 # whitespace entfernen
                 my $dbpasswd=$2;
                 $dbpasswd=~s/\s//g;
                 #print "---$dbpasswd---\n";
                 $pg_passwd=$dbpasswd;
	     }
             if (/(^rootpw)\s{1,}?(.*)/){
                 # whitespace entfernen
                 my $rootpw=$2;
                 $rootpw=~s/\s//g;
                 #print "---$rootpw---\n";
                 $ldap_passwd=$rootpw;
	     }
         }
         close(CONF);
         return ($ldap_passwd,$pg_passwd);
    } else {
        print "$old_password_file doesn't exist\n";
        return ("","");
    }
}



