#!/usr/bin/perl 
# Dieses Script (sophomorix-setup-pgldap) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# This Script adds directories and files that are necessary for sophomorix-base 
# It should be run as postinst
use strict;
use DBI;
use Getopt::Long;
Getopt::Long::Configure ("bundling");


# Todo replace debconf calls with thomas values

use Sophomorix::SophomorixConfig; 
use Sophomorix::SophomorixBase; 

my $command="";
my $replace="";


my $basename="";
my $domainname="";

print "Using the following values to configure the system\n";
############################################################
# read the values from the config file
############################################################
my $config_file="/etc/sophomorix/pgldap/pgldap.conf";
if (-e $config_file) { 
   { package PgLdapConf ; do "$config_file"}
   $domainname=$PgLdapConf::domainname;
}

############################################################
# get debconf data, one by one
############################################################

# domainname

my $domainname_debconf=&get_debconf_value("sambass", "run_mode",0);
# process debconf data
if ($domainname_debconf ne 0){
    # from debconf
    $domainname=$domainname_debconf;    
    print "   Domainname from debconf    :   $domainname \n";
} else {
    # from config file
    print "   Domainname from pgldap.conf:   $domainname \n";
}





############################################################
# Replace the following config-files
############################################################
# path to the template-files
my $template="/usr/share/sophomorix/config-templates";

my $ldap_conf="/etc/ldap/ldap.conf";
my $slapd_conf="/etc/ldap/slapd.conf";



############################################################
# message
############################################################
#my $message="# Do not change this file! \n# This configuration file was automatically created";
my $message1="Do not change this file! It will be overwritten!";
my $message2="This configuration file was automatically created by sophomorix-setup-pgldap";

############################################################
# basename
############################################################
my @ldapdomains=();
my (@domains)= split(/\./,$domainname);
foreach my $value (@domains) {
    push @ldapdomains, "dc=${value}";
}
$basename = join "," , @ldapdomains;


$replace= " -e 's/\@\@basename\@\@/${basename}/g'". 
          " -e 's/\@\@message1\@\@/${message1}/g'". 
          " -e 's/\@\@message2\@\@/${message2}/g'"; 

# do it!
$command="sed $replace ${template}/ldap/ldap.conf.template > $ldap_conf";
system("$command"); 


$command="sed $replace ${template}/ldap/slapd.conf.template > $slapd_conf";
system("$command"); 







exit;




# sophomorix-databas is a persistent database
# should be in /var/lib/sophomorix
# database type is postgresql -> no choice
# connection: unix socket or tcp/ip ??? automatically
# host is localhost -> no choice
# password is auto-generaded -> no choice
# database name is sophomorix -> no choice
#
# backup database when updating -> show where to find backups
# remove database when deconfigure/remove package -> no
# remove database when purge package -> no


# moodle
# moodle macht keinen Eintrag in /etc/postgresql/pg-hba.conf
# wieso tuts trotzdem 
# (when user moodle is added (adduser), then it works ->  pg-hba.conf:  ident)


print "##### sophomorix-setup-pgldap is configuring postres for sophomorix-pgldap ...\n";






my $dbname="sopo12";
my $dbuser=$dbname;
my $pass_file="/etc/sophomorix/pgldap.secret";
my $pass="server77";
my $dbh;



# use password from option, when given
# else: create long random password






# make sure database exists
system("su --command='createuser $dbuser -A -D' postgres");
# make sure database exists
system("su --command='createdb $dbname' postgres");




# check if I can connect without password
print "\nChecking if you have a password set for the sophomorix user ...\n"; 

my $dbh = DBI->connect("dbi:Pg:dbname=$dbname", "$dbuser","",
               { RaiseError => 1, PrintError => 0, AutoCommit => 1 });

if (defined $dbh){
    print "   Connection without password was succesful!\n";
    print "   I'm setting a random password ($pass_file)!\n";
    # todo

} else {
    print "   Could not connect to database without password!\n";
}



# sql-command to create user

# CREATE USER $dbname WITH PASSWORD $password

# include the following line to /etc/postgresql/pg_hba.conf:
# local   all   all    passwd
# local   sophmorix   sophomorix    passwd


# datenbank uploaden
# su postgres; psql < datenbank.sql



# check if I can connect with saved password
print "\nChecking if I can connect with ramdom password from $pass_file ...\n"; 

# read the password
if (-e $pass_file){
   my $pass_saved=&get_password($pass_file);
   print "   Trying to connect as $dbuser to $dbname with password $pass_saved!\n";

   my $dbh = DBI->connect("dbi:Pg:dbname=$dbname", "$dbuser","$pass_saved",
               { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
   if (defined $dbh){
    print "   Connection with password $pass_saved successful!\n";
    print "   Database $dbname ready for user $dbuser!\n";
  } else {
      print "   Could not connect to database with password $pass_saved!\n";
  }
} else{
    print "\n There is no saved password, skipping ...\n";
}




print "\n##### sophomorix-setup-pgldap is configuring openldap for sophomorix-pgldap ...\n";









# phppgadmin: edit /etc/phppgadmin/apache.conf
#             restart apache






############################################################
# sub
############################################################

sub save_password {
    my ($password,$file)=@_;
    open (FILE, ">$file");
    print FILE $password;
    close (FILE);

}


sub get_password {
    my ($file)=@_;
    my $password;
    open (FILE, "<$file");
    while (<FILE>){
        #print "Line: $_ \n";
	$password=$_;
    }
    close (FILE);
    return $password;
}

