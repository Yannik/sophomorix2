#!/usr/bin/perl -w
# Dieses Script (sophomorix-search) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixFiles;
# Einlesen der Konfigurationsdatei für Entwickler
{ package DevelConf ; do "/etc/sophomorix/devel/user/sophomorix-devel.conf"}

# jeffbecks Bibliothek und
# Einlesen der Konfigurationsdatei
#require "${DevelConf::library_pfad}/sophomorix-lib-base";


if($DevelConf::library_pfad){};


# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $loginname="";
my $identifier="";
my $group="";
my $string="";

# Parsen der Optionen
my $testopt=GetOptions(
           "string|s=s" => \$string,
           "identifier|id=s" => \$identifier,
           "group|class|g=s" => \$group,
           "verbose|v+" => \$Conf::log_level,
           "info|i" => \$info,
           "help|h" => \$help
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print "\n$scriptname gathers information about users and displays it\n\n";

   # gemeinsamer Hilfetext aller Scripten
   &help_text_all;

   # optionen
   print "Optionen:\n\n";

#   print "  --info, -i\n";
#   print "     Shows the which $scriptname asks for data. \n\n";

   print "  --string string\n";
   print "     Searches in all Lines of $DevelConf::protokoll_datei ",
         "     for string\n\n";

   exit;
}


# --info
if ($info==1) {
   # test th connection
   print "   This scrips uses files\n";
   exit;

}


my ($class,
    $gec_user,
    $login,
    $first_pass,
    $birth,
    $unid,
    $subclass,
    $status,
    $tol,
    $deact,
    $ex_admin,
    $acc_type)=();

 my ($loginname_passwd,
     $passwort,
     $uid_passwd,
     $gid_passwd,
     $quota_passwd,
     $name_passwd,
     $gcos_passwd,
     $home,
     $shell)=();

my $group_string="";
my @group_list=();
my $pri_group_string="";
my $grp_string="";
my $home_ex="---";
my $samba="";
my @samba_lines="";
############################################################
# Start
############################################################
print "I'm looking for $string ... \n\n";

open(PROTOKOLL,"<$DevelConf::protokoll_datei");
   while (<PROTOKOLL>){
       if (/$string/){
          chomp();

          ($class,$gec_user,$login,$first_pass,$birth,
           $unid,$subclass,$status,$tol,$deact,$ex_admin,$acc_type)=split(/;/);
          # Abfragen der /etc/passwd
          ($loginname_passwd,
          $passwort,
          $uid_passwd,
          $gid_passwd,
          $quota_passwd,
          $name_passwd,
          $gcos_passwd, 
          $home,
          $shell
          )=getpwnam("$login");
          # GCOS-Feld aufsplitten

          # Gruppen-Zugehoerigkeit
          @group_list=();
          $grp_string="";
          $pri_group_string=`id -gn $login`;
          $group_string=`id -Gn $login`;
          chomp($group_string);
          chomp($pri_group_string);
          @group_list=split(/ /, $group_string);
	  print "User                :  $login  ";
       if (defined $loginname_passwd){
	     print "($loginname_passwd exists in the system) \n";
       } else {
	     print "(ERROR: $login is not in the system) \n";
       }
          print "=======================================";
          print "=======================================\n";

       printf "   AdminClass       : %-47s %-11s\n",$class,$login;

       printf "   PrimaryGroup     : %-47s %-11s\n",$pri_group_string,$login;
       foreach my $gr (@group_list){
	   $grp_string= $grp_string." ".$gr;
	  #print $gr," ";
       }
       printf "   SecondaryGroups  :%-48s %-11s\n",$grp_string,$login;

       printf "   Gecos            : %-47s %-11s\n", $gec_user,$login;
  
          if (defined $loginname_passwd){
             printf "   SystemGecos      : %-47s %-11s\n",$gcos_passwd, $login;
	  }

          if (-e $home){
              $home_ex=$home."  (existing)";
	      #print "(existing) \n";
          } else {
	      #print "(ERROR: non-existing!) \n";
              $home_ex=$home."  (ERROR: non-existing)";
	      
          }
          if (defined $home){
             printf "   Home             : %-47s %-11s\n",$home_ex,$login;
	  }
        

          if (defined $shell){
             printf "   LoginShell       : %-47s %-11s\n",$shell,$login;
	  }


	  printf "   FirstPassword    : %-47s %-11s\n",$first_pass,$login;
	  printf "   Birthday         : %-47s %-11s\n",$birth,$login;

          if (defined $unid){
	     printf "   Unid             : %-47s %-11s\n",$unid,$login;
          }

          if (defined $subclass){
	     printf "   SubClass         : %-47s %-11s\n",$subclass,$login;
          }

          if (defined $status){
	     printf "   Status           : %-47s %-11s\n",$status,$login;
          }

          if (defined $tol){
	     printf "   TolerationDate   : %-47s %-11s\n",$tol,$login;
          }

          if (defined $deact){
	     printf "   DeactivationDate : %-47s %-11s\n",$deact,$login;
          }

          if (defined $ex_admin){
	     printf "   ExitAdminClass   : %-47s %-11s\n",$ex_admin,$login;
          }

          if (defined $acc_type){
	     printf "   AccountType      : %-47s %-11s\n",$acc_type,$login;
          }

          print "Samba:\n";
          $samba=`pdbedit -v -u $login`;
          @samba_lines=split(/\n/,$samba);
	  foreach (@samba_lines){
#            s/\s//g;
            # ??? nur am ersten auftreten von : splitten
            my ($attr,$value)=split(/: /);
            $value=~s/\s//g;

	    if (/^Account Flags/){
              printf "   Account Flags    : %-47s %-11s\n",$value,$login;    
            }
	    if (/^Home Directory/){
              printf "   Home Directory   : %-47s %-11s\n",$value,$login;    
            }
	    if (/^Password last set/){
              printf "   Pwd last set     : %-47s %-11s\n",$value,$login;    
            }
	    if (/^Password can change/){
              printf "   Pwd can change   : %-47s %-11s\n",$value,$login;    
            }
	    if (/^Password must change/){
              printf "   Pwd must change  : %-47s %-11s\n",$value,$login;    
            }
	  }
#          system "pdbedit -v -u $login";
          print "\n";
      ($class,$gec_user,$login,$first_pass,$birth,$unid,$subclass,$status,$tol,$deact,$ex_admin,$acc_type)=("","","","","","","","","","","","");

       }
   }
close(PROTOKOLL);


# ToDo
# Combined searches
