#!/usr/bin/perl -w
# $Id$
# This script (sophomorix-virusscan) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@gmx.de



# todo:
# abs path in system call
# check for binary of clamav, exit if not there
# make sure sophomorix-check runs, when virusscan is runnung


# example script
#
# logging to /var/log/sophomorix/sophomorix-virusscan

##!/bin/sh
#
#/bin/mkdir -p /root/infected
#
#/bin/date > /var/log/virus.log
#
#/usr/bin/clamscan --infected --log=/var/log/virus.log -r --move=/root/infected /home
#
#/bin/date >> /var/log/virus.log
#
#/bin/cat /var/log/virus.log | /usr/bin/mail -s "Virusscan `/bin/date`" administrator@localhost
#

# optionen
# --max-time minutes
# Versuche die --max-time nicht zu überschreiten

# Szenario der Esklation
# Wenn Virus gefunden, dann
# A) 
#    1) Mail an user
#    2) Tauschverzeichnisse auf die er Zugriff hatte mitscannen
#    3) Mail????, was noch
# B) 
#    1) Scanergebnisse werden gesammelt (später in ldap db)
#       Datenfelder:   (jeder user eine) Datei mit 1 Scan pro Zeile
#                      User:Datum:Infected files
#    2) Punktesystem:
#       bei Anzahl Infected files gehts um Anzahl*10 hoch (max auf 30)
#       bei 0 infected files gehts um 1*y runter, minimal aber 0
#    3) Wer >5 hat, wird täglich wieder gescannt, bis auf 0
#       Wer <5,>0 hat, wird an geraden Tagen gescannt bis auf 0
# C) In einer Konfigurationsdatei wird eingetragen, wer regelmäßig 
#    gescannt werden soll
#    user::1,3,19,30
#    user::daily
#    user::weekly
#    -> user soll am 1., 3., 19.,30. eines Monats gescannt werden 
#       (höchste Priorität)


# neu
# allg. keinen 'scan_object' 2x am tag
# 1) top priority user scannen (configdatei, gestern virus)
# 2) user ((lehrer und schueler, gruppen)=scan_object, klassentausch geloescht) 
# aneinanderhaengen, alphab sortieren, bis zum letzten user gehen, 
# der gescannt wurde
# 3) alphabetisch scannen , wenn quota vermuten laesst das 
#    scan_max ueberschritten, dann beenden, 
#    (ohne quotaresult(gruppen) -> du -s /home/share/*/scan_object auf share, 
#           teachers extra)
#    und diesen user als naechster zu scannender user merken -> Datei
#     wenn letzter in liste, Datei loeschen (--> beginn bei a, 
#     beim naechten scriptaufruf)
# 4) --> 1)
#
#
# 
# 2 Logdateien
# Datei 1: logdatei von clamav
# 1 zeile wenn sophomorix-virusscan startet
# paar zeile davor: date: befehlaufruf
#    --> clamav schreibt summary
#
# Datei 2: hitlist update am ende, hits merken
#


# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
use DBI;
use Net::LDAP;

use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    check_connections
                                    fetchdata_from_account
                                    fetchusers_from_adminclass
                                   );


my @arguments = @ARGV;


# ===========================================================================
# Variablen
# ==========================================================================

my $help=0;
my $info=0;
my $skip_conf=0;
my $skip_scanning=0;
my $scan_object="";

# penalty_database
my $penalty_points=3;

# ???? after upgrade to lenny
#my $config=$DevelConf:: ... ";
my $penalty_db_dir="/var/lib/sophomorix/virusscan";
my $penalty_db=$penalty_db_dir."/penalty.db";;
system("mkdir -p $penalty_db_dir");
system("touch $penalty_db");
my %penalty=&read_penalty_db;


# abs path of scanned dirs/files
my %scanned_objects=();

my $logfile="/var/log/clamav/sophomorix-virusscan.log";
my $log_clam="/var/log/clamav/sophomorix-virusscan.clamav.log";
my $quarantine="/var/log/clamav/quarantine";
system("mkdir -p $quarantine");


# ???? after upgrade to lenny
#my $config=$DevelConf::$virusscan_conf."/sophomorix-virusscan.conf";
my $config_dir="/etc/sophomorix/virusscan";
my $config=$config_dir."/sophomorix-virusscan.conf";

if (not -e "$config"){
    my $template="/usr/share/sophomorix-virusscan/config/sophomorix-virusscan.conf";
    # ???? after upgrade to lenny
    #my $template=$DevelConf::virusscan_config_templete_pfad.
    #             "/sophomorix-virusscan.conf";
    #my $command_1="mkdir -p $DevelConf::$virusscan_conf";
    my $command_1="mkdir -p $config_dir";
    print "$command_1\n";
    system("$command_1");

    my $command_2="cp $template $config";
    print "$command_2\n";
    system("$command_2");
}


open(LOG, ">>$logfile");

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================




# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "skip-conf" => \$skip_conf,
           "skip-scanning" => \$skip_scanning,
           "test|scan-object=s" => \$scan_object,
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);
&check_connections();


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-virusscan scans  scan-objects (userhomes,shares,directories,files) for viruses

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info (unused)
  --test scan-object (Test performance of scan)
  --skip-conf (Do not scan scan-objects in sophomorix-virusscan.conf)
  --skip-scanning (Do not scan ANY scan-objects)


A scan-object can be:
  - a username                 --> scans $HOME of that user
  - a class,subclass,project   --> scans the share of class,subclass,project
  - an absolute path           --> scans the file/directory


Without any options, sophomorix-virusscan scans as configured.

Configuration files (in scan order):

1. /etc/sophomorix/virusscan/sophomorix-virusscan.conf
   Configure here which scan-object to scan on which days of the month.
   Use this for unreliable users, that must be scanned regularly.
2. NOT WORKING:
   sophomorix-virusscan scans a scan-object again if they had a virus 
3. NOT WORKING:
   Scans scan-objects in alphabetical order. 
   When option --max-time is given, it tries not to exceed this time. 

');

print "Quarantine:   $quarantine\n"; 
print "Logfile:      $logfile\n";
print "Clamav:       $log_clam\n";
print "Penalty DB:   $penalty_db\n";
   print('
Please see the sophomorix-virusscan(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --info
if ($info==1){
    print "No Option --info\n";
    exit;
}



#&log_script_start(@arguments);

# Start date in unix seconds
my $start_time=time;
my ($start_time_human)=&time;
my $day_of_month=`date +%d`;
chomp($day_of_month);

# --test|--scan-object
if ($scan_object ne ""){
    &scan_object($scan_object);
    &exit_script;
}

# use data from sophomorix-virusscan.conf
open(CONF, "<$config");
while(<CONF>){
    if (/^#/){
        next;
    }
    my ($object,$days) = split(/::/);
    my (@days) = split(/,/,$days);

    print "OBJECT: $object\n";
    foreach my $day (@days){
        if ($day==$day_of_month){
            print "Heute am ${day}. Tag des Monats  wird $object gescannt\n";
            if ($skip_conf==0){
                &scan_object($object);
	    } else {
                print "   * skipping $object (Option --skip-conf)\n";
            }
        } else {      
            print "  $object wird nicht am  ${day}. Tag des Monats gescannt\n";
        }
    }


}

close(CONF);




# open file

my @scan_object_list=&fetch_scan_objects();


# read data

# create list of todays users

# fuer jeden &scan_object aufrufen


&write_penalty_db;

&exit_script;





############################################################
# subs
############################################################


sub fetch_scan_objects {
    my @objects=();
    # teachers and students
    my @teachers=&fetchusers_from_adminclass(${DevelConf::teacher});
    my @students=&fetchstudents_from_school();
    @objects = (@teachers,@students);

    # shares
    my @dirlist=($DevelConf::share_classes,
                 $DevelConf::share_subclasses,
                 $DevelConf::share_projects);

    foreach my $share (@dirlist){
        opendir SHARE, $share or return;
        foreach my $object (readdir SHARE){
              if ($object eq "."){next};
              if ($object eq ".."){next};
              push @objects, $object;
        }
        closedir SHARE;
    }

    # sort
    @objects = sort @objects;

    # print
    #foreach my $object (@objects){
    #    print "$object\n";
    #}
    return @objects;
}



sub exit_script {
    # End of script
    print "Data logged into file $logfile\n";
    print "Data logged into file $log_clam\n";
    close(LOG);
    exit;
}



sub scan_object {
    my ($scan_object) = @_;
    my ($scan_dir) = &fetchdata_from_account($scan_object);
    if ($scan_dir eq ""){
        # its not a users home
        if (-e "$DevelConf::share_classes/$scan_object"){
            print "It is a class\n";
            $scan_dir="$DevelConf::share_classes/$scan_object";
	} elsif (-d "$DevelConf::share_subclasses/$scan_object"){
            print "It is a subclass\n";
            $scan_dir="$DevelConf::share_subclasses/$scan_object";
	} elsif (-d "$DevelConf::share_projects/$scan_object"){
            print "It is a project\n";
            $scan_dir="$DevelConf::share_projects/$scan_object";
	} elsif (-d "$DevelConf::share_projects/p_$scan_object"){
            print "It is a project\n";
            $scan_dir="$DevelConf::share_projects/p_$scan_object";
	} elsif (-d "$DevelConf::share_share/$scan_object"){
            print "It is the school share/parent share\n";
            $scan_dir="$DevelConf::share_share/$scan_object";
	} elsif (-d "$scan_object"){
            print "It is an absolute path to a directory\n";
            $scan_dir="$scan_object";
	} elsif (-f "$scan_object"){
            print "It is an absolute path to a file\n";
            $scan_dir="$scan_object";
	} else {
            $scan_dir="$scan_object";
        }
    } 

    if ($skip_scanning==1){
        print "   * skipping $scan_object ($scan_dir)\n";
        return 2;
    }

    print LOG "\n\n##############################",
              "##################################\n";
    printf LOG "####### %-26s: %20s #######\n",
               $scan_object,
               $start_time_human;
    printf LOG "####### %-48s #######\n",$scan_dir;
    #print LOG "   * start time is $start_time\n";

    my $result="";
    my $infected=-1;
    my $performance="";

    if  (-e $scan_dir){
        # check against double scanning
        if (exists $scanned_objects{$scan_dir}){
            # no scanning
            $result="\nERROR: $scan_dir was scanned already, skipping\n\n";
            $infected=-2;
            $performance="";
            print LOG "$result\n";
            printf LOG "####### %-28s: %8s kB/second #######\n",
                       $scan_object,$performance;
            printf LOG "####### %-28s: %8s viruses   #######\n",
                       $scan_object,$infected;
            print "* $scan_object scanned already\n";
            return 0;
        }

        # scanning
        # clamav geht keinen links nach
        # amount of data to scan
        my $data_kb=`du -s $scan_dir`;
        # kB or kiB???????
        ($data_kb)=split(/\s+/,$data_kb);
        # calculation MB for printout
        my $data_mb=$data_kb/1024;
        $data_mb=int($data_mb);
        printf LOG "####### Predicted size of Scan Object: %14s MB #######\n",
                    $data_mb;

        $result=`clamscan  -r -i -l $log_clam --move=$quarantine $scan_dir`;
        #my $command="clamscan -v -r -i -l $log_clam --move=$quarantine ".
        #            "$scan_dir >> $logfile 2>&1";
        # analize result
        ($infected) = &get_infected($result);
        my $now=time;
        my $scan_time=$now-$start_time;
        if ($scan_time==0){
            $scan_time=1;
        }
        $performance=$data_kb/$scan_time;
        $performance=int($performance);
        
        # remember scanned dir/file
        $scanned_objects{$scan_dir}="scanned";

    } else {
        # no scanning
        $result="\nERROR: $scan_dir is nonexistent\n\n";
    }

    # update penalty database
    if ($infected > 0){
        my $old=0;
        if (exists $penalty{$scan_dir} ){
            $old=$penalty{$scan_dir};
        }
        my $new = $old + $penalty_points;
        $penalty{$scan_dir}="$new";
    } elsif ($infected == 0){
        if (exists $penalty{$scan_dir} ){
            my $old=$penalty{$scan_dir};
            my $new = $old - 1;
            $penalty{$scan_dir}="$new";
        }
    }

    print LOG "$result\n";
    printf LOG "####### %-28s: %8s kB/second #######\n",
               $scan_object,$performance;
    printf LOG "####### %-28s: %8s viruses   #######\n",
               $scan_object,$infected;
    return 1;
}


sub time {
    my $date = `date +%Y-%m-%d_%H-%M-%S`;
    chomp($date);
    my ($year,$month,$day,$hour,$minute,$second)=split(/[-_:]/,$date);
    my $human=$year."-".$month."-".$day." at ".$hour.":".$minute;
    return ($human,$year,$month,$day,$hour,$minute,$second);
}


sub get_infected {
    my ($result) = @_;
    my $text;
    my $infected="";
    my @lines = split(/\n/,$result);
    foreach my $line (@lines){
        if ($line=~m/Infected files:/){
            ($text,$infected) = split(/:/, $line);
            $infected=~s/ //g;
            #print "Infect: ---$infected---\n";
        }
        #print LOG "HE: $line\n";
    }
    if ($infected eq ""){
        print "\nERROR: Could not retrieve number of infected files\n\n";
    }
    return $infected;
}



sub read_penalty_db {
    my %penalty=();
    my $penalty=0;
    open(PENALTY, "<$penalty_db");
    while(<PENALTY>){
        # skip comments
        if (/^#/){
            next;
        }
        my ($object,$penalty) = split(/::/);
        $penalty{$object}="$penalty";
    }
    close(PENALTY);
    return %penalty;
}




sub write_penalty_db {
    # write all penalties >0
    open(PENALTY, ">$penalty_db");
    print PENALTY "# penalty\n";
    while (my ($scan_object,$penalty) = each %penalty){
        my $line = $scan_object."::".$penalty."::\n";
        if ($penalty > 0){
            print PENALTY $line;
        }
    }
    close(PENALTY);
}
