#!/usr/bin/perl -w
# $Id$
# This script (sophomorix-virusscan) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@gmx.de



# todo:
# abs path in system call
# check for binary of clamav, exit if not there
# make sure sophomorix-check runs, when virusscan is runnung


# example script
#
# logging to /var/log/sophomorix/sophomorix-virusscan

##!/bin/sh
#
#/bin/mkdir -p /root/infected
#
#/bin/date > /var/log/virus.log
#
#/usr/bin/clamscan --infected --log=/var/log/virus.log -r --move=/root/infected /home
#
#/bin/date >> /var/log/virus.log
#
#/bin/cat /var/log/virus.log | /usr/bin/mail -s "Virusscan `/bin/date`" administrator@localhost
#

# optionen
# --max-time minutes
# Versuche die --max-time nicht zu überschreiten
# gehe durch lehrer und schüler gleich schnell durch
# --teachers
# --students
# --shares Mon,Tue (Scanne shares am Montag/Dienstag)
# 1) lehrer und schueler alphabetisch mischen
# 2) schauen, wie weit im alphabet gescannt werden kann
# 3) scannen
# 4) wenn noch Zeit, schüler (kleinere homes) scannen
#    so bleiben (große) Lehrerhomes liegen
# 5) wenn lehrer home zu groß für 1 Tag, dann Samstags/Sonntags 
#    scannen, Mail an root 
# option --test username:
# scanne das userhome und merke die performance MB/min 
# werden verlinkte tauschs auch gescannt? besser nicht

# Szenario der Esklation
# Wenn Virus gefunden, dann
# A) 
#    1) Mail an user
#    2) Tauschverzeichnisse auf die er Zugriff hatte mitscannen
#    3) Mail????, was noch
# B) 
#    1) Scanergebnisse werden gesammelt (später in ldap db)
#       Datenfelder:   (jeder user eine) Datei mit 1 Scan pro Zeile
#                      User:Datum:Infected files
#    2) Punktesystem:
#       bei Anzahl Infected files gehts um Anzahl*10 hoch (max auf 30)
#       bei 0 infected files gehts um 1*y runter, minimal aber 0
#    3) Wer >5 hat, wird täglich wieder gescannt, bis auf 0
#       Wer <5,>0 hat, wird an geraden Tagen gescannt bis auf 0
# C) In einer Konfigurationsdatei wird eingetragen, wer regelmäßig 
#    gescannt werden soll
#    user::1,3,19,30
#    user::daily
#    user::weekly
#    -> user soll am 1., 3., 19.,30. eines Monats gescannt werden 
#       (höchste Priorität)


# neu
# allg. keinen 'scan_object' 2x am tag
# 1) top priority user scannen (configdatei, gestern virus)
# 2) user ((lehrer und schueler, gruppen)=scan_object, klassentausch geloescht) 
# aneinanderhaengen, alphab sortieren, bis zum letzten user gehen, 
# der gescannt wurde
# 3) alphabetisch scannen , wenn quota vermuten laesst das 
#    scan_max ueberschritten, dann beenden, 
#    (ohne quotaresult(gruppen) -> du -s /home/share/*/scan_object auf share, 
#           teachers extra)
#    und diesen user als naechster zu scannender user merken -> Datei
#     wenn letzter in liste, Datei loeschen (--> beginn bei a, 
#     beim naechten scriptaufruf)
# 4) --> 1)
#
#
# 
# 2 Logdateien
# Datei 1: logdatei von clamav
# 1 zeile wenn sophomorix-virusscan startet
# paar zeile davor: date: befehlaufruf
#    --> clamav schreibt summary
#
# Datei 2: hitlist update am ende, hits merken
#


# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
use DBI;
use Net::LDAP;

use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    check_connections
                                    fetchdata_from_account
                                   );


my @arguments = @ARGV;


# ===========================================================================
# Variablen
# ==========================================================================

my $help=0;
my $info=0;
my $scan_object="";



my $logfile="/var/log/clamav/sophomorix-virusscan.log";
my $log_clam="/var/log/clamav/sophomorix-virusscan.clamav.log";
my $quarantine="/var/log/clamav/quarantine";
system("mkdir -p $quarantine");


# ???? after upgrade to lenny
#my $config=$DevelConf::$virusscan_conf."/sophomorix-virusscan.conf";
my $config_dir="/etc/sophomorix/virusscan";
my $config=$config_dir."/sophomorix-virusscan.conf";

if (not -e "$config"){
    my $template="/usr/share/sophomorix-virusscan/config/sophomorix-virusscan.conf";
    # ???? after upgrade to lenny
    #my $template=$DevelConf::virusscan_config_templete_pfad.
    #             "/sophomorix-virusscan.conf";
    #my $command_1="mkdir -p $DevelConf::$virusscan_conf";
    my $command_1="mkdir -p $config_dir";
    print "$command_1\n";
    system("$command_1");

    my $command_2="cp $template $config";
    print "$command_2\n";
    system("$command_2");
}


open(LOG, ">>$logfile");

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================




# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "test|scan-object=s" => \$scan_object,
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);
&check_connections();


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-virusscan scans userhomes for viruses

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info (unused)
  --test login (Test performance of scan)

');

print "Quarantine:  $quarantine\n"; 
print "Logfile:     $logfile\n";
print "Clamav:       $log_clam\n";

   print('
Please see the sophomorix-virusscan(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --info
if ($info==1){
    print "No Option --info\n";
    exit;
}



#&log_script_start(@arguments);

# Start date in unix seconds
my $start_time=time;
my ($start_time_human)=&time;




if ($scan_object ne ""){
    my ($scan_dir) = &fetchdata_from_account($scan_object);
    if ($scan_dir eq ""){
        # its not a users home
        #$scan_dir="$DevelConf::share_classes/$scan_object";
        if (-e "$DevelConf::share_classes/$scan_object"){
            print "Its a class\n";
            $scan_dir="$DevelConf::share_classes/$scan_object";
	} elsif (-d "$DevelConf::share_subclasses/$scan_object"){
            print "Its a subclass\n";
            $scan_dir="$DevelConf::share_subclasses/$scan_object";
	} elsif (-d "$DevelConf::share_projects/$scan_object"){
            print "Its a project\n";
            $scan_dir="$DevelConf::share_projects/$scan_object";
	} elsif (-d "$DevelConf::share_projects/p_$scan_object"){
            print "Its a project\n";
            $scan_dir="$DevelConf::share_projects/p_$scan_object";
	} elsif (-d "$DevelConf::share_share/$scan_object"){
            print "Its the school share/parent share\n";
            $scan_dir="$DevelConf::share_share/$scan_object";
	} elsif (-d "$scan_object"){
            print "Its an absolute path to a directory\n";
            $scan_dir="$scan_object";
	} elsif (-f "$scan_object"){
            print "Its an absolute path to a file\n";
            $scan_dir="$scan_object";
	} else {
            $scan_dir="$scan_object";
        }
    } 

    print LOG "\n\n##############################",
              "##################################\n";
    printf LOG "####### %-26s: %20s #######\n",
               $scan_object,
               $start_time_human;
    printf LOG "####### %-48s #######\n",$scan_dir;
    #print LOG "   * start time is $start_time\n";

    my $result="";
    my $infected=-1;
    my $performance="";

    if  (-e $scan_dir){
        # scanning
        # clamav geht keinen links nach
        # amount of data to scan
        my $data_kb=`du -s $scan_dir`;
        # kB or kiB???????
        ($data_kb)=split(/\s+/,$data_kb);
        # calculation MB for printout
        my $data_mb=$data_kb/1024;
        $data_mb=int($data_mb);
        printf LOG "####### Predicted size of Scan Object: %24s MB #######\n",
                    $data_mb;

        $result=`clamscan  -r -i -l $log_clam --move=$quarantine $scan_dir`;
        #my $command="clamscan -v -r -i -l $log_clam --move=$quarantine ".
        #            "$scan_dir >> $logfile 2>&1";
        # analize result
        ($infected) = &get_infected($result);
        my $now=time;
        my $scan_time=$now-$start_time;
        if ($scan_time==0){
            $scan_time=1;
        }
        $performance=$data_kb/$scan_time;
        $performance=int($performance);


    } else {
        # no scanning
        $result="\nERROR: $scan_dir is nonexistent\n\n";
    }

    print LOG "$result\n";
    printf LOG "####### %-28s: %8s kB/second #######\n",
               $scan_object,$performance;
    printf LOG "####### %-28s: %8s viruses   #######\n",
               $scan_object,$infected;
    exit;
}


# End of script
print "Data logged into file $logfile\n";
print "Data logged into file $log_clam\n";

close(LOG);

exit;
#&log_script_end(@arguments);




############################################################
# subs
############################################################


sub time {
    my $date = `date +%Y-%m-%d_%H-%M-%S`;
    chomp($date);
    my ($year,$month,$day,$hour,$minute,$second)=split(/[-_:]/,$date);
    my $human=$year."-".$month."-".$day." at ".$hour.":".$minute;
    return ($human,$year,$month,$day,$hour,$minute,$second);
}


sub get_infected {
    my ($result) = @_;
    my $text;
    my $infected="";
    my @lines = split(/\n/,$result);
    foreach my $line (@lines){
        if ($line=~m/Infected files:/){
            ($text,$infected) = split(/:/, $line);
            $infected=~s/ //g;
            #print "Infect: ---$infected---\n";
        }
        #print LOG "HE: $line\n";
    }
    if ($infected eq ""){
        print "\nERROR: Could not retrieve number of infected files\n\n";
    }
    return $infected;
}
