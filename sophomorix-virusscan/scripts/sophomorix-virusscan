#!/usr/bin/perl -w
# $Id$
# This script (sophomorix-virusscan) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@gmx.de



# example script
#
# logging to /var/log/sophomorix/sophomorix-virusscan

##!/bin/sh
#
#/bin/mkdir -p /root/infected
#
#/bin/date > /var/log/virus.log
#
#/usr/bin/clamscan --infected --log=/var/log/virus.log -r --move=/root/infected /home
#
#/bin/date >> /var/log/virus.log
#
#/bin/cat /var/log/virus.log | /usr/bin/mail -s "Virusscan `/bin/date`" administrator@localhost
#

# optionen
# --max-time minutes
# Versuche die --max-time nicht zu überschreiten
# gehe durch lehrer und schüler gleich schnell durch
# --teachers
# --students
# --shares Mon,Tue (Scanne shares am Montag/Dienstag)
# 1) lehrer und schueler alphabetisch mischen
# 2) schauen, wie weit im alphabet gescannt werden kann
# 3) scannen
# 4) wenn noch Zeit, schüler (kleinere homes) scannen
#    so bleiben (große) Lehrerhomes liegen
# 5) wenn lehrer home zu groß für 1 Tag, dann Samstags/Sonntags 
#    scannen, Mail an root 
# option --test username:
# scanne das userhome und merke die performance MB/min 
# werden verlinkte tauschs auch gescannt? besser nicht

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
use DBI;
use Net::LDAP;

use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    check_connections
                                    fetchdata_from_account
                                   );


my @arguments = @ARGV;


# ===========================================================================
# Variablen
# ==========================================================================

my $help=0;
my $info=0;
my $test="";

my $logfile="/var/log/clamav/sophomorix-virusscan.log";
my $logfile_stout="/var/log/clamav/sophomorix-virusscan.stout.log";
my $quarantine="/var/log/clamav/quarantine";
system("mkdir -p $quarantine");


open(STOUT, ">>$logfile_stout");

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================




# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "test=s" => \$test,
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);
&check_connections();


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-virusscan scans userhomes for viruses

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info (unused)
  --test (Test performance of scan)

Please see the sophomorix-virusscan(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --info
if ($info==1){
    print "No Option --info\n";
    exit;
}



#&log_script_start(@arguments);

# Start date in unix seconds
my $start_time=time;




if ($test ne ""){
    print STOUT "############################################################\n";
    print STOUT "\nRunning performance test on user $test ...\n";
    print STOUT "   * start time is $start_time\n";

    my ($home) = &fetchdata_from_account($test);

    # amount of data to scan
    my $data_kb=`du -s $home`;
    # kB or kiB???????
    ($data_kb)=split(/\s+/,$data_kb);

    # scanning
    # add clamscan command here ??????

    # getestet:
    # clamav geht keinen links nach
    my $command="clamscan -v -r -i -l $logfile --move=$quarantine ".
                "$home >> $logfile_stout 2>&1";
    print STOUT "$command\n\n";
    # Do it!
    system($command);

    my $now=time;
    my $scan_time=$now-$start_time;
    if ($scan_time==0){
        $scan_time=1;
    }
    my $performance=$data_kb/$scan_time;
    $performance=int($performance);
    print STOUT "\nEnd time is $now\n";
    print STOUT  "Performance results for user $test:\n";
    printf STOUT "   Scanning time: %15s seconds\n", $scan_time;
    printf STOUT "   Scanned data : %15s kB\n", $data_kb;
    printf STOUT "   Performance  : %15s kB/second\n", $performance;
    print "Data logged into file $logfile_stout\n";
    exit;
}

# Do it !


close(STOUT);

exit;
#&log_script_end(@arguments);
