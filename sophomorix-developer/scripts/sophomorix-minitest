#!/usr/bin/perl -w
# This script (sophomorix-minitest) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@gmx.de

# Dieses Script ist NICHT im Paket sophomorix-developer enthalten



# Bibliotheken
use strict;
use Getopt::Long;
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
use Sophomorix::SophomorixPgLdap;
use Sophomorix::SophomorixTest;
use Test::More "no_plan";
Getopt::Long::Configure ("bundling");

use DBI;
use Crypt::SmbHash;
use Net::LDAP;
use IMAP::Admin;

&db_connect();




#&unlink_immutable_tree("/home/test",0);



############################################################
# The following modifies an entry in ldap
############################################################

# my $user="beckje";
# my $new_basedn="dc=example,dc=org";

my $ldap=&auth_connect();

my $login="hannes";



# fetch data of $login from potgresql
# if user exists in potgres:
#    - create ldap account (if ldap account exists) OR 
#    - update ldap account (if ldap account does not exist)

&update_auth_ldap($ldap,$login);

# deleting the user $login
# make better
# find out if it is in accounts or machines
#&delete_auth_ldap($ldap,$login,"accounts");


&auth_disconnect($ldap);


############################################################
# sub
############################################################


sub update_auth_ldap {
    my ($ldap,$login) = @_;
    my ($home,
        $type,
        $gecos,
        $group,
        $uidnumber,
        $sambahomepath,
        $firstpassword,
        $sambaacctflags,
        $exitadminclass,
        $sambahomedrive,
        $sambakickofftime,
        $sambalmpassword,
        $sambalogofftime,
        $sambalogontime,
        $sambantpassword,
        $sambaprimarygroupsid,
        $sambapwdcanchange,
        $sambapwdlastset,
        $sambapwdmustchange,
        $sambasid,
        $surname,
        $userpassword,
        $loginshell,
        $gidnumber) = &fetchdata_from_account($login);

    # return on error 
    if ($home eq ""){
        print "User $login does not exist in postgresql.\n";
        print "   * Cannot create/replace ldap account.\n";
        return 0;
    }

    # map to names used by ldap
    my $uid=$login;
    my $sn=$surname;
    my $givenname=$surname;
    my @objectclass=("inetOrgPerson","posixAccount","shadowAccount",
                     "top","sambaSamAccount");
    my $homedirectory=$home;
    my $displayname=$gecos;
    my $description=$gecos;
    my $cn=$gecos;

    my $ou="accounts";
    if ($gecos eq "Computer"){
        $ou="machines";
    }

    # performance: following line must be used once:
    # but is not a Problem
    my ($ldappw,$ldap_rootdn,$dbpw,$suffix)=&fetch_ldap_pg_passwords();
    my $dn="uid=".$uid.",ou=".$ou.",".$suffix;
    my @dn=split(",",$dn);

    # search existing account
    my $mesg_1 = $ldap->search( base => "$dn", attrs => '*', filter => 'cn=*');

    # decide what to do
    if ($mesg_1->count() ==0){
        print "Adding ldap entry dn: $dn\n";
        my $mesg_2 = $ldap->add( $dn,
           attrs => [
             cn                   => $cn, 
             description          => $description, 
             displayName          => $displayname, 
             # kann nicht aktualisiert werden
             #         dn                   => \@dn, 
             gecos                => $gecos, 
             gidNumber            => $gidnumber, 
             givenName            => $givenname, 
             homeDirectory        => $homedirectory, 
             loginShell           => $loginshell, 
             objectClass          => \@objectclass,
             sambaAcctFlags       => $sambaacctflags, 
             sambaHomeDrive       => $sambahomedrive, 
             sambaHomePath        => $sambahomepath, 
             sambaKickoffTime     => $sambakickofftime, 
             sambaLMPassword      => $sambalmpassword, 
             sambaLogoffTime      => $sambalogofftime, 
             sambaLogonTime       => $sambalogontime, 
             sambaNTPassword      => $sambantpassword, 
             sambaPrimaryGroupSID => $sambaprimarygroupsid, 
             sambaPwdCanChange    => $sambapwdcanchange, 
             sambaPwdLastSet      => $sambapwdlastset, 
             sambaPwdMustChange   => $sambapwdmustchange, 
             sambaSID             => $sambasid, 
             sn                   => $sn, 
             uid                  => $uid, 
             uidNumber            => $uidnumber, 
             userPassword         => $userpassword, 
           ]
        );
        # print errors
        $mesg_2->code && die $mesg_2->error;
    } else {
        print "Replacing ldap dn: $dn\n";
        my $mesg_2 = $ldap->modify( $dn,
           replace => {
             cn                   => $cn, 
             description          => $description, 
             displayName          => $displayname, 
             # kann nicht aktualisiert werden
             #         dn                   => \@dn, 
             gecos                => $gecos, 
             gidNumber            => $gidnumber, 
             givenName            => $givenname, 
             homeDirectory        => $homedirectory, 
             loginShell           => $loginshell, 
             objectClass          => \@objectclass,
             sambaAcctFlags       => $sambaacctflags, 
             sambaHomeDrive       => $sambahomedrive, 
             sambaHomePath        => $sambahomepath, 
             sambaKickoffTime     => $sambakickofftime, 
             sambaLMPassword      => $sambalmpassword, 
             sambaLogoffTime      => $sambalogofftime, 
             sambaLogonTime       => $sambalogontime, 
             sambaNTPassword      => $sambantpassword, 
             sambaPrimaryGroupSID => $sambaprimarygroupsid, 
             sambaPwdCanChange    => $sambapwdcanchange, 
             sambaPwdLastSet      => $sambapwdlastset, 
             sambaPwdMustChange   => $sambapwdmustchange, 
             sambaSID             => $sambasid, 
             sn                   => $sn, 
             uid                  => $uid, 
             uidNumber            => $uidnumber, 
             userPassword         => $userpassword, 
           }
        );
        # print errors
        $mesg_2->code && die $mesg_2->error;
    }
}





sub delete_auth_ldap {
    my ($ldap,$login,$ou) = @_;
    my ($ldappw,$ldap_rootdn,$dbpw,$suffix)=&fetch_ldap_pg_passwords();
    my $dn="uid=".$login.",ou=".$ou.",".$suffix;
    print "Deleting ldap dn: $dn\n";
    my $mesg = $ldap->delete( $dn); 
    $mesg->code && die $mesg->error;
}
