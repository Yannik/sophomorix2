#!/usr/bin/perl -w
# Dieses Script (sophomorix-test) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken

use strict;
use Getopt::Long;
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixPgLdap;
use Sophomorix::SophomorixTest;
use Test::More "no_plan";
Getopt::Long::Configure ("bundling");

use DBI;

# Einlesen der Konfigurationsdatei für Entwickler
#{ package DevelConf ; do "/etc/sophomorix/devel/user/sophomorix-devel.conf"}


system("install -d /root/sophomorix-test");


my $file="";
my @teacher_files=();
my @userlist_to_check=();

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
my $add=0;
my $remove=0;
my $work=0;

# Parsen der Optionen
my $testopt=GetOptions(
                "add" => \$add,
                "work" => \$work,
    "remove|delete" => \$remove,
          );


# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);


############################################################
# Start
############################################################

# ACHTUNG:
#  -  Keine Sonderzeichen
#  -  Korrektes Datumsformat

# the schueler
my @userlist=(
  "12C;Thurau;Dietrich;12.10.1982;",
  "12C;Altig;Rudi;12.10.1981;",
  "12C;Bartali;Gino;14.12.1972;",
  "12C;Coppi;Fausto;12.01.1972;",
  "12C;Merckx;Eddy;12.01.1972;",
  "12C;Raas;Jan;12.01.1972;",
  "12C;DeVlaminck;Roger;12.01.1972;",
  "12C;Hinault;Bernard;12.01.1972;",
  "12C;Kuebler;Ferdi;12.01.1972;",
  "11A;Gillan;Ian;12.01.1972;",
  "11A;Blackmore;Ritchie;12.01.1978;",
  "11A;Glover;Roger;14.01.1972;",
  "11A;Lord;Jon;12.02.1972;",
  "11A;Paice;Ian;12.04.1974;",
  "11A;Plant;Robert;12.05.1974;",
  "11A;Page;Jimmy;12.08.1974;",
  "11A;Jones;JohnPaul;12.04.1976;",
  "11A;Bonham;John;02.04.1974;",
);

# the lehrer
my @teacherlist=(
  "lehrer;Galilei;Galileo;12.10.1982;galli;",
  "lehrer;Bruno;Giordano;12.10.1981;bruno;",
  "lehrer;Kepler;Johannes;12.10.1970;hannes;",
  "lehrer;Kopernikus;Nikolaus;12.10.1976;niko;",
  "lehrer;Brahe;Tycho;12.10.1986;tycho;",
);

# the loginnames of the lehrer
my @loginlist=("tycho", "hannes", "bruno", "galli", "niko" );


#my $user="";
my $teacher="";
my $login="";
my $today=`date +%d.%m.%Y`;
print "\nToday is $today";
chomp($today);
my $verbose=0;




###########################################################################
# Do I have to add some users?

if ($add==1 and not -e "/root/sophomorix-test/bunchofusers"){
    print '
###########################################################################
#                                                                         #
#                    ANLEGEN EINIGER SCHÜLER, LEHRER                      #
#                                                                         #
###########################################################################
    ';
    foreach my $user (@userlist){
       #my ($txt,$proto)=split(/==/, $user);
       &append_line("$user","${DevelConf::users_pfad}/schueler.txt");
    }

    print "Adding students ...\n";
    &run_command("sophomorix-check",$verbose);
    &run_command("sophomorix-add",$verbose);
    # 2x add bug in db ????????
    &run_command("sophomorix-add",$verbose);


    foreach my $teacher (@teacherlist){
       #my ($txt,$proto)=split(/==/, $teacher);
       &append_line("$teacher","${DevelConf::users_pfad}/lehrer.txt");
    }

    print "Adding teachers ...\n";
    &run_command("sophomorix-check",$verbose);
    &run_command("sophomorix-add",$verbose);


    foreach my $user (@userlist){
       my $login=&get_login_from_user($user);    
       # todo ??????
       #&check_account($login,"enabled");
    }


    foreach my $teacher (@teacherlist){
       my $login=&get_login_from_user($teacher);    
       # todo ??????
       #&check_account($login,"enabled");
    }


    # creating some projects
    system("sophomorix-project --create -p astro --Longname Astronomie --Admins tycho,niko --Members altigru,thuraudi,blackmri,pageji");
    system("sophomorix-project --create -p chemie --Longname Chemie-AG --Admins bruno,tycho --Members altigru,thuraudi,hannes,lordjo,gillania");
    system("sophomorix-project --create -p micro --Longname Mikroskopie --Admins hannes --Members altigru,thuraudi,hinaulbe,raasja");


    # Marking the added users
    system("touch /root/sophomorix-test/bunchofusers");
} elsif ($add==1 and -e "/root/sophomorix-test/bunchofusers"){
    print "The users are added already!\n";
} else {
    print "Not adding users!\n";
}









if ($work==1 and -e "/root/sophomorix-test/bunchofusers"){
    print '
###########################################################################
#                                                                         #
#             DO SOME WORK (Vorlagen bereitstellen)                       #
#                                                                         #
###########################################################################
    ';

   # DISTRIBUTE (Vorlagen)
   my $vorlagen_teacher="galli";
   my $vorlagen_gruppe="11a";
   my $type="class";

   # Working with these files
   @teacher_files=("testfile_1.txt","testfile_2.txt");
   @userlist_to_check=("blackmri",
                       "bonhamjo",
                       "gillania",
                       "gloverro",
                       "jonesjo",
                       "lordjo",
                       "pageji",
                       "paiceia",
                       "plantro");

   &vorlagen_bereitstellen($vorlagen_teacher,
                           $vorlagen_gruppe,
                           $type);


    print '
###########################################################################
#                                                                         #
#             DO SOME WORK (Dateien einsammeln)                           #
#                                                                         #
###########################################################################
';

   # COLLECT move (Vorlagen)
   my $einsammeln_teacher="niko";
   my $einsammeln_gruppe="12c";
   my $einsammeln_type="class";
   my $einsammeln_option="collect";

   # Working with these files
   @teacher_files=("testfile_1.txt","testfile_2.txt");
   @userlist_to_check=("altigru",
                       "bartalgi",
                       "coppifa",
                       "devlamro",
                       "hinaulbe",
                       "kueblefe",
                       "merckxed",
                       "raasja",
                       "thuraudi");

   &dateien_einsammeln($einsammeln_teacher,
                       $einsammeln_gruppe,
                       $einsammeln_type,
                       $einsammeln_option);

   # COLLECT copy (Vorlagen)
   $einsammeln_teacher="galli";
   $einsammeln_gruppe="11a";
   $einsammeln_type="class";
   $einsammeln_option="collectcopy";

   # Working with these files
   @teacher_files=("testfile_1.txt","testfile_2.txt");
   @userlist_to_check=("blackmri",
                       "bonhamjo",
                       "gillania",
                       "gloverro",
                       "jonesjo",
                       "lordjo",
                       "pageji",
                       "paiceia",
                       "plantro");


   &dateien_einsammeln($einsammeln_teacher,
                       $einsammeln_gruppe,
                       $einsammeln_type,
                       $einsammeln_option);




   # COLLECT copy (Vorlagen) an project
   $einsammeln_teacher="niko";
   $einsammeln_gruppe="astro";
   $einsammeln_type="project";
   $einsammeln_option="collectcopy";

   # Working with these files
   @teacher_files=("testfile_1.txt","testfile_2.txt");
   @userlist_to_check=("altigru",
                       "blackmri",
                       "pageji",
                       "thuraudi");


   &dateien_einsammeln($einsammeln_teacher,
                       $einsammeln_gruppe,
                       $einsammeln_type,
                       $einsammeln_option);

} elsif ($work==1 and not -e "/root/sophomorix-test/bunchofusers"){
    print "The users must be added bofore doing some work!\n";
} else {
    print "Not adding users!\n";
}











###########################################################################
# Do I have to remove some users?


if ($remove==1 and -e "/root/sophomorix-test/bunchofusers"){
    print '
###########################################################################
#                                                                         #
#                ENTFERNEN ANGELEGTER SCHÜLER, LEHRER                     #
#                                                                         #
###########################################################################
';
    # removing projects
    system("sophomorix-project --kill -p astro");
    system("sophomorix-project --kill -p chemie");
    system("sophomorix-project --kill -p micro");



    # removing users
    foreach my $user (@userlist){
        &remove_line(
                "$user",
                "${DevelConf::users_pfad}/schueler.txt");
    }


    foreach my $teacher (@loginlist){
        &remove_line(
                ";$teacher",
                "${DevelConf::users_pfad}/lehrer.txt");
    }


    &run_command("sophomorix-check",$verbose);

    foreach my $user (@userlist){
        my $login=&get_login_from_user($user);    
        &update_user_db_entry($login,"TolerationDate=01.01.1970");
    }

    foreach my $teacher (@teacherlist){
        my $login=&get_login_from_user($teacher);    
        &update_user_db_entry($login,"TolerationDate=01.01.1970");
    }

    &run_command("sophomorix-check",$verbose);
    &run_command("sophomorix-move",$verbose);


    foreach my $user (@userlist){
        my $login=&get_login_from_user($user);    
        &update_user_db_entry($login,"DeactivationDate=01.01.1971");
    }

    foreach my $teacher (@teacherlist){
        my $login=&get_login_from_user($teacher);    
        &update_user_db_entry($login,"DeactivationDate=01.01.1971");
    }

    &run_command("sophomorix-check",$verbose);
# todo ?????
    &run_command("sophomorix-kill",$verbose);

    system("rm /root/sophomorix-test/bunchofusers");
} elsif($remove==1 and not -e "/root/sophomorix-test/bunchofusers") {
    print "The users are removed already!\n";

} else {
    print "Not removing users!\n";
}






############################################################
# SUB
############################################################
sub dateien_einsammeln{
    my ($teacher,$group,$type,$option) = @_;
    my $command="";
    print "Cleaning up $teacher \n";
    $command="rm -rf /home/teachers/${teacher}/${Language::collect_dir}/${group}/*"; 
    print "$command \n";
    system($command);

    foreach my $user (@userlist_to_check){
       print "Cleaning up $user \n";
       $command="rm -rf /home/students/${group}/${user}/${Language::collect_dir}/*"; 
       print "$command \n";
       system($command);
    }

    foreach my $testfile (@teacher_files){
       foreach my $user (@userlist_to_check){
          $command="su --command='cp /usr/share/sophomorix-developer/testfiles/${testfile} /home/students/${group}/${user}/${Language::collect_dir}'";
          print "$command \n";
          system($command);
       }
    }

    # collect files(?????? later do this as galli)
    $command="sophomorix-teacher --teacher $teacher --collect --${type} $group";

    print "$command \n";
    system($command);

    my $collect_dir="";
    my $collect_parent_dir=
        "/home/teachers/${teacher}/${Language::collect_dir}/${group}";
    print "$collect_parent_dir \n";
    opendir(COLL, $collect_parent_dir) 
         || die "can't opendir ",
                "$/home/teachers/${teacher}/${Language::collect_dir}/${group} $!";
    while (defined(my $filename = readdir(COLL))) {
        #print "Directory $filename found\n";
        if ($filename=~m/^${group}.*$/){
          $collect_dir=$filename
	  }
    }
    closedir(COLL);
    
    print "Looking for collected data in $collect_dir \n";

    foreach my $user (@userlist_to_check){
        foreach my $testfile (@teacher_files){
           $file="/home/teachers/${teacher}/${Language::collect_dir}/${group}/${collect_dir}/${user}/${testfile}"; 
           &check_existence($file);
           $file="/home/students/${group}/${user}/${Language::collect_dir}/${testfile}"; 

           if ($option eq "collect"){
               # data must be moved away
               &check_nonexistence($file);
           } elsif ($option eq "collectcopy"){
               # data must be there
               &check_nonexistence($file);
           } else {
	       print "Bad option $option";
               exit;
           }
	}
    }
}


sub vorlagen_bereitstellen{
    my ($teacher,$group,$type) = @_;
    print "Cleaning up $teacher \n";
    my $command="";
    my $file="";

    # what if type $project?
    $command="sophomorix-teacher --teacher $teacher --remove $group";
    print "$command \n";
    system($command);

    $command="rm -rf /home/teachers/${teacher}/${Language::task_dir}/${group}"; 
    print "$command \n";
    system($command);

    # join the class 11a (?????? later do this as galli)
    if ($type eq "class"){
       $command="sophomorix-teacher --teacher $teacher --add $group";
    }
    print "$command \n";
    system($command);
    # was directory created ?
    $file="/home/teachers/${teacher}/${Language::task_dir}/${group}"; 
    ok(-e $file, "$file existiert");


    foreach my $testfile (@teacher_files){
        $command="su --command='cp /usr/share/sophomorix-developer/testfiles/${testfile} /home/teachers/${teacher}/${Language::task_dir}/${group}'";
        print "$command \n";
        system($command);
    }

    # distribute files(?????? later do this as galli)
    $command="sophomorix-teacher --teacher $teacher --handout --${type} $group";
    print "$command \n";
    system($command);

    # was file handed out ?
    foreach my $testfile (@teacher_files){
       foreach my $user (@userlist_to_check){
          $file="/home/students/${group}/${user}/${Language::task_dir}/${Language::task_string}-${group}/${teacher}/${testfile}"; 
          ok(-e $file, "$file existiert");
       }
    }


}







sub get_login_from_user {
    my ($user) = @_;
    my $login="";
    my ($class,$last,$first,$birth)=split(/;/,$user);
    $class=~tr/A-Z/a-z/; # in Kleinbuchstaben umwandeln
    if ($class eq "lehrer"){
        $class="teachers",
    }
    $last=~tr/A-Z/a-z/; # in Kleinbuchstaben umwandeln
    $first=~tr/A-Z/a-z/; # in Kleinbuchstaben umwandeln

    $birth=&date_perl2pg($birth);

    # Fetch login of user
    $login = &fetch_login("surname='$last' 
                          AND firstname='$first'
                          AND birthday='$birth'",
                         );
    return $login;
}
