



############################################################
Schreibender Zugriff für sophomorix2 einrichten
############################################################


1. Entwickler git ssh public key an jeffbeck@web.de
   ssh-keygen -t dsa


2. gitolite-admin auschecken

   - keys dazukopieren unter benannt nach Anmeldenamen
   - gitolite.conf: Eintragen als RW Zugriff

3. gitolite-admin wieder einchecken



4. A) Entwickler kann clonen mit:
   ssh-add priv.key (oder ssh-agent /bin/bash; ssh-add priv.key )
   git clone gitolite@cvs.bszleo.de:sophomorix2
   cd sophomorix2
   git branch

   --> das checked nur master branch aus

   B) Anderen branch (z.B. oneiric-package) mittracken und wechseln:

   git checkout --track -b oneriric-package origin/oneriric-package

  
5. Sonstiges:
   Tags anzeigen:
        git tag
   Branches anzeigen:
        git branch    (lokale und remote, getrackte)
        git branch -a (alle, auch remote)
   Branch wechseln:
        git checkout oneriric-package
        git checkout master



############################################################
Bug in mehreren Branches fixen
############################################################

Annahme: 2 branches vorhanden
* master
  precise

1. aktuelle branches holen:
   git pull 
   git branch -v
   -> lokale branches werde gezeigt:
       master 
       precise 
    (falls precise nicht gezeigt wird, siehe oben bei 'remote tracking')

2. Branch auschecken, in dem der Bugfix entwickelt werden soll:
   git checkout master
   (prüfen mit git branch -v)

3. Einen neuen lokalen branch erstellen, in dem dieser Bug gefixt wird.
   Dieser basiert(=ist im Moment identisch) auf den vorher ausgecheckten
   branch (Im Beispiel 'master')
   git branch fix-bug-100

4. Wechseln in den Bugfix-Branch:
   git checkout fix-bug-100
   (prüfen mit git branch -v)

5. Nun den Bug fixen. Die Änderungen kommen dabei in den 
   branch fix-bug-100

6. Nachdem der Bug gefixed ist
   git status
   git add ...    (list the files that are changed)
   git commit -m "bug 100 fixed in master"

7. fix-bug-100 nach 'master' mergen:
   git checkout master
   git merge fix-bug-100

8. fix-bug-100 nach precise mergen:
   git checkout precise
   git merge fix-bug-100
   -> hier muss man mit Konflikten rechnen

9. Änderungen remote pushen:
   git checkout master
   git commit -m "bug 100 fixed"
   git status
   git push
   (push sollte master UND precice pushen, 
    Wieso?     - wegen remote tracking?
               - weil gemerged in beide branches)

10. Der gemergte, lokale branch fix-bug-100 kann lokal gelöscht werden:
   git branch -d fix-bug-100


 