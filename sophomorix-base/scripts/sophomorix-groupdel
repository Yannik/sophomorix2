#!/usr/bin/perl -w
# $Id$
# Dieses Script (sophomorix-groupdel) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
use DBI;
use Net::LDAP;

use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    check_connections
                                    remove_class_db_entry
                                    pg_get_group_type
                                    fetchworkstations_from_room
                                    fetchstudents_from_adminclass
                                    fetchrooms_from_school
                                    fetchadminclasses_from_school
                                   );


my @arguments = @ARGV;


# ===========================================================================
# Variablen
# ==========================================================================

my $help=0;


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
$Conf::log_level=1;
my $room="";
my $class="";

my $backup=1;
my $explanation="";
my $skiplock=0;

my $type=-1; # 3: domain group

# Parsen der Optionen
my $testopt=GetOptions(
           "verbose|v+" => \$Conf::log_level,
           "help|h" => \$help,
           "room=s" => \$room,
           "c|class=s" => \$class,
           "skiplock" => \$skiplock,
           "backup!" => \$backup
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);
&check_connections();
&log_script_start(@arguments);


if ($room eq ""
    and $class eq ""){
    $help=1;
}

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-groupdel deletes groups without users from the sophomorix database (and ldap)

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  --skiplock

  --room name  (a group for workstations)
  --class name (a group for students)
  
  --backup   (default)
  --nobackup
  

Please see the sophomorix-groupdel(8) man pages for full documentation
');
   print "\n";
   exit;
}



# --room name
if ($room ne ""){
    # 1) check if $room is really a room
    print "Checking if room $room is a room: ";
    my $seen=0;
    my @rooms = &fetchrooms_from_school();
    foreach my $existing_room (@rooms){
        if ($room eq $existing_room){
	    $seen=1;
            print "Yes\n";
            last;
        }
    }
    if ($seen==0){
        my ($type)=&pg_get_group_type($room);
        print "No ($type)\n";
        print "   WARNING: Not removing room $room\n";
        exit;
    }

    # 2) check if there are no users in this room
    print "Checking if room $room can be removed\n";
    my @users = &fetchworkstations_from_room($room);
    my $members=$#users+1;
    print "   $room has $members workstations\n";
    if ($members==0){
	print "   Removing room $room from pg\n";
    } else {
        print "   Group $room is not empty\n";
        print "   WARNING: Not removing room $room\n";
        exit;
    } 

    # Remove files/dirs

    # Do it
    &remove_class_db_entry($room);
}


# --class name
if ($class ne ""){
    # 1) check if $class is really a adminclass/hiddenclass
    print "Checking if class $class is a adminclass/hiddenclass: ";
    my $seen=0;
    my @classes = &fetchadminclasses_from_school("showhidden");
    foreach my $existing_class (@classes){
        if ($class eq $existing_class){
            my ($type)=&pg_get_group_type($class);
	    $seen=1;
            print "Yes ($type)\n";
            last;
        }
    }
    if ($seen==0){
        my ($type)=&pg_get_group_type($class);
        print "No ($type)\n";
        print "   WARNING: Not removing class $class\n";
        exit;
    }

    # 2) check if there are no users in this room
    print "Checking if class $class can be removed\n";
    my @users = &fetchstudents_from_adminclass($class);
    my $members=$#users+1;
    print "   $class has $members students\n";
    if ($members==0){
	print "   Removing class $class from pg\n";
    } else {
        print "   Group $class is not empty\n";
        print "   WARNING: Not removing class $class\n";
        exit;
    } 

    my $timestamp=&zeit_stempel;

    # Remove files/dirs
    &backup_dir_to_attic("${DevelConf::homedir_pupil}/$class",
                         "groupdel",
                         "${timestamp}_groupdel_${class}",
                         "homedir_${class}",
                         "",
                         "$backup");
    &backup_dir_to_attic("${DevelConf::share_classes}/$class",
                         "groupdel",
                         "${timestamp}_groupdel_${class}",
                         "share_${class}",
                         "",
                         "$backup");
    &backup_dir_to_attic("${DevelConf::tasks_classes}/$class",
                         "groupdel",
                         "${timestamp}_groupdel_${class}",
                         "tasks_${class}",
                         "",
                         "$backup");
    &backup_dir_to_attic("${DevelConf::www_classes}/$class",
                         "groupdel",
                         "${timestamp}_groupdel_${class}",
                         "www_${class}",
                         "bzip2",
                         "$backup");
    # Do it
    &remove_class_db_entry($class);
}




&log_script_end(@arguments);
