#!/usr/bin/perl -w
# $Id$
# Dieses Script (sophomorix-groupdel) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
use DBI;
use Net::LDAP;

use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    check_connections
                                    remove_class_db_entry
                                    pg_get_group_type
                                    fetchworkstations_from_room
                                    fetchrooms_from_school
                                   );


my @arguments = @ARGV;

&check_connections();
&log_script_start(@arguments);

# ===========================================================================
# Variablen
# ==========================================================================

my $help=0;


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

my $room="";

my $explanation="";
my $skiplock=0;

my $type=-1; # 3: domain group

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "room=s" => \$room,
           "skiplock" => \$skiplock,
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);


if ($room eq ""){
    $help=1;
}

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-groupdel adds a group to the sophomorix database (and ldap)

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  --room   (a group for some workstations))

Please see the sophomorix-groupdel(8) man pages for full documentation
');
   print "\n";
   exit;
}




if ($room ne ""){
    # 1) check if $room is really a room
    print "Checking if room $room is a room: ";
    my $seen=0;
    my @rooms = &fetchrooms_from_school();
    foreach my $existing_room (@rooms){
        if ($room eq $existing_room){
	    $seen=1;
            print "Yes\n";
            last;
        }
    }
    if ($seen==0){
        print "No\n";
        print "   WARNING: Not removing room $room\n";
        exit;
    }

    # 2) check if there are no users in this room
    print "Checking if room $room can be removed\n";
    my @users = &fetchworkstations_from_room($room);
    my $members=$#users+1;
    print "   $room has $members workstations\n";
    if ($members==0){
	print "   Removing room $room from pg\n";
    } else {
        print "   Group $room is not empty\n";
        print "   WARNING: Not removing room $room\n";
        exit;
    } 

    # Remove files/dirs

    # Do it
    &remove_class_db_entry($room);
}


&log_script_end(@arguments);
