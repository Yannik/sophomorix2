#!/usr/bin/perl -w
# $Id$
# This script (sophomorix-workstation) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@gmx.de


# ??? valix pxe options ???



# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
#use Schedule::at;
use String::Approx 'amatch';
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Time::Local;
use Time::localtime;
use Term::ANSIColor qw(:constants); # farbiger Text RED, BLUE, ...
# nach jedem Printbefehl wieder auf Standardfarbe zurücksetzen
$Term::ANSIColor::AUTORESET = 1;
use IMAP::Admin;
use DBI;
use Net::LDAP;
use Net::MAC;
use Date::Calc qw(check_date);
use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    db_connect
                                    db_disconnect
                                    check_connections
                                    search_user
                                    fetchdata_from_account
                                    forbidden_login_hash
                                    update_user_db_entry
                                    date_pg2perl
                                    user_deaktivieren
                                    user_reaktivieren     
                                    check_sophomorix_user
                                    set_sophomorix_passwd
                                    fetchstudents_from_adminclass
                                    db_connect
                                   );

my @arguments = @ARGV;


my $today=`date +%d.%m.%Y`;
chomp($today);

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
$Conf::log_level=1;
my $help=0;
my $info=0;

# ??? develconf ???
my $workstation_conf="/etc/linuxmuster/workstations";

my %pxe = qw( 0 ok
             22 ok
             ml ok
            );

# Parsen der Optionen
my $testopt=GetOptions(
       "verbose|v+" => \$Conf::log_level,
       "help|h" => \$help,
       "i|info" => \$info,
          );


# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);
&check_connections();

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-workstation adds the DomainComputer and Examaccount 
  from /etc/linuxmuster/workstation

Options
  -h   /  --help
  -i   /  --info
  -v   /  --verbose
  -vv  /  --verbose --verbose

Please see the sophomorix-workstation(8) man pages for full documentation
');
   print "\n";

   exit;
}




&titel("Asking the system for users ...");

my ($ref_domcomputers,$ref_rooms,$ref_examaccounts) = &get_sys_workstations();

# domcomputers room
my %domcomputers_system = %$ref_domcomputers;
my %rooms_system = %$ref_rooms;
my %examaccounts_system = %$ref_examaccounts; 










# --info
if ($info==1){

    # fetch and sort rooms
    my @rooms=();
    while (my ($room,$v) = each %rooms_system){
        push @rooms, $room;
    }
    @rooms = sort @rooms;

    foreach my $room (@rooms){
	print "$room\n";
        # fetch and sort examaccounts
        my @examaccounts=();
        while (my ($account,$roomentry) = each %examaccounts_system){
            #print $account , " ", $roomentry, "\n";
            if ($roomentry eq $room){
                push @examaccounts,$account;
            }
        }
        @examaccounts = sort @examaccounts;
        foreach my $account (@examaccounts){
            print "    $account\n";
        }
    }
}






print "Checking $workstation_conf for syntax errors ...\n";
open(WORKSTATION,"<${workstation_conf}");
while(<WORKSTATION>){
    &analyze_line($_);
}

close(WORKSTATION);



# ????
# syntax OK: -> 0
#return 0;
# systax ERROR -> 1


#&log_script_start(@arguments);



sub analyze_line {
    my ($line) = @_;
    if (/^#/ or /^\s*$/){
        return 0;
    } else {
        print "$line";
        chomp($line);
        my ($room,
            $host,
            $hwk,
            $mac,
            $ip,
            $netmask,
            $part1,
            $part2,
            $part3,
            $part4,
            $pxe,
            $option)=split(/;/,$line);

        &check_room($room);
        &check_host($host);
        &check_hwk($hwk);
        &check_mac($mac);
        &check_ip($ip);
        &check_netmask($netmask);
#        print "   PART 1:  $part1\n";
#        print "   PART 2:  $part2\n";
#        print "   PART 3:  $part3\n";
#        print "   PART 4:  $part4\n";
        &check_pxe($pxe);
        if (not defined $option){
            $option="";
            # ??? warning ???
        }
        print "   OPTION:  $option\n";

        

    }
}


sub check_room {
    my ($string) = @_;
        print "   ROOM:    $string\n";
    if ( $string=~/[^A-Za-z0-9\-]/ ) {
        print "\nERROR: $string contains invalid characters\n\n";
        exit 1;
    } else {

    }
}


sub check_host {
    my ($string) = @_;
    print "   HOST:    $string\n";
    if ( $string=~/[^A-Za-z0-9\-]/ ) {
        print "\nERROR: $string contains invalid characters\n\n";
        exit 1;
    } else {

    }
}


sub check_hwk {
    # ist - erlaubt?
    my ($string) = @_;
    print "   HWK:     $string\n";
    if ( $string=~/[^A-Za-z0-9]/ ) {
        print "\nERROR: $string contains invalid characters\n\n";
        exit 1;
    } else {

    }
}


sub check_mac {
    my ($string) = @_;
    print "   MAC:     $string";
    my $mac = Net::MAC->new('mac' => $string , base => 16); 
    my $new_mac = $mac->convert(
          'base'      => 16,   # convert to base 16, if necessary
          'bit_group' => 8,    # 16 bit grouping
          'delimiter' => ':',  # dot-delimited
          'die'       => 1     # die if conversion fails
	);
    
   # should die when mac is wrong
    print "      OLD: $mac\n";
    print "      NEW: $new_mac\n";
}


sub check_ip {
    my ($string) = @_;
    print "   IP:      $string\n";
    my @octets = split(/\./,$string);
    foreach my $octet (@octets){
        print "      Octet:    $octet\n";
        if ( int($octet) < 1 or int($octet) > 255) {
            print "\nERROR: ->$string<- is invalid Option in ip octet\n\n";
            exit 1;
        } else {

        }
    }
}


sub check_netmask {
    my ($string) = @_;
    print "   NETMASK: $string\n";
    my @octets = split(/\./,$string);
    foreach my $octet (@octets){
        print "      Octet:    $octet\n";
        if ( int($octet) < 0 or int($octet) > 255) {
            print "\nERROR: ->$string<- is invalid Option in netmask\n\n";
            exit 1;
        } else {

        }
    }
}


sub check_pxe {
    # ist - erlaubt?
    my ($string) = @_;
    print "   PXE:     $string\n";
    if ( not exists $pxe{$string} ) {
        print "\nERROR: ->$string<- is invalid Option in pxe field\n\n";
        exit 1;
    } else {

    }
}





sub get_sys_workstations {

    my %domcomputers_system = ();
    my %rooms_system = ();
    my %examaccounts_system = ();

    my $dbh=&db_connect();

    # domcomputers

    # select the columns that i need
    my $sth= $dbh->prepare( "SELECT uid,gid,homedirectory 
                               FROM userdata 
                              WHERE gid='domcomputers'" );
    $sth->execute();

    my $array_ref = $sth->fetchall_arrayref();

    foreach my $row (@$array_ref){
        # split the array, to give better names
        # or use numbers and look in the SELECT statement
        my $account_type="",

        my ($domcomputer,
            $room,
            $home,
           ) = @$row;
        #print "\n";
        #print "Host:  $domcomputer\n";
        #print "Room:  $room\n";
        #print "Home:  $home\n";
        $domcomputers_system{$domcomputer}=$room;
       
    }



    # examaccounts

    # select the columns that i need
    my $sth2= $dbh->prepare( "SELECT uid,gid,homedirectory 
                               FROM userdata 
                              WHERE homedirectory LIKE '/home/workstations%'" );
    $sth2->execute();

    my $array_ref2 = $sth2->fetchall_arrayref();

    foreach my $row (@$array_ref2){
        # split the array, to give better names
        # or use numbers and look in the SELECT statement
        my $account_type="",

        my ($exam_account,
            $room,
            $home,
           ) = @$row;
        #print "\n";
        #print "EXAM:  $exam_account\n";
        #print "Room:  $room\n";
        #print "Home:  $home\n";
        $examaccounts_system{$exam_account}=$room;
        $rooms_system{$room}="seen";
    }



    # room sortieren




    &db_disconnect($dbh);
    # returns some Hashes, as a list
    # 1:  workstation - room
    # 2:  room - workstation
    return(\%domcomputers_system, 
           \%rooms_system, 
           \%examaccounts_system, 
          );
}











#&log_script_end(@arguments);
