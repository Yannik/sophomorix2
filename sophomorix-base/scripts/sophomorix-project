#!/usr/bin/perl -w
# Dieses Script (sophomorix-project) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixFiles;
#use Schedule::at;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;

my $project="";

my $long_name;
my $p_teachers;
my $p_members;
my $p_groups;
my $p_add_quota;
my $p_max_members;

my $login="";

my @options=();

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "Name|project|p=s" => \$project,
           "LongName=s" => \$long_name,
           "Teachers|pteachers=s" => \$p_teachers,
           "Members|pmembers=s" => \$p_members,
           "MemberGroups|pgroups|Groups=s" => \$p_groups,
           "AddQuota|pquota|quota=s" => \$p_add_quota,
           "MaxMembers=s" => \$p_max_members,
          );

# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);

if ($project eq ""){
    print "Sie müssen ein Projekt angeben!\n";
    exit;
}


# Options-Liste Füllen, falls angegeben
push @options, $project;
if (defined $long_name){push @options, "LongName=$long_name"}
if (defined $p_teachers){push @options, "Teachers=$p_teachers"}
if (defined $p_members){push @options, "Members=$p_members"}
if (defined $p_groups){push @options, "MemberGroups=$p_groups"}
if (defined $p_add_quota){push @options, "AddQuota=$p_add_quota"}
if (defined $p_max_members){push @options, "MaxMembers=$p_max_members"}


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print "$scriptname erzeugt Projekte.\n"; 

   # gemeinsamer Hilfetext
   &help_text_all;

   # optionen
   print "Optionen:\n\n";

   print "  --info, -i\n";
   print "     Gibt die Klassen an, die gesplittet werden können.\n\n";

   print "  --project projekt, -p projekt\n";
   print "     Erstellt das Projekt projekt\n\n";

   print "  --lastchange login, -l login\n";
   print "     Loginname des users der als letztes gesplittet hat.\n\n";

   print "  --pmemebers user1,user2,... \n";
   print "     User, die zum Projekt gehören  sollen.\n\n";

   exit;
}

# --info
if ($info==1){
    print "Option info\n";
    exit;
}


# ===========================================================================
# Programmbeginn
# ===========================================================================

print "Working on project $project\n";

# Step 1
# write the projects-line
&create_project_db(@options);

# step 2
# Read the database  
# and change the system accordingly
#&create_project($project);




###########################################################################
# Sub
###########################################################################

sub get_project_db {
    my $project = @_;
    my %project_data=();
    open(PROJECT,"<${DevelConf::dyn_config_pfad}/projects");
    while(<PROJECT>){
	print $_,"\n";
       my @line=split(/;/);
       if ($line[0] eq $project){
	   $project_data{"ProjectName"} = $line[0];
	   $project_data{"ProjectNameLong"} = $line[1];
	   $project_data{"ProjectTeachers"} = $line[2];
	   $project_data{"ProjectUsers"} = $line[3];
	   $project_data{"ProjectAdminClasses"} = $line[4];
	   $project_data{"ProjectQuota"} = $line[5];
	   $project_data{"ProjectMaxUserNumber"} = $line[5];
       }
    }
    close(PROJECT);
    return %project_data;
}


