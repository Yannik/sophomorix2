#!/usr/bin/perl -w
# Dieses Script (sophomorix-project) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixFiles;
#use Schedule::at;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;

my $project="";

my $long_name;
my $p_teachers;
my $p_members;
my $p_groups;
my $p_add_quota;
my $p_max_members;

my $login="";

my @options=();

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "Name|project|p=s" => \$project,
           "LongName=s" => \$long_name,
           "Teachers|pteachers=s" => \$p_teachers,
           "Members|pmembers=s" => \$p_members,
           "MemberGroups|pgroups|Groups=s" => \$p_groups,
           "AddQuota|pquota|quota=s" => \$p_add_quota,
           "MaxMembers=s" => \$p_max_members,
          );

# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);

if ($project eq ""){
    print "Sie müssen ein Projekt angeben!\n";
    exit;
}


# Options-Liste Füllen, falls angegeben
push @options, $project;
if (defined $long_name){push @options, "LongName=$long_name"}
if (defined $p_teachers){push @options, "Teachers=$p_teachers"}
if (defined $p_members){push @options, "Members=$p_members"}
if (defined $p_groups){push @options, "MemberGroups=$p_groups"}
if (defined $p_add_quota){push @options, "AddQuota=$p_add_quota"}
if (defined $p_max_members){push @options, "MaxMembers=$p_max_members"}


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print "$scriptname erzeugt Projekte.\n"; 

   # gemeinsamer Hilfetext
   &help_text_all;

   # optionen
   print "Optionen:\n\n";

   print "  --info, -i\n";
   print "     Gibt die Klassen an, die gesplittet werden können.\n\n";

   print "  --project projekt, -p projekt\n";
   print "     Erstellt das Projekt projekt\n\n";

   print "  --lastchange login, -l login\n";
   print "     Loginname des users der als letztes gesplittet hat.\n\n";

   print "  --pmemebers user1,user2,... \n";
   print "     User, die zum Projekt gehören  sollen.\n\n";

   exit;
}

# --info
if ($info==1){
    print "Option info\n";
    exit;
}


# ===========================================================================
# Programmbeginn
# ===========================================================================

print "Working on project $project\n";

# Step 1
# write the projects-line
&create_project_db(@options);

# step 2
# Read the database  
# and change the system accordingly
&create_project($project);




###########################################################################
# Sub
###########################################################################


sub create_project {
    my ($project) = @_;
    my %project_data=();
    my %users_to_add=();
    my @users_to_add=();
    my $old_users="";
    my @old_users=();
    my @new_users=();
    my @new_groups=();
    my %seen=();
    open(PROJECT,"<${DevelConf::dyn_config_pfad}/projects.db");
    while(<PROJECT>){
        print "\nCreating/Updating Project $project: \n";
       my @line=split(/;/);
       if ($line[0] eq $project){
	   $project_data{"Name"} = $line[0];
	   $project_data{"NameLong"} = $line[1];
	   $project_data{"Teachers"} = $line[2];
	   $project_data{"Members"} = $line[3];
	   $project_data{"MemberGroups"} = $line[4];
	   $project_data{"AddQuota"} = $line[5];
	   $project_data{"MaxMembers"} = $line[6];
       }
    }
    close(PROJECT);
    #make sure that group exists
    system("groupadd $project");
    # create the userlist
    # the new users (without groups)
    @new_users=split(/,/, $project_data{"Members"});
    print "   New users: @new_users\n";
    # the new groups
    @new_groups=split(/,/, $project_data{"MemberGroups"});
    print "   New groups: @new_groups\n";
    # the old users
    ($a,$a,$a,$old_users)=getgrnam("$project");
    @old_users=split(/ /, $old_users);
    print "   Old users: @old_users\n";
    # Adding all users from project.db into a hash
    # Add the users
    foreach my $user (@new_users){
	$users_to_add{$user}="new";
    }
    # Add the users in the groups
    foreach my $group (@new_groups){
        my $group_users="";
        if (exists $seen{$group}){
	    print "Aaaargh, I have seen group $group! \n",
                  "Are you using recursive/multiple groups ...?\n";
            next,
        }
        # remember the group
        $seen{$group}="seen";
        if ($group eq $project){
            print "It's nonsense to have a group as its GroupMembers\n",
	          "... skipping $group as GroupMembers in $project\n";
	    next;
        }
        # fetching the user-string of the group
        ($a,$a,$a,$group_users)=getgrnam("$group");
        if (not defined $group_users){
	    print "Coldn't find $group, ... skipping $group\n";
            next;
        }
        print "     Users in group $group: $group_users\n";
        # saving the users in a list
        my @group_users=split(/ /, $group_users);
        foreach my $user (@group_users){        
           if (not exists $users_to_add{$user}){
              print "       + User $user from group $group must be added\n";
       	      $users_to_add{$user}=$group;
           } else {
	      print "       - User $user is already in the Hash\n";
           }
        }
    }

    # calculating which users to add
    foreach my $user (@old_users){
       if (exists $users_to_add{$user}){
          # remove user from users_to_add
          print "     User $user does not need to be added\n";
          delete $users_to_add{$user}; 
       } elsif (not exists $users_to_add{$user}) {
         # remove user
         print "     User $user has left $project, removing $user\n";
         system("gpasswd -d $user $project");
       } 
    }    
    
    while (my ($user) = each %users_to_add){
       #print "$user must be added\n";
       push @users_to_add, $user;
    }
    # sorting
    @users_to_add = sort @users_to_add;
    print "     Users to add: @users_to_add\n";
    # adding the users
    foreach my $user (@users_to_add) {
       system("adduser $user $project");
    }

}


