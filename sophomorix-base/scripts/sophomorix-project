#!/usr/bin/perl -w
# Dieses Script (sophomorix-project) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
#use Sophomorix::SophomorixFiles;
#use Schedule::at;

use DBI;
use Net::LDAP;


# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                        check_connections
                                        show_project_list
                                        create_project_db
                                       );
# list of functions to load if db is 'pgldap'
use if ${DevelConf::db_backend} eq 'pgldap' , 
    'Sophomorix::SophomorixPgLdap' => qw(show_modulename
                                        db_connect
                                        db_disconnect
                                        adduser_to_project
                                        fetchuser_from_project
                                        deleteuser_from_project
                                        check_connections
                                        show_project_list
                                        create_project_db
                                       );


# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if sys_db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                          );

# list of functions to load if sys_db is 'pgldap'
use if ${DevelConf::sys_db} eq 'pgldap' , 
    'Sophomorix::SophomorixSYSPgLdap' => qw(show_sys_modulename
                                          );



# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $create=0;
$Conf::log_level=1;

my $project="";

my $k;
my $v;

my $long_name;
my $p_teachers;
my $p_members;
my $p_groups;
my $p_add_quota;
my $p_max_members;

my $login="";

my @options=();

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "create" => \$create,
           "verbose|v+" => \$Conf::log_level,
           "Name|project|p=s" => \$project,
           "LongName=s" => \$long_name,
           "Teachers=s" => \$p_teachers,
           "Members=s" => \$p_members,
           "MemberGroups=s" => \$p_groups,
           "AddQuota=s" => \$p_add_quota,
           "MaxMembers=s" => \$p_max_members,
          );

print "p_members:  $p_members \n";

# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-project adds projects to the sophomorix database and adds users
   or groups as members to the project

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  -p projectname, / --project projectname 
  -- create 
  --LongName projectname(long)
  --Teachers user1,user2,user3, ... 
  --Members user1,user2,user3, ... 
  --MemberGroups group1,group2,group3, ... 
  --AddQuota quotastring
  --MaxMembers number

Please see the sophomorix-project(8) man pages for full documentation
');
   print "\n";
   exit;
}



# show the Database Modules that are loaded
&show_modulename();
&show_sys_modulename();
&check_connections();



# --info
if ($project eq "" or $info==1){
    &show_project_list();
    exit;
}


# Options-Liste Füllen, falls angegeben
push @options, $project;
if (defined $long_name){push @options, "LongName=$long_name"}
if (defined $p_teachers){push @options, "Teachers=$p_teachers"}
if (defined $p_members){push @options, "Members=$p_members"}
if (defined $p_groups){push @options, "MemberGroups=$p_groups"}
if (defined $p_add_quota){push @options, "AddQuota=$p_add_quota"}
if (defined $p_max_members){push @options, "MaxMembers=$p_max_members"}
if ($create==1){push @options, "Create=yes"}




# ===========================================================================
# Programmbeginn
# ===========================================================================

&check_datei_touch("${DevelConf::dyn_config_pfad}/projects_db");


# repair.directories einlesen
&get_alle_verzeichnis_rechte();


# Step 1
# write the projects-line
&create_project_db(@options);

# step 2
# Read the database  
# and change the system accordingly
&create_project($project);





###########################################################################
# Sub
###########################################################################

sub create_project {
    # reads from projects_db and creates the project in the system
    my ($project) = @_;
    my $found=0;
    my %project_data=();
    my %users_to_add=();
    my @users_to_add=();
    my $old_users="";
    my @old_users=();
    my @new_users=();
    my @new_teachers=();
    my @new_groups=();
    my %seen=();
    my $dbh=&db_connect();
    my (@line)= $dbh->selectrow_array( 
                                        "SELECT gid,displayname,teachers,
                                                members,membergroups,addquota,
                                                maxmembers 
                                         FROM projectdata 
                                         WHERE gid='$project'
                                        ");
    if (not defined $line[0]){
        print "Could not find project $project.\n";
	exit;
    }
    print "\nCreating/Updating Project $project: \n";
    #make sure that group exists
#    system("groupadd $project");
    # make sure that the share die exists
#    &check_verzeichnis_mkdir("/home/tausch/projects");
#    &check_verzeichnis_mkdir("/home/tausch/projects/${project}");
    &provide_project_files($project);
#    &setup_verzeichnis("\$share_projects","${DevelConf::share_projects}");
    # Todo ?????? muss mit rechten aus repair.directories angelegt werden
#    &check_verzeichnis_mkdir("${DevelConf::share_projects}/${project}");
 
    # the old users
    #($a,$a,$a,$old_users)=getgrnam("$project");
    #@old_users=split(/ /, $old_users);
    @old_users=&fetchuser_from_project($project);

    print "   Old users: @old_users\n";

    # Adding all users from project.db into a hash

    my @new_members=split(/,/,$p_members);

    foreach my $memb (@new_members){
	$users_to_add{ $memb }="";
        # print $memb,"\n";
    }

#    %users_to_add=&get_user_project($project,
#                                    $project_data{"Teachers"},
#                                    $project_data{"Members"},
#                                    $project_data{"MemberGroups"}
#                                   );

    &db_disconnect($dbh);


    # show the hash
    if($Conf::log_level>=3){
       print "\n\nAll Users which will be members in project $project:\n";
       print "Login:          Listed in:\n";
       print "=======================================",
             "=======================================\n";
       while (my ($k,$v) = each %users_to_add){
          printf "%-14s %-40s\n","$k","$v";
       }
    }

    # calculating which users to add
    foreach my $user (@old_users){
       if (exists $users_to_add{$user}){
          # remove user from users_to_add
          if($Conf::log_level>=3){
             print "     User $user does not need to be added\n";
	  }
          delete $users_to_add{$user}; 
       } elsif (not exists $users_to_add{$user}) {
         # remove user
          if($Conf::log_level>=3){
            print "     User $user has left Project $project,",
                  " removing $user\n";
         }
         #system("gpasswd -d $user $project");
	 &deleteuser_from_project($user,$project);
         &remove_share_link($user,$project);
       } 
    }    
    
    while (my ($user) = each %users_to_add){
       #print "$user must be added\n";
       push @users_to_add, $user;
    }
    # sorting
    @users_to_add = sort @users_to_add;
    print "     Users to add: @users_to_add\n";
    # adding the users
    foreach my $user (@users_to_add) {
       if ($user eq "root"){next;}
       &adduser_to_project($user,$project);

       # create a link
       &create_share_link($user,$project);
    }

}

