#!/usr/bin/perl -w
# $Id$
# Dieses Script (sophomorix-project) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
use DBI;
use Net::LDAP;
use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    db_connect
                                    db_disconnect
                                    check_connections
                                    show_project_list
                                    show_project
                                    dump_all_projects
                                    create_project
                                    remove_project
                                    remove_class_db_entry
                                    fetchinfo_from_project
                                    adduser_to_project
                                    addadmin_to_project
                                    deleteuser_from_project
                                    deleteadmin_from_project
                                    addgroup_to_project
                                    deletegroup_from_project
                                    addproject_to_project
                                    deleteproject_from_project
                                    fetchprojects_from_school
                                    fetchprojects_from_project
                                    fetchgroups_from_project
                                    fetchusers_from_project
                                    fetchadmins_from_project
                                   );

my @arguments = @ARGV;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

my $pg_timestamp=&pg_timestamp();

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $tree=0;
my $info=0;
my $create=0;
my $kill=0;
$Conf::log_level=1;

my $project="";

my $k;
my $v;

my $addmembers="";
my $removemembers="";
my $addadmins="";
my $removeadmins="";
my $addmembergroups="";
my $removemembergroups="";
my $addmemberprojects="";
my $removememberprojects="";

my $p_long_name;
my $p_admins;
my $p_groups;
my $p_members;
my $p_projects;
my $p_add_quota;
my $p_add_mail_quota;
my $p_max_members;
my $mailalias;
my $p_mailalias;
my $maillist;
my $p_maillist;
my $p_status;
my $join; # 0,1
my $p_join="TRUE"; # FALSE,TRUE

my $dump_all_projects="";
my $create_from_file="";
my $update_from_file="";

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "create" => \$create,
           "kill" => \$kill,
           "verbose|v+" => \$Conf::log_level,
           "join!" => \$join,
           "tree" => \$tree,
           "addmembers=s" => \$addmembers,
           "removemembers=s" => \$removemembers,
           "addadmins=s" => \$addadmins,
           "removeadmins=s" => \$removeadmins,
           "addmembergroups=s" => \$addmembergroups,
           "removemembergroups=s" => \$removemembergroups,
           "addmemberprojects=s" => \$addmemberprojects,
           "removememberprojects=s" => \$removememberprojects,
           "name|project|p=s" => \$project,
           "longname=s" => \$p_long_name,
           "membergroups=s" => \$p_groups,
           "admins=s" => \$p_admins,
           "members=s" => \$p_members,
           "memberprojects=s" => \$p_projects,
           "addquota=s" => \$p_add_quota,
           "addmailquota=s" => \$p_add_mail_quota,
           "maxmembers=s" => \$p_max_members,
           "mailalias!" => \$mailalias,
           "maillist!" => \$maillist,
           "dump=s" => \$dump_all_projects,
           "create-from-file=s" => \$create_from_file,
           "update-from-file=s" => \$update_from_file,
          );

# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);
&log_script_start(@arguments);


if ($project eq ""
    and $addmembers eq ""
    and $removemembers eq ""
    and $addadmins eq ""
    and $removeadmins eq ""
    and $addmembergroups eq ""
    and $removemembergroups eq ""
    and $addmemberprojects eq ""
    and $removememberprojects eq ""
    and $info==0
    and $tree==0
    and $dump_all_projects eq ""
    and $create_from_file eq ""
    and $update_from_file eq ""
    ){
    $help=1;
}



# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-project adds projects to the sophomorix database and adds users
   or groups as members to the project

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  --tree
  -i -p projectname
  -p projectname, / --project projectname 
  --create 
  --kill
  --join,  --nojoin
  --longname projectname(long)
  --admins user1,user2,user3, ... 
  --members user1,user2,user3, ... 
  --membergroups group1,group2,group3, ... 
  --memberprojects project1,project2,project3, ... 
  --addquota quotastring
  --addmailquota number
  --maxmembers number

  --mailalias, --nomailalias
  --maillist, --nomaillist 

  -p project --addmembers
  -p project --removemembers 
  -p project --addadmins 
  -p project --removeadmins 
  -p project --addmembergroups
  -p project --removemembergroups
  -p project --addmemberprojects
  -p project --removememberprojects


  --dump file
  --create-from-file file
  --update-from-file

Please see the sophomorix-project(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --tree
if ($tree==1) {
    print "Project Membership Tree:\n";
    my @projects=&fetchprojects_from_school();
    foreach my $pro (@projects){
        print "$pro: \n";
        my @projects=&fetchprojects_from_project($pro);
        foreach my $pro (@projects){
           print "   ### $pro (project) \n";
        }
        my @groups=&fetchgroups_from_project($pro);
        foreach my $group (@groups){
           print "     # $group (group) \n";
        }
        my @admins=&fetchadmins_from_project($pro);
           print "   *** admin:";
        foreach my $adm (@admins){
           print " $adm,";
        }
        print "\n";
        print "     * users: \n";
        my @users=&fetchusers_from_project($pro);

	my $number=6;
        my $index_number=$number-1;
        my @linelist=();
        my $all=$#users+1;
        my $left=$all % $number;
        my $to_add=$number-$left;
        my $i;
        # add the missing elements
        if ($all!=$number){
           for ($i = 1; $i <= $to_add; $i++) {  # count from 1 to 10
              push @users, "";
           }
        }

      foreach my $user (@users){
          push @linelist, $user;
          if ($#linelist==$index_number){
	      printf "       %-12s %-12s %-12s %-12s %-12s %-12s\n",@linelist;
          @linelist=();
          } 
      }
    }
    exit;
}



# show the Database Modules that are loaded
&check_connections();


# --info
if ($project eq "" and $info==1){
    &show_project_list();
    exit;
}



# writing/reading to/from a file

# --dump
if ($project eq "" and $dump_all_projects ne ""){
    &dump_all_projects("$dump_all_projects");
    exit;
}


# --create-from-file
if ($project eq "" and $create_from_file ne ""){
    &alpha_warning();
    &project_from_file($update_from_file,"--create");
    exit;
}


# --update-from-file
if ($project eq "" and $update_from_file ne ""){
    &alpha_warning();
    &project_from_file($update_from_file,"");
    exit;
}





# --addmembers
if ($addmembers ne "" and $project ne ""){
    my @new_users = split(/,/,$addmembers);
    my @old_users = 
       &Sophomorix::SophomorixPgLdap::fetchusers_from_project($project);
    my @users = (@old_users,@new_users);
    $p_members=join(",",@users);
    print "   Using: --Members=$p_members\n";
}


# --removemembers
if ($removemembers ne "" and $project ne ""){
    my @users = split(/,/,$removemembers);
    my @old_users = 
       &Sophomorix::SophomorixPgLdap::fetchusers_from_project($project);
    my @new_users=&remove_duplicates_from_first_list(\@old_users,\@users);
    $p_members=join(",",@new_users);
    print "   Using: --Members=$p_members\n";
}


# --addadmins
if ($addadmins ne "" and $project ne ""){
    my @new_admins = split(/,/,$addadmins);
    my @old_admins = 
       &Sophomorix::SophomorixPgLdap::fetchadmins_from_project($project);
    my @admins = (@old_admins,@new_admins);
    $p_admins=join(",",@admins);
    print "   Using: --Admins=$p_admins\n";
}


# --removeadmins
if ($removeadmins ne "" and $project ne ""){
    my @admins = split(/,/,$removeadmins);
    my @old_admins = 
       &Sophomorix::SophomorixPgLdap::fetchadmins_from_project($project);
    my @new_admins=&remove_duplicates_from_first_list(\@old_admins,\@admins);
    $p_admins=join(",",@new_admins);
    print "   Using: --Admins=$p_admins\n";
}


# --addmembergroups
if ($addmembergroups ne "" and $project ne ""){
    my @new_groups = split(/,/,$addmembergroups);
    my @old_groups = 
       &Sophomorix::SophomorixPgLdap::fetchgroups_from_project($project);
    my @groups = (@old_groups,@new_groups);
    $p_groups=join(",",@groups);
    print "   Using: --MemberGroups=$p_groups\n";
}


# --removemembergroups
if ($removemembergroups ne "" and $project ne ""){
    my @groups = split(/,/,$removemembergroups);
    my @old_groups = 
       &Sophomorix::SophomorixPgLdap::fetchgroups_from_project($project);
    my @new_groups=&remove_duplicates_from_first_list(\@old_groups,\@groups);
    $p_groups=join(",",@new_groups);
    print "   Using: --MemberGroups=$p_groups\n";
}


# --addmemberprojects
if ($addmemberprojects ne "" and $project ne ""){
    my @new_projects = split(/,/,$addmemberprojects);
    my @old_projects = 
       &Sophomorix::SophomorixPgLdap::fetchprojects_from_project($project);
    my @projects = (@old_projects,@new_projects);
    $p_projects=join(",",@projects);
    print "   Using: --MemberProjects=$p_projects\n";
}


# --removememberprojects
if ($removememberprojects ne "" and $project ne ""){
    my @projects = split(/,/,$removememberprojects);
    my @old_projects = 
       &Sophomorix::SophomorixPgLdap::fetchprojects_from_project($project);
    my @new_projects=&remove_duplicates_from_first_list(\@old_projects,\@projects);
    $p_projects=join(",",@new_projects);
    print "   Using: --MemberProjects=$p_projects\n";
}







# --join
if (not defined $join){
    $p_join="";
} elsif ($join==0) {
    $p_join="FALSE"; 
} elsif ($join==1) {
    $p_join="TRUE";
}

# --mailalias
if (not defined $mailalias){
    $p_mailalias=""; 
} elsif ($mailalias==0){
    $p_mailalias="FALSE"; 
} else {
    $p_mailalias="TRUE";
}

# --maillist
if (not defined $maillist){
    $p_maillist=""; 
} elsif ($maillist==0){
    $p_maillist="FALSE"; 
} else {
    $p_maillist="TRUE";
}


# parse arguments
if (defined $p_long_name) {
   unless ($p_long_name =~ m/^([\w-]{6,32})$/) { 
       print "\nArgument of --longname\n";
       print "   contains invalid characters. \n";
       print "   or is too short or too long (6-32 characters). \n\n";
       exit;
   }
}

if (defined $project) {
   unless ($project =~ m/^([\w-]{3,14})$/) { 
       print "\nArgument of --project\n";
       print "   contains invalid characters. \n";
       print "   or is too short or too long (3-14 characters after p_). \n\n";
       exit;
   }
   unless ($project =~ m/^p\_/) { 
       $project="p_".$project;
   }

}




# --info --project name
if ($project ne "" and $info==1){
    &show_project($project);
    exit;
}


# ===========================================================================
# Programmbeginn
# ===========================================================================

# repair.directories einlesen
&get_alle_verzeichnis_rechte();


# create/update project
if ($kill==0){
    &create_project($project,$create,$p_long_name,
                    $p_add_quota,$p_add_mail_quota,
                    $p_status,$p_join,$pg_timestamp,
                    $p_max_members,$p_members,$p_admins,
                    $p_groups,$p_projects,
                    $p_mailalias,$p_maillist);
} elsif  ($kill==1){
    # remove all users from project
    # (BEFORE removing project)
    print "Preparing Project to kill (remove users)!\n";
    &create_project($project,0,"",
                    0,0,
                    "K","FALSE",$pg_timestamp,
                    0,"","",
                    "","",
                    0,0);

    # project_details: Eintrag löschen
    # und files loeschen 
    # (BEFORE removing group)
    &remove_project($project);

    # gruppe entfernen
    &remove_class_db_entry($project);
}


# Setting Quota if necessary
if ($Conf::use_quota eq "yes" 
      and (
         defined $p_admins
         or defined $p_groups
         or defined $p_members
         or defined $p_projects
         or defined $p_add_quota
         or defined $p_add_mail_quota
         or $kill==1
        ) 
    ) {
    # system("sophomorix-quota --students --teachers --noninteractive");
    system("${DevelConf::executable_pfad}/sophomorix-quota --project $project --noninteractive");
} else {
    &titel("NOT setting quota (nothing quota related changed)");
}





# Creating Mailing Aliases and Lists
if (defined $p_admins
    or defined $p_groups
    or defined $p_members
    or defined $p_projects
    or defined $p_long_name
    or defined $mailalias
    or defined $maillist
    or $kill==1
   ) {
    system("${DevelConf::executable_pfad}/sophomorix-mail");
} else {
    &titel("NOT creating mailaliases/lists (nothing mail related changed)");
}



&log_script_end(@arguments);






############################################################
# sub
############################################################

sub remove_duplicates_from_first_list {
    my ($liste_1,$liste_2) = @_;
    my %liste_1=();
    my @result=();
    # creating liste_1 hash
    foreach my $user (@$liste_1){
        $liste_1{$user}="seen";
        #print "User: $user \n";
    }
    # remove users from list2
    foreach my $user2 (@$liste_2){
        if (exists $liste_1{$user2}){
	    delete $liste_1{$user2};
            #print "Remove User: $user2 \n";
        }
    }
    # push liste_1 hash back into a list
    while( my ($k, $v) = each(%liste_1)) {
      push @result, $k;
    }
    @result = sort @result;
    return @result;
}



sub project_from_file {
    my ($file,$parm)= @_;
    print "file: $file \n";
    print "parm: $parm \n";
    open(PROS, "<$file");
    while(<PROS>) {
       print "$_";
       chomp();
       my ($project, #
           $addquota, #
           $add_mail_quota, #
           $max_members, #
           $mailalias, #
           $maillist, #
           $status,
           $join,
           $admins, #
           $users, #
           $groups, #
           $pro, #
          )=split(/:/,$_); 

       my $command="sophomorix-project -p $project ";

       if ($addquota ne "quota" and $addquota ne ""){
           $command.="--addquota $addquota ";
       }
       if ($add_mail_quota!=0 or $add_mail_quota eq ""){
           $command.="--addmailquota $add_mail_quota ";
       }
       if ($admins ne ""){
           $command.="--admins $admins ";
       }
       if ($users ne ""){
           $command.="--members $users ";
       }
       if ($max_members!=0){
           $command.="--maxmembers $max_members ";
       }
       if ($groups ne ""){
           $command.="--membergroups $groups ";
       }
       if ($pro ne ""){
           $command.="--memberprojects $pro ";
       }
       if ($maillist==1){
           $command.="--maillist ";
       }
       if ($mailalias==1){
           $command.="--mailalias ";
       }
       print $command."\n";
       system($command);
    }
    close(PROS);
}

