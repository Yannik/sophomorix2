#!/usr/bin/perl -w
# Dieses Script (sophomorix-project) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixFiles;
#use Schedule::at;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $create=0;
$Conf::log_level=1;

my $project="";

my $k;
my $v;

my $long_name;
my $p_teachers;
my $p_members;
my $p_groups;
my $p_add_quota;
my $p_max_members;

my $login="";

my @options=();

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "create" => \$create,
           "verbose|v+" => \$Conf::log_level,
           "Name|project|p=s" => \$project,
           "LongName=s" => \$long_name,
           "Teachers=s" => \$p_teachers,
           "Members=s" => \$p_members,
           "MemberGroups=s" => \$p_groups,
           "AddQuota=s" => \$p_add_quota,
           "MaxMembers=s" => \$p_max_members,
          );

# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-project adds projects to the sophomorix database and adds users
   or groups as members to the project

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  -p projectname, / --project projectname 
  -- create 
  --LongName projectname(long)
  --Teachers user1,user2,user3, ... 
  --Members user1,user2,user3, ... 
  --MemberGroups group1,group2,group3, ... 
  --AddQuota quotastring
  --MaxMembers number

Please see the sophomorix-project(8) man pages for full documentation
');
   print "\n";
   exit;
}

# --info
if ($project eq "" or $info==1){
    &show_project_list();
    exit;
}


# Options-Liste Füllen, falls angegeben
push @options, $project;
if (defined $long_name){push @options, "LongName=$long_name"}
if (defined $p_teachers){push @options, "Teachers=$p_teachers"}
if (defined $p_members){push @options, "Members=$p_members"}
if (defined $p_groups){push @options, "MemberGroups=$p_groups"}
if (defined $p_add_quota){push @options, "AddQuota=$p_add_quota"}
if (defined $p_max_members){push @options, "MaxMembers=$p_max_members"}
if ($create==1){push @options, "Create=yes"}




# ===========================================================================
# Programmbeginn
# ===========================================================================

# repair.directories einlesen
&get_alle_verzeichnis_rechte();


# Step 1
# write the projects-line
&create_project_db(@options);

# step 2
# Read the database  
# and change the system accordingly
&create_project($project);




###########################################################################
# Sub
###########################################################################

sub show_project_list {
   open(PROJECT,"<${DevelConf::dyn_config_pfad}/projects.db");
   print "The following projects exist already:\n";
   printf "   %-16s %-16s %-60s\n","Name:", "Teachers", "LongName:";

   print "=======================================",
         "=======================================\n";
   while(<PROJECT>){
       chomp();
       my @line=split(/;/);
       if (not defined $line[1]){$line[1]="---"}
       if (not defined $line[2]){$line[2]="---"}
       printf "   %-16s %-16s %-60s\n",$line[0], $line[2], $line[1];
   }
   close(PROJECT);
}

sub create_project {
    # reads from projects.db and creates the project in the system
    my ($project) = @_;
    my $found=0;
    my %project_data=();
    my %users_to_add=();
    my @users_to_add=();
    my $old_users="";
    my @old_users=();
    my @new_users=();
    my @new_teachers=();
    my @new_groups=();
    my %seen=();
    open(PROJECT,"<${DevelConf::dyn_config_pfad}/projects.db");
    while(<PROJECT>){
       my @line=split(/;/);
       if ($line[0] eq $project){
           $found=1;
	   $project_data{"Name"} = $line[0];
	   $project_data{"LongName"} = $line[1];
	   $project_data{"Teachers"} = $line[2];
	   $project_data{"Members"} = $line[3];
	   $project_data{"MemberGroups"} = $line[4];
	   $project_data{"AddQuota"} = $line[5];
	   $project_data{"MaxMembers"} = $line[6];
       }
    }
    close(PROJECT);
    # exit, if not found
    if ($found==0){
        print "Could not find project $project.\n";
	exit;
    }
    print "\nCreating/Updating Project $project: \n";
    #make sure that group exists
    system("groupadd $project");
    # make sure that the share die exists
#    &check_verzeichnis_mkdir("/home/tausch/projects");
#    &check_verzeichnis_mkdir("/home/tausch/projects/${project}");
    &setup_verzeichnis("\$share_projects","${DevelConf::share_projects}");
    # Todo ?????? muss mit rechten aus repair.directories angelegt werden
    &check_verzeichnis_mkdir("${DevelConf::share_projects}/${project}");
 
    # create the userlist
    # the new teachers
    @new_teachers=split(/,/, $project_data{"Teachers"});
    print "   New Teachers      : @new_teachers\n";
    # the new users (without groups)
    @new_users=split(/,/, $project_data{"Members"});
    print "   New Members       : @new_users\n";
    # the new groups
    @new_groups=split(/,/, $project_data{"MemberGroups"});
    print "   New MemberGroups  : @new_groups\n";
    # the old users
    ($a,$a,$a,$old_users)=getgrnam("$project");
    @old_users=split(/ /, $old_users);
    print "   Old users: @old_users\n";
    # Adding all users from project.db into a hash

    # Add the teachers
    foreach my $teacher (@new_teachers){
       if (not exists $users_to_add{$teacher}){
	  $users_to_add{$teacher}="Teachers";
       }
    }

    # Add the users
    foreach my $user (@new_users){
       if (not exists $users_to_add{$user}){
          $users_to_add{$user}="Members";
       }
    }

    # Add the users in the groups
    foreach my $group (@new_groups){
        my $group_users="";
        if (exists $seen{$group}){
	    print "Aaaargh, I have seen group $group! \n",
                  "Are you using recursive/multiple groups ...?\n";
            next,
        }
        # remember the group
        $seen{$group}="seen";
        if ($group eq $project){
            print "It's nonsense to have a group as its GroupMembers\n",
	          "... skipping $group as GroupMembers in $project\n";
	    next;
        }
        # fetching the user-string of the group
        ($a,$a,$a,$group_users)=getgrnam("$group");
        if (not defined $group_users){
	    print "Coldn't find $group, ... skipping $group\n";
            next;
        }
        print "     Users in group $group: $group_users\n";
        # saving the users in a list
        my @group_users=split(/ /, $group_users);
        foreach my $user (@group_users){        
           if (not exists $users_to_add{$user}){
              print "       + User $user from group $group must be added\n";
       	      $users_to_add{$user}=$group;
           } else {
	      print "       - User $user is already in the Hash\n";
           }
        }
    }

    # show the hash
    if($Conf::log_level>=3){
       print "\n\nAll Users which will be members in project $project:\n";
       print "Login:          Listed in:\n";
       print "=======================================",
             "=======================================\n";
       while (($k,$v) = each %users_to_add){
          printf "%-14s %-40s\n","$k","$v";
       }
    }

    # calculating which users to add
    foreach my $user (@old_users){
       if (exists $users_to_add{$user}){
          # remove user from users_to_add
          if($Conf::log_level>=3){
             print "     User $user does not need to be added\n";
	  }
          delete $users_to_add{$user}; 
       } elsif (not exists $users_to_add{$user}) {
         # remove user
          if($Conf::log_level>=3){
            print "     User $user has left Project $project,",
                  " removing $user\n";
         }
         system("gpasswd -d $user $project");
         &remove_share_link($user,$project);
       } 
    }    
    
    while (my ($user) = each %users_to_add){
       #print "$user must be added\n";
       push @users_to_add, $user;
    }
    # sorting
    @users_to_add = sort @users_to_add;
    print "     Users to add: @users_to_add\n";
    # adding the users
    foreach my $user (@users_to_add) {
       system("adduser $user $project");
       # create a link
       &create_share_link($user,$project);
    }

}


