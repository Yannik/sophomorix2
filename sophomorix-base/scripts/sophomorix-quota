#!/usr/bin/perl -w
# Dieses Script (sophomorix-quota) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Quota;
use Getopt::Long;
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
Getopt::Long::Configure ("bundling");
#use Schedule::at;

# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                        get_sys_users
                                        update_user_db_entry
                                        user_reaktivieren
                                        user_deaktivieren
                                       );

# list of functions to load if db is 'ldap'
use if ${DevelConf::db_backend} eq 'ldap' ,
    'Sophomorix::SophomorixLDAP' => qw(show_modulename);;


# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if sys_db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                           update_gecos
                                          );

# show the Database Modules that are loaded
&show_modulename();
&show_sys_modulename();



# Liste der Filesysteme auf denen Quota gesetzt werden
my @quota_fs=();


# ===========================================================================
# Quotierte Dateisysteme ermitteln
# ==========================================================================

if ($Conf::quota_filesystems[0] eq "auto" && 
   not $Conf::quota_filesystems[2] ) {
   # AUTOMATISCH bei String "auto" in sophomorix.conf
   @quota_fs=&get_quota_fs_liste();
} else {# NICHT AUTOMATISCH falls Vorgabe in sophomorix.conf
   @quota_fs=@Conf::quota_filesystems;
}


# Anzahl der zu quotierenden Dateisysteme ermitteln
my $quota_fs_num=$#quota_fs+1;


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $noninteractive=0;
my $info=0;
my $loginname="";
my $classes="";
my $pupil=0;
my $rooms="";
my $ws=0;
my $force=0;
my $sum=0;
my $system=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "login|user|u|l=s" => \$loginname,
           "class|klasse|c|k=s" => \$classes,
           "pupil|pupils" => \$pupil,
           "room|=s" => \$rooms,
           "workstations|workstation|ws" => \$ws,
           "force" => \$force,
           "test|t" => \$DevelConf::testen,
           "sum" => \$sum,
           "verbose|v+" => \$Conf::log_level,
           "help|h" => \$help,
           "noninteractive" => \$noninteractive,
           "system|s" => \$DevelConf::system,
           "info|i" => \$info
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);


# check if I have to ...
if($Conf::use_quota ne "yes" and $noninteractive==0){
  # ... abort
  print "\nsophomorix.conf says:  You don't want to use quota.\n\n";
  print "Set  \$use_quota=\"yes\"  in sophomorix.conf to use quota.\n\n";
  print "For more information:  man sophomorix-quota \n\n";
  exit;
} elsif ($Conf::use_quota ne "yes" and $noninteractive==1){
  # ... or do nothing
  &titel("sphomorix-quota: Not Setting quota ... \$use_quota=\"no\"");
  exit; 
}


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-quota sets quota for users

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  -t  / --test
  --sum
  -l  login1, ... / --login login1, .../ -u login1, ... / --user login1, ...
  -c class / --class class 
  --pupils
  -r room / --room room
  --workstations
  -s  / --system (untested, on your own risk!)

Please see the sophomorix-quota(8) man page for full documentation
');
   print "\n";
   exit;
}


# --info
if ($info==1) {
   my $fs="";
   my $i=0;
   my $j=0;
   my $l=0;
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   my @mb_liste=();

   # automatisch oder Liste in sophomorix.conf
   if ($Conf::quota_filesystems[0] eq "auto" && 
      not $Conf::quota_filesystems[2] ) {
      # "auto" in sophomorix.conf
      print "The following usrquota filesystems were found by $scriptname\n";
      print "on this server:\n\n";
    } else {
      # Liste in sophomorix.conf angegeben
      print "WARNING: You have manually configured the usrquota filesystems\n"; 
      print "in sophomorix.conf. \n\nYou should know what you are doing!\n\n";
    }

   # Tatsächlich benutzte Liste ausgeben
   foreach $fs (@quota_fs) {
     $i=$i+1;
     print"  Filesystem $i:    $fs\n";
   }

   print "\n";
   if ($quota_fs_num>1) {
       print "The order of the $quota_fs_num filesystems "; 
       print "is important!\n\n";
   }
   print "I.e.: To set the Standard-Quota for all pupils on your host,\n";
   print "you must have a line like this in ${DevelConf::config_pfad}/quota.txt:\n\n";
   print "   standard-schueler:";
   
   # Beispiel angeben
   foreach $fs (@quota_fs) {
     $j=$j+1;
     my $mb=30;
     if (not $j==1){
         print "+";
     }
     $mb=$mb*$j;
     print"$mb";
     push (@mb_liste, $mb);
   }

   print "\n\nThis line in quota.txt would set the following usrquota:\n\n";
   
   # Ergebnis angeben
   foreach $fs (@quota_fs) {
     $l=$l+1;
     print"  Filesystem ${l}:    $fs     to $mb_liste[${l}-1] MB\n";
   }

   print "\n\n";
   exit;
}




&titel("Calculating usrquota ... (this may take a while)");

my %login_type = &login_type();
#while( my ($login, $type) = each(%login_type)) {
#    print "$login:   $type \n";
#}

my %db_quota = &get_db_quota();
#while( my ($login, $quota) = each(%db_quota)) {
#    print "$login:   $quota \n";
#}

my %teacher_quota=&get_teacher_quota();
#while ( my ($k, $v) = each(%teacher_quota)) {
#    print "$k:  $v \n";
#}

my %quota_txt = &get_quota_txt();
#while ( my ($k, $v) = each(%quota_txt)) {
#    print "$k:  $v \n";
#}

my %class_quota = &get_class_quota();
#while ( my ($k, $v) = each(%class_quota)) {
#    print "$k:  $v \n";
#}

my %projects_add_quota = &get_projects_add_quota();
#while ( my ($k, $v) = each(%projects_add_quota)) {
#    print "$k:  $v \n";
#}


if ($loginname ne "" or $classes ne "" or $pupil!=0 or $rooms ne "" or $ws!=0){
    # create the list of users
    my @userlist=();
    &titel("Creating a userlist from options ...");
    if ($force==1){
        @userlist=&create_userlist($loginname,$classes,$pupil,$rooms,$ws,0);
    } else {
        # check the users
        @userlist=&create_userlist($loginname,$classes,$pupil,$rooms,$ws,1);
    }
    if ($#userlist+1==0 and $sum==0){
         print "INFO: No valid users given\n";
         $help=1;
    }
    &titel("Setting Quota for users in the userlist ...");
    # setting quota for every user
    foreach my $user (@userlist){
        my $new_quota=&get_quota($user);
        my @q_list = &check_quotastring($new_quota);
        if (not $q_list[0]==0){
            print "Setting quota of user $user to @q_list\n";
	    &set_quota($system,$user,\@quota_fs,\@q_list);
        } else {
	    print "ERROR: $new_quota is not correct, skipping ...\n";
        }
    }
} else {
   # ohne optionen
   &set_quota_if_needed();
}


# ===========================================================================
# subs
# ===========================================================================

# set the quota fot that user
# system=0 -> use perl modul, system=1 -> use setquota 
sub set_quota {
   my ($system,$user,$quota_fs, $q_list)=@_;
   my $quota="";
   my $fs="";
   my $j=0;
   my $uid=-1;
   my $quota_befehl="";
   my ($q_opt1,$q_opt3,$q_opt4)=("","","");
   # for every fs in
   for ($j=0; $j < @$quota_fs; $j++){

      # Aus der Listenreferenz das j-te Element herausnehmen
      $quota = $q_list->[$j];
      $fs = $quota_fs->[$j];

      # ??? Leerzeichen aus quota entfernen und return abschneiden
      chomp($quota);
      $quota=~s/ //g;

      # Softlimit ca. 20% unter Hardlimit
      $q_opt1=$quota-int($quota/5);
      # 80% des Hardlimits
      $q_opt3=80*$quota;
      # Wenn Dateien durchschnittlich unter 10kB/Datei gibts Probleme
      $q_opt4=100*$quota;

      # user-ID ermitteln
      ($a,$a,$uid)=getpwnam("$user");

      # Ausgeben der ermittelten werte
      if($Conf::log_level>=3){
         print("  Quotastring:       ${quota}\n");
         print("  Device:            ${fs}\n");
         print("  User:              ${user}\n");
         print("  UserID:            $uid\n");
         print("  Block-Softlimit:   ${q_opt1}000  \n");
         print("  Block-Hardlimit:   ${quota}000  \n");
         print("  Inode-Softlimit:   ${q_opt3}     \n");
         print("  Inode-Hardlimit:   ${q_opt4}     \n");
      }
      # Mit setquota die Quota der user tatsächlich anpassen
      if (not $DevelConf::system==1){
         # Quota-Modul benutzen
         if(not $DevelConf::testen==1) {
            # do it
            Quota::setqlim($fs,$uid,"${q_opt1}000","${quota}000",$q_opt3,$q_opt4);
	 } else {
            # test
            print "  Test (quota are not set!): \n";
         }
         print "   Setting quota ($fs, uid $uid): "; 
         print "${q_opt1}000 ${quota}000 $q_opt3 $q_opt4 \n";
      } else {
         # Systembefehl benutzten
         $quota_befehl="setquota -u ${user} ${q_opt1}000 ".
                       "${quota}000 ${q_opt3} ${q_opt4} ${fs}";
         if(not $DevelConf::testen==1) {
            # do it
            system("${quota_befehl}")
         } else {
            # test
            print "  Test (quota are not set!): \n";
         }
         print("   Quota command: ${quota_befehl}","\n");
      } 
   }
   # was gemacht wurde zusammensetzen
   my $quotastring=join "+", @$q_list;
   &update_user_db_entry($user,"Quota=$quotastring");
}




# check if the given string is correct
sub check_quotastring {
    my ($quotastring) = @_;
    my @list = split(/\+/, $quotastring);
    my $item=$#list+1;
    if (not $item==$quota_fs_num){
	print "$item quotas for $quota_fs_num filesystems\n";
       return (0);
    }
    foreach my $quo (@list){
      if (not $quo=~/[0-9]/){
	  print "Checking $quo \n";
        return (0);
      }
    }
    return @list;
}




# check for which users quota must be updated in the database. 
# if yes: call set_quota for each user
sub set_quota_if_needed {
    my $new_quota="";
    while ( my ($login, $type) = each(%login_type)) {
        $new_quota=&get_quota($login);
        if ($new_quota eq $db_quota{$login}){
           #do nothing
        } else {
           print "User $login:\n";
           print "  New quota: $new_quota \n";
           print "  Database : $db_quota{$login}\n";
           # check the new quotastring
           my @q_list = &check_quotastring($new_quota);
           if (not $q_list[0]==0){
               print "Setting quota of user $login to @q_list\n";
		   &set_quota(0,$login,\@quota_fs,\@q_list);
           } else {
	       print "ERROR: $new_quota is not correct, skipping ...\n";
           }
        }
    }
}





# create hash with teacher_quota
sub get_teacher_quota {
   my $login="";
   my $quotastring="";
   my %teacher_quota=();
   open(TEACHER,"${DevelConf::users_pfad}/lehrer.txt") || die "Fehler: $!";
   while(<TEACHER>){
      chomp();
      s/\s//g; # Whitespace Entfernen
      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      ($a,$a,$a,$a,$login,$a,$a,$quotastring)=split(/;/);
      # Wenn Quotaangabe vorhanden, dann benutzen
      if($quotastring ne "quota"){
         $teacher_quota{$login}=$quotastring;
     }
   }
   close(TEACHER);
   return %teacher_quota;
}




# hash: login -> type(pupil,teacher,workstation)
sub login_type {
    my %login_type=();
    my $login="";
    my $home="";
    # add admin, because it is not in user_db
    $login_type{"admin"}="admin";
    # others
    setpwent();
    while(($login,$a,$a,$a,$a,$a,$a,$home)=getpwent()) {
        if($home=~/^$DevelConf::homedir_pupil/){
           $login_type{$login}="student";
        } elsif($home=~/^$DevelConf::homedir_ws/){
           $login_type{$login}="workstation";
        } elsif($home=~/^$DevelConf::homedir_teacher/){
           $login_type{$login}="teacher";
        }
    }
    endpwent();
    return %login_type;
}




# calculates the quota of the user login
sub get_quota{
    my ($login) = @_;
    my $grname = `id -n -g $login`;
    chomp($grname);
    my $quotastring="";
    if (exists $quota_txt{$login}){
        # look in quota.txt
        $quotastring=$quota_txt{$login};
	#print "Found quota.txt quota: $quotastring\n";
    } elsif (exists $teacher_quota{$login}){
        # look in teacher.txt
        $quotastring=$teacher_quota{$login};
	#print "Found lehrer.txt quota: $quotastring\n";
    } elsif (exists $class_quota{$grname}){
        # look in class
        $quotastring=$class_quota{$grname};
	#print "Found quota for class $grname: $quotastring\n";
    } else {
        # take standard values
        if ($login_type{$login} eq "student"){
	    $quotastring=$quota_txt{"standard-schueler"};
        } elsif ($login_type{$login} eq "teacher"){
	    $quotastring=$quota_txt{"standard-lehrer"};
        } elsif ($login_type{$login} eq "workstation"){
	    $quotastring=$quota_txt{"workstation-lehrer"};
        }
    }
    
    if (exists $projects_add_quota{$login}){
        #print "Adding $projects_add_quota{$login}\n";
	$quotastring = &quota_addition($projects_add_quota{$login},$quotastring);
    }
    return $quotastring;
}





# hash login -> additional quota
sub get_projects_add_quota {
    my %projects_add_quota=();
    my %users=();
    open(PROJECT,"<${DevelConf::dyn_config_pfad}/projects_db");
    while(<PROJECT>){
       chomp();
       my ($name,$lname,$teacher,$member,$member_group,$add_quota)=split(/;/);
       %users=();
       %users=&get_user_project($name,$teacher,$member,$member_group);
       while ( my ($login, $v) = each(%users)) {
          #print "$login: $add_quota\n";
          if (exists $projects_add_quota{$login}){
             # add the quotas
	      my $sum = &quota_addition($projects_add_quota{$login},$add_quota);
             $projects_add_quota{$login}=$sum;
	 } else {
             # create entry
             $projects_add_quota{$login}=$add_quota;
         }
       }
    }
    close(PROJECT);
    return %projects_add_quota;
}




# hash: class -> quota 
sub get_class_quota {
    my $class="";
    my $quotastring="";
    my %class_quota=();
    open(CLASS,"<${DevelConf::protokoll_pfad}/class_db") || die "Fehler: $!";
    while(<CLASS>){
       chomp();
       s/\s//g; # Whitespace Entfernen
       if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
       if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
       ($class,$a,$a,$a,$quotastring)=split(/;/);
       # Group-ID der Klasse ermitteln
       if($quotastring ne "quota"){
          # wenn Klassen-Quota angegeben dann nutzen
          $class_quota{$class}=$quotastring;  
       }
    }
    close(CLASS);
    return %class_quota;
}





# hash: login -> quota  (login can be also: standard-*) 
sub get_quota_txt {
   my %quota_txt=();
   my $user="";
   my $quotastring="",
   open(QUOTATXT,"${DevelConf::config_pfad}/quota.txt") || die "Fehler: $!";
   while(<QUOTATXT>){
      chomp();
      s/\s//g; # Whitespace Entfernen
      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      # user von sollquota splitten
      ($user,$quotastring)=split(/:/);
      $quota_txt{$user}=$quotastring;
   }
   close(QUOTATXT);
   # Rückgabe-Hash enthält standard-quota UND Einzel-Quota
   return %quota_txt;
}




# hash: login -> quotastring in the sophomorix database(user_db)
sub get_db_quota {
    my $login="";
    my $quotastring="";
    my %db_quota=();
    $db_quota{"admin"}=0;
    open(USERPROTOKOLL,"$DevelConf::protokoll_datei") 
        || die "Fehler:  $DevelConf::protokoll_datei nicht gefunden!  $!";
    while(<USERPROTOKOLL>){
      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
      ($a,$a,$login,$a,$a,$a,$a,$a,$a,$a,$a,$a,$quotastring)=split(/;/);
      #print "$login:  $quotastring \n";
      $db_quota{$login}=$quotastring;
    }
    return %db_quota;
}




# EOF
