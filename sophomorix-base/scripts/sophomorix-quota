#!/usr/bin/perl -w
# $Id$
# Dieses Script (sophomorix-quota) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Quota;
use Getopt::Long;
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
Getopt::Long::Configure ("bundling");
use DBI;
use Net::LDAP;
use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    check_connections
                                    get_sys_users
                                    update_user_db_entry
                                    user_reaktivieren
                                    user_deaktivieren
                                    pg_get_group_list
                                    db_connect
                                    db_disconnect
                                   );

my $linuxmusterscriptsdir = "/usr/share/linuxmuster/scripts";

&check_connections();

# Liste der Filesysteme auf denen Quota gesetzt werden
my @quota_fs=&get_quota_fs_liste();

# last user that was modified
my $last_user="";

# ===========================================================================
# Anzahl quotierte Dateisysteme ermitteln
# ==========================================================================
my $quota_fs_num = &get_quota_fs_num();


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $noninteractive=0;
my $info=0;
my $loginname="";
my $classes="";
my $pupil=0;
my $rooms="";
my $ws=0;
my $force=0;
my $sum=0;
my $system=0;
my $all=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "login|user|u|l=s" => \$loginname,
           "class|klasse|c|k=s" => \$classes,
           "pupil|pupils" => \$pupil,
           "room|=s" => \$rooms,
           "workstations|workstation|ws" => \$ws,
           "force" => \$force,
           "all|allusers" => \$all,
           "test|t" => \$DevelConf::testen,
           "sum" => \$sum,
           "verbose|v+" => \$Conf::log_level,
           "help|h" => \$help,
           "noninteractive" => \$noninteractive,
           "system|s" => \$DevelConf::system,
           "info|i" => \$info
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);


# check if I have to ...
if($Conf::use_quota ne "yes" and $noninteractive==0){
  # ... abort
  print "\nsophomorix.conf says:  You don't want to use quota.\n\n";
  print "Set  \$use_quota=\"yes\"  in sophomorix.conf to use quota.\n\n";
  print "For more information:  man sophomorix-quota \n\n";
  exit;
} elsif ($Conf::use_quota ne "yes" and $noninteractive==1){
  # ... or do nothing
  &titel("sphomorix-quota: Not Setting quota ... \$use_quota=\"no\"");
  exit; 
}


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-quota sets quota for users

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  -t  / --test
  --sum
  -l  login1, ... / --login login1, .../ -u login1, ... / --user login1, ...
  -c class / --class class 
  --pupils
  -r room / --room room
  --workstations
  -s  / --system (untested, on your own risk!)

Please see the sophomorix-quota(8) man page for full documentation
');
   print "\n";
   exit;
}


# --info
if ($info==1) {
   my $fs="";
   my $i=0;
   my $j=0;
   my $l=0;
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   my @mb_liste=();

   # automatisch oder Liste in sophomorix.conf
   if ($Conf::quota_filesystems[0] eq "auto" && 
      not $Conf::quota_filesystems[2] ) {
      # "auto" in sophomorix.conf
      print "The following usrquota filesystems were found by $scriptname\n";
      print "on this server:\n\n";
    } else {
      # Liste in sophomorix.conf angegeben
      print "WARNING: You have manually configured the usrquota filesystems\n"; 
      print "in sophomorix.conf. \n\nYou should know what you are doing!\n\n";
    }

   # Tatsächlich benutzte Liste ausgeben
   foreach $fs (@quota_fs) {
     $i=$i+1;
     print"  Filesystem $i:    $fs\n";
   }

   print "\n";
   if ($quota_fs_num>1) {
       print "The order of the $quota_fs_num filesystems "; 
       print "is important!\n\n";
   }
   print "I.e.: To set the Standard-Quota for all pupils on your host,\n";
   print "you must have a line like this in ${DevelConf::config_pfad}/quota.txt:\n\n";
   print "   standard-schueler:";
   
   # Beispiel angeben
   foreach $fs (@quota_fs) {
     $j=$j+1;
     my $mb=30;
     if (not $j==1){
         print "+";
     }
     $mb=$mb*$j;
     print"$mb";
     push (@mb_liste, $mb);
   }

   print "\n\nThis line in quota.txt would set the following usrquota:\n\n";
   
   # Ergebnis angeben
   foreach $fs (@quota_fs) {
     $l=$l+1;
     print"  Filesystem ${l}:    $fs     to $mb_liste[${l}-1] MB\n";
   }

   print "\n\n";
   exit;
}




&titel("Calculating usrquota/mailquota ... (this may take a while)");

# 
my %login_type = &login_type();
if($Conf::log_level>=2){
   &print_hash(\%login_type,"","Login:","Type:")
}



my ($ref_db_quota,$ref_db_quota_mail) = &get_db_quota();
my %db_quota = %$ref_db_quota;
my %db_quota_mail = %$ref_db_quota_mail;
if($Conf::log_level>=2){
    &print_hash(\%db_quota,"","Login:","Quota in DB:");
    &print_hash(\%db_quota_mail,"","Login:","MailQuota in DB:");
}


my ($ref_teacher_quota,$ref_teacher_quota_mail) = &get_teacher_quota();
my %teacher_quota = %$ref_teacher_quota;
my %teacher_quota_mail = %$ref_teacher_quota_mail;
if($Conf::log_level>=2){
    &print_hash(\%teacher_quota,"","Teacher:","Quota in DB:");
    &print_hash(\%teacher_quota_mail,"","Teacher:","MailQuota in DB:");
}


my %quota_txt = &get_quota_txt();
if($Conf::log_level>=2){
    &print_hash(\%quota_txt,"","quota.txt:","Quota:");
}
my %mail_quota_txt = &get_mail_quota_txt();
if($Conf::log_level>=2){
    &print_hash(\%mail_quota_txt,"","mailquota.txt:","MailQuota:");
}


my ($ref_class_quota,$ref_class_quota_mail) = &get_class_quota();
my %class_quota = %$ref_class_quota;
my %class_quota_mail = %$ref_class_quota_mail;
if($Conf::log_level>=2){
    &print_hash(\%class_quota,"","Adminclass:","Quota:");
    &print_hash(\%class_quota_mail,"","Adminclass:","MailQuota:");
}

my ($ref_projects_add_quota,$ref_projects_add_quota_mail) 
    = &get_projects_add_quota();
my %projects_add_quota = %$ref_projects_add_quota;
my %projects_add_quota_mail = %$ref_projects_add_quota_mail;
if($Conf::log_level>=2){
    &print_hash(\%projects_add_quota,"","Project:","AddQuota:");
    &print_hash(\%projects_add_quota_mail,"","Project:","AddMailQuota:");
}


&titel("Searching for users with changed quota/mailquota...");


if ($loginname ne "" or $classes ne "" or $pupil!=0 or $rooms ne "" or $ws!=0){
    # create the list of users
    my @userlist=();
    &titel("Creating a userlist from options ...");
    if ($force==1){
        @userlist=&create_userlist($loginname,$classes,$pupil,$rooms,$ws,0);
    } else {
        # check the users
        @userlist=&create_userlist($loginname,$classes,$pupil,$rooms,$ws,1);
    }
    if ($#userlist+1==0 and $sum==0){
         print "INFO: No valid users given\n";
         $help=1;
    }
    &titel("Setting Quota for users in the userlist ...");
    # setting quota for every user
    foreach my $user (@userlist){
        my ($new_quota,$mailquota)=&get_quota($user);
        ##### quota
        my @q_list = &check_quotastring($quota_fs_num,$new_quota);
        if ($q_list[0]!=-3){
            if($Conf::log_level==1){
                print "   Setting quota of user $user to @q_list\n";
            }
	    &set_quota($system,$user,\@quota_fs,\@q_list);
        } else {
	    print "ERROR: $new_quota is not correct, skipping ...\n";
        }
        ##### mailquota
        # check the new quotastring ???? must be integer
	&set_mail_quota($user,$mailquota);
    }
} else {
   # ohne optionen
   &set_quota_if_needed($all);
}


# ===========================================================================
# subs
# ===========================================================================

# set the quota fot that user
# system=0 -> use perl modul, system=1 -> use setquota 
sub set_quota {
   my ($system,$user,$quota_fs, $q_list)=@_;
   my $quota="";
   my $fs="";
   my $j=0;
   my $uid=-1;
   my $quota_befehl="";
   my ($q_opt1,$q_opt3,$q_opt4)=("","","");
   # for every fs in
   for ($j=0; $j < @$quota_fs; $j++){

      # Aus der Listenreferenz das j-te Element herausnehmen
      $quota = $q_list->[$j];
      $fs = $quota_fs->[$j];

      # ??? Leerzeichen aus quota entfernen und return abschneiden
      chomp($quota);
      $quota=~s/ //g;

      # Softlimit ca. 20% unter Hardlimit
      $q_opt1=$quota-int($quota/5);
      # 80% des Hardlimits
      $q_opt3=80*$quota;
      # Wenn Dateien durchschnittlich unter 10kB/Datei gibts Probleme
      $q_opt4=100*$quota;

      # user-ID ermitteln
      ($a,$a,$uid)=getpwnam("$user");

      # Ausgeben der ermittelten werte
      if($Conf::log_level>=3){
         print("  Quotastring:       ${quota}\n");
         print("  Device:            ${fs}\n");
         print("  User:              ${user}\n");
         print("  UserID:            $uid\n");
         print("  Block-Softlimit:   ${q_opt1}000  \n");
         print("  Block-Hardlimit:   ${quota}000  \n");
         print("  Inode-Softlimit:   ${q_opt3}     \n");
         print("  Inode-Hardlimit:   ${q_opt4}     \n");
      }
      # Mit setquota die Quota der user tatsächlich anpassen
      if (not $DevelConf::system==1){
         # Quota-Modul benutzen
         if(not $DevelConf::testen==1) {
            # do it
            Quota::setqlim($fs,$uid,"${q_opt1}000","${quota}000",$q_opt3,$q_opt4);
	 } else {
            # test
            print "  Test (quota are not set!): \n";
         }
            print "   Setting quota ($fs, uid $uid): "; 
            print "${q_opt1}000 ${quota}000 $q_opt3 $q_opt4 \n";
      } else {
         # Systembefehl benutzten
         $quota_befehl="setquota -u ${user} ${q_opt1}000 ".
                       "${quota}000 ${q_opt3} ${q_opt4} ${fs}";
         if(not $DevelConf::testen==1) {
            # do it
            system("${quota_befehl}")
         } else {
            # test
            print "  Test (quota are not set!): \n";
         }
         print("   Quota command: ${quota_befehl}","\n");
      } 
   }
   # was gemacht wurde zusammensetzen
   my $quotastring=join "+", @$q_list;
   # skip updating postgres, when user is admin ?????????
#   if ($user ne "administrator"
#       or $user ne "pgmadmin"
#       or $user ne "wwwadmin"
#       or $user ne "www-data"
#      ){
      &update_user_db_entry($user,"Quota=$quotastring");
#   }
}






# check for which users quota must be updated in the database. 
# if yes: call set_quota for each user
sub set_quota_if_needed {
    my ($all) = @_; 
    my $new_quota="";
    my $mailquota;
    my $count=0;
    while ( my ($login, $type) = each(%login_type)) {
        if($Conf::log_level>=2){
            print "$login is type $type \n";
        }
        if ($type eq "domcomp" or $type eq "workstation"){
            # ????????????????????
            print "   Not setting quota for $login\n";
            # not setting quota for machine accounts and workstation accounts
	    next;
        }
        ($new_quota,$mailquota)=&get_quota($login);


        ##### quota
        if($Conf::log_level>=2){
	    print "   New Quota: $new_quota \n";
        }
        if ($new_quota eq $db_quota{$login} and $all==0){
           #do nothing
        } else {
           $count++;
           print "User $count: $login \n";
           if($Conf::log_level>=2){
               print "  New quota: $new_quota \n";
               print "  Database : $db_quota{$login}\n";
           }
           # check the new quotastring
           my @q_list = &check_quotastring($quota_fs_num,$new_quota);
           if ($q_list[0]!=-3){
	       &set_quota(0,$login,\@quota_fs,\@q_list);
               # remember login of user
	       $last_user=$login;
           } else {
	       print "ERROR: $new_quota is not correct, skipping ...\n";
           }
        }


        ##### mailquota
        if($Conf::log_level>=2){
	    print "   New MailQuota: $mailquota \n";
        }
        if ($mailquota eq $db_quota_mail{$login} and $all==0){
           #do nothing
        } else {
	   if ($login ne $last_user){
              $count++;
              print "User $count: $login \n";
	   }
           if($Conf::log_level>=2){
               print "   New MailQuota: $mailquota \n";
               print "   Database : $db_quota_mail{$login}\n";
           }
           # check the new quotastring ???? must be integer
	   &set_mail_quota($login,$mailquota);
        }
        # mailquota
    }
}




sub set_mail_quota {
    my ($login,$mailquota) = @_;
    my $cyrus=0;
    print "   Setting MailQuota of $login to $mailquota MB\n";
    if (-s "$linuxmusterscriptsdir/cyrus-user.pl") {
       # if it is bw musterloesung
       $cyrus=1;
       system("$linuxmusterscriptsdir/cyrus-user.pl -u $login -q ${mailquota}m");
# ????????
#    } elsif (-s "/usr/lib/linuxmuster/bin/cyrus-user.pl") {
#       # other systems with cyrus
#       $cyrus=1;
#       system("/usr/lib/linuxmuster/bin/cyrus-user.pl -u $login -q ${mailquota}m");
    }

    if ($cyrus==0){
	print "   ERROR: No cyrus-imap script to set mailquota. Skipping ...\n";
    }

    # update the database
#    if ($login ne "administrator"
#        or $user ne "pgmadmin"
#        or $user ne "wwwadmin"
#        or $user ne "www-data"
#       ){
       &update_user_db_entry($login,"MailQuota=$mailquota");
#    }
} 



# create hash with teacher_quota
sub get_teacher_quota {
   my $login="";
   my $quotastring="";
   my $mailquota="";
   my %teacher_quota=();
   my %teacher_quota_mail=();
   open(TEACHER,"${DevelConf::users_pfad}/lehrer.txt") || die "Fehler: $!";
   while(<TEACHER>){
      chomp();
      s/\s//g; # Whitespace Entfernen
      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      ($a,$a,$a,$a,$login,$a,$a,$quotastring,$mailquota)=split(/;/);
      # Wenn Quotaangabe vorhanden, dann benutzen
      if($quotastring ne "quota"){
         $teacher_quota{$login}=$quotastring;
      }
      if($mailquota ne "mailquota"){
         $teacher_quota_mail{$login}=$mailquota;
      }
   }
   close(TEACHER);
   return (\%teacher_quota,\%teacher_quota_mail);
}




# hash: login -> type(pupil,teacher,workstation)
sub login_type {
    my %login_type=();
    my %login_type_new=();
    my $login="";
    my $home="";

    # add admin, because it is not in user_db
    #$login_type{"admin"}="admin";
    # others
    my $dbh=&db_connect();
    # select the columns that i need
    my $sth= $dbh->prepare( "SELECT uid,homedirectory
                            FROM userdata 
                           " );
    $sth->execute();
    my $array_ref = $sth->fetchall_arrayref();
    foreach my $row (@$array_ref){
       # split the array, to give better names
       my ($uid,$home)=@$row;
       if($home=~/^$DevelConf::homedir_pupil/){
          $login_type{$uid}="student";
       } elsif($home=~/^$DevelConf::homedir_ws/){
          $login_type{$uid}="workstation";
       } elsif($home=~/^$DevelConf::homedir_teacher/){
          $login_type{$uid}="teacher";
       } elsif($home=~/dev\/null/){
          $login_type{$uid}="domcomp";
       }
    }
    &db_disconnect($dbh);
#    setpwent();
#    while(($login,$a,$a,$a,$a,$a,$a,$home)=getpwent()) {
#        if($home=~/^$DevelConf::homedir_pupil/){
#           $login_type{$login}="student";
#        } elsif($home=~/^$DevelConf::homedir_ws/){
#           $login_type{$login}="workstation";
#        } elsif($home=~/^$DevelConf::homedir_teacher/){
#           $login_type{$login}="teacher";
#        } elsif($home=~/dev\/null/){
#           $login_type{$login}="domcomp";
#        }
#    }
#    endpwent();
    return %login_type;
}




# calculates the quota of the user login
sub get_quota{
    my ($login) = @_;
    my @groups = &pg_get_group_list($login);
    my $pri_group=shift(@groups);
#    if (not defined $pri_group){
#       # ????? necessary when admin is in ldap
#       # for admin, ...
#       $pri_group = `id -n -g $login`;
#       chomp($pri_group);
#    }
    if($Conf::log_level>=2){
        print "   Primary Group:    $pri_group \n";
        print "   Secondary Groups: @groups \n";
    }


    ##### quota
    my $quotastring="";
    if (exists $quota_txt{$login}){
        # look in quota.txt
        $quotastring=$quota_txt{$login};
	print "   Found quota.txt quota: $quotastring\n" if($Conf::log_level>=2);
    } elsif (exists $teacher_quota{$login}){
        # look in teacher.txt
        $quotastring=$teacher_quota{$login};
	print "   Found lehrer.txt quota: $quotastring\n" if($Conf::log_level>=2);
    } elsif (exists $class_quota{$pri_group}){
        # look in class
        $quotastring=$class_quota{$pri_group};
	print "   Found quota for class $pri_group: $quotastring\n" 
        if($Conf::log_level>=2);
    } else {
        # take standard values
        if ($login_type{$login} eq "student"){
	    $quotastring=$quota_txt{"standard-schueler"};
        } elsif ($login_type{$login} eq "teacher"){
	    $quotastring=$quota_txt{"standard-lehrer"};
        } elsif ($login_type{$login} eq "workstation"){
	    $quotastring=$quota_txt{"standard-workstations"};
        }
    }
    foreach my $group (@groups){
        print "   Checking for additional quota of ",
              "project $group \n" if($Conf::log_level>=2);
        if (exists $projects_add_quota{$group}){
        print "   Adding $projects_add_quota{$group}\n" if($Conf::log_level>=2);
        $quotastring = &quota_addition($projects_add_quota{$group},$quotastring);
        }
    }


    #####  mailquota
    my $mailquota=0; 
    if (exists $mail_quota_txt{$login}){
        # look in mailquota.txt
        $mailquota=$mail_quota_txt{$login};
	print "   Found mailquota.txt mailquota: $mailquota\n" if($Conf::log_level>=2);
    } elsif (exists $teacher_quota_mail{$login}){
        # look in teacher.txt
        $mailquota=$teacher_quota_mail{$login};
	print "   Found lehrer.txt mailquota: $mailquota\n" if($Conf::log_level>=2);
    } elsif (exists $class_quota_mail{$pri_group}){
        # look in class
        $mailquota=$class_quota_mail{$pri_group};
	print "   Found mailquota for class $pri_group: $mailquota\n" 
        if($Conf::log_level>=2);
    } else {
        # take standard values
        if ($login_type{$login} eq "student"){
	    $mailquota=$mail_quota_txt{"standard-schueler"};
        } elsif ($login_type{$login} eq "teacher"){
	    $mailquota=$mail_quota_txt{"standard-lehrer"};
        } elsif ($login_type{$login} eq "workstation"){
	    $mailquota=$mail_quota_txt{"standard-workstations"};
        }
    }
    foreach my $group (@groups){
        print "   Checking for additional mailquota of ",
              "project $group \n" if($Conf::log_level>=2);
        if (exists $projects_add_quota_mail{$group}){
        print "   Adding $projects_add_quota_mail{$group}\n" if($Conf::log_level>=2);
        $mailquota = $mailquota+$projects_add_quota_mail{$group};
        }
    }
    return ($quotastring,$mailquota);
}





# hash login -> additional quota
sub get_projects_add_quota {
    my %projects_add_quota=();
    my %projects_add_quota_mail=();
    my $dbh=&db_connect();
    my $sth;
    $sth = $dbh->prepare("SELECT gid,addquota,addmailquota FROM projectdata");
    $sth->execute();
    while (my $row = $sth->fetchrow_hashref) {
       if(not defined $row->{'addquota'}){
           next;
       } elsif($row->{'addquota'} ne "quota" and $row->{'addquota'} ne "0"){
          $projects_add_quota{ $row->{'gid'} } = $row->{'addquota'}; 
       }
       if(not defined $row->{'addmailquota'}){
           next;
       } elsif($row->{'addmailquota'} ne "quota" and $row->{'addmailquota'} ne "0"){
          # ????????????????????
          $projects_add_quota_mail{ $row->{'gid'} } = $row->{'addmailquota'}; 
       }
    }
    $sth->finish();
    &db_disconnect($dbh);
    return (\%projects_add_quota,\%projects_add_quota_mail);
}





# hash: class -> quota 
sub get_class_quota {
    my $class="";
    my %class_quota=();
    my %class_quota_mail=();
    my $dbh=&db_connect();
    my $sth;
    $sth = $dbh->prepare("SELECT gid,quota,mailquota FROM classdata");
    $sth->execute();
    while (my $row = $sth->fetchrow_hashref) {
       if(not defined $row->{'quota'}){
           next;
       } elsif($row->{'quota'} ne "quota"){
          $class_quota{ $row->{'gid'} } = $row->{'quota'}; 
       }
       if(not defined $row->{'mailquota'}){
           next;
       } elsif($row->{'mailquota'} ne "quota"){
          # ??????? not defined means standard ??????????
          $class_quota_mail{ $row->{'gid'} } = $row->{'mailquota'}; 
       }
    }
    $sth->finish();
    &db_disconnect($dbh);
    return (\%class_quota,\%class_quota_mail);
}





# hash: login -> quota  (login can be also: standard-*) 
sub get_quota_txt {
   my %quota_txt=();
   my $user="";
   my $quotastring="",
   open(QUOTATXT,"${DevelConf::config_pfad}/quota.txt") || die "Fehler: $!";
   while(<QUOTATXT>){
      chomp();
      s/\s//g; # Whitespace Entfernen
      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      # user von sollquota splitten
      ($user,$quotastring)=split(/:/);
      $quota_txt{$user}=$quotastring;
   }
   close(QUOTATXT);
   # Rückgabe-Hash enthält standard-quota UND Einzel-Quota
   return %quota_txt;
}



# hash: login -> quota  (login can be also: standard-*) 
sub get_mail_quota_txt {
   my %mail_quota_txt=();
   my $user="";
   my $quotastring="",
   open(MAILQUOTATXT,"${DevelConf::config_pfad}/mailquota.txt") || die "Fehler: $!";
   while(<MAILQUOTATXT>){
      chomp();
      s/\s//g; # Whitespace Entfernen
      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      # user von sollquota splitten
      ($user,$quotastring)=split(/:/);
      $mail_quota_txt{$user}=$quotastring;
   }
   close(MAILQUOTATXT);
   # Rückgabe-Hash enthält standard-quota UND Einzel-Quota
   return %mail_quota_txt;
}




# hash: login -> quotastring in the sophomorix database(user_db)
sub get_db_quota {
    my $login="";
    my $quotastring="";
    my $sophomorixstatus="";
    my %db_quota=();
    my %db_quota_mail=();
#    $db_quota{"admin"}=0;
#    $db_quota_mail{"admin"}=0;

    my $dbh=&db_connect();

    # select the columns that i need
    my $sth= $dbh->prepare( "SELECT uid,quota,mailquota,sophomorixstatus 
                             FROM userdata" );
    $sth->execute();

    my $array_ref = $sth->fetchall_arrayref();

    foreach my $row (@$array_ref){
       my ($login,$quotastring,$mailquota,$sophomorixstatus) = @$row;
       if (defined $sophomorixstatus){
          $db_quota{$login}=$quotastring;
          $db_quota_mail{$login}=$mailquota;
       } else {
          # not a sophomorix user
       }
    }
    &db_disconnect($dbh);
    return (\%db_quota,\%db_quota_mail);
}




# EOF
