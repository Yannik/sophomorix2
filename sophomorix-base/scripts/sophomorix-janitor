#!/usr/bin/perl -w
# $Id$
# This script (sophomorix-janitor) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@gmx.de


# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
use Sophomorix::SophomorixPgLdap;
use Time::Local;
use Time::localtime;
use Term::ANSIColor qw(:constants); # farbiger Text RED, BLUE, ...
use Date::Calc qw(check_date);

use DBI;
use Net::LDAP;

use File::Find;

use File::Basename;

my @arguments = @ARGV;

# Scriptname ermitteln
my @list = split(/\//,$0);
my $scriptname = pop @list;

# nach jedem Printbefehl wieder auf Standardfarbe zurücksetzen
$Term::ANSIColor::AUTORESET = 1;
#use Sophomorix::SophomorixPgLdap qw(get_sys_users
#                                   );

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
$Conf::log_level=1;
my $help=0;
my $info=0;
my $login="";
my $uid=0;
my $listfiles=0;
my $list_db_junk=0;
my $kill_db_junk=0;
my $check_project_members=0;

my $list_foreign_files=0;
my $check_horde=0;
my $dump_pg_ldap=0;


my @userlist=();
my $classes="";
my $projects="";
my $student=0;
my $teacher=0;
my $administrator=0;
my $rooms="";
my $ws=0;
my $check=1;


# %future_members will be compared to the table groups_users
# key:    gidnumber
# value:  memberuidnumber
my %future_members=();



# ???????
my $list_files_path="/var/log/sophomorix/list_files";
system("mkdir -p $list_files_path");

# Parsen der Optionen
my $testopt=GetOptions(
           "verbose|v+" => \$Conf::log_level,
           "user|users|u=s" => \$login,
           "class|classes|c=s" => \$classes,
           "project|projects|p=s" => \$projects,
           "student|students|s" => \$student,
           "teacher|teachers|t" => \$teacher,
           "administrator|administrators" => \$administrator,
           "room|rooms|r=s" => \$rooms,
           "workstations|workstation|w" => \$ws,
           "uid=i" => \$uid,
           "list-db-junk" => \$list_db_junk,
           "kill-db-junk" => \$kill_db_junk,
           "list-foreign-files" => \$list_foreign_files,
           "check-horde" => \$check_horde,
           "dump-pg-ldap" => \$dump_pg_ldap,
           "check-project-members" => \$check_project_members,
           "info|i" => \$info,
           "help|h" => \$help,
          );

# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);

# --help
if ($help==1) {
   # Befehlbeschreibung
   print "\n$scriptname does some housekeeping:\n";

   print('
Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose

Housekeeping the postgres database ldap:

  --list-db-junk
  --kill-db-junk

Working on users files:

  --listfiles --user name (tut nicht!)
  --listfiles --uid uidnumber (tut nicht) 

  --list-foreign-files (List files/dirs in home of user, that are not owned by user)

  --check-horde (checks horde3 database (Table horde_prefs) for obsolete entries)

  --dump-pg-ldap (dumps the postgresql database ldap)

Selecting users (Default is: no user)
  -s / --students
  --class teachers  (teachers)
  -w / --workstations
  -u user1,user2,...   /  --users user1,user2,...
  -c class1,class2,... /  --class class1,class2,... 
  -p project1,project2,... /  --project project1,project2,... 
  -r room1,room2,...   /  --room room1,room2,...


Please see the sophomorix-janitor(8) man pages for full documentation
');
   print "\n";
   exit;
}



# ===========================================================================
# script starts here
# ===========================================================================


# userlist according to options
@userlist=&create_userlist($login,$classes,0,$projects,0,$student,
                               $rooms,$ws,$administrator,$check);

# --info
if ($info==1){
    foreach my $login (@userlist){
        print "$login\n";
    }
    exit;
}



# --list-db-junk / --kill-db-junk
if ($list_db_junk==1 or $kill_db_junk==1){
    print "Analyzing ldap database ...\n";
#    &check_connections();
    my $dbh=&db_connect();

    # TEST 1
    print "TEST 1: gids in project_groups must be existing\n";
    my %gid_db=();
    my @gid_db=();
    my $sth= $dbh->prepare( "SELECT projectid,membergid from project_groups" );
    $sth->execute();
    my $array_ref = $sth->fetchall_arrayref();
    foreach my $row (@$array_ref){
        # split the array, to give better names
        my ($project_id,$gid)=@$row;
        if (not exists $gid_db{$gid}){
            $gid_db{$gid}="seen";
            push @gid_db, $gid;
        }
        #print "   * $gid (project id: $project_id)\n";
    }
    @gid_db = sort @gid_db;
    # test it
    foreach my $gidnumber_test (@gid_db){
        print "* Testing gid $gidnumber_test:\n";
        # fetching gidname
        my ($gid)= $dbh->selectrow_array( "SELECT gid 
                                           FROM groups 
                                           WHERE gidnumber='$gidnumber_test'
                                          ");
        if (defined $gid){
            print "    $gidnumber_test is group $gid\n";
        } else {
            print "    $gidnumber_test is a nonexisting group\n";
            # DELETE
            my $sql="DELETE FROM project_groups WHERE membergid=$gidnumber_test";
            print "  Suggested action for $gidnumber_test:\n";
            print "  $sql\n";
            if ($kill_db_junk==1){
                print "  Do you want to delete $gidnumber_test with the SQL command? y/n\n";
                my $do_it=<>;
                chomp($do_it);
                if($do_it eq "y"){
                   $dbh->do($sql);

                } else {
                    print "Skipping deletion of group $gidnumber_test\n";
                }
            }
        }
    }
    # TEST 2
    # follows here


    &db_disconnect($dbh);
    exit;
}





# --list-foreign-files
if ($list_foreign_files==1){
    foreach my $login (@userlist){
        my ($home) = &fetchdata_from_account($login);
        #print "Looking for foreign files of $login in $home ...\n";
        my $prune= "-path $home/${Language::to_handoutcopy_dir} -prune -o".
                  " -path $home/${Language::share_dir} -prune -o".
                  " -path $home/${Language::handoutcopy_dir} -prune -o".
                  " -path $home/${Language::collect_dir} -prune -o".
                  " -path $home/${Language::collected_dir} -prune -o".
                  " -path $home/${Language::task_dir} -prune -o". 
                  " -path $home/${Language::handout_dir} -prune -o".
      	      #    " -path $home/${Language::user_attic}/mailsync -prune -o".
      	          " -path $home/.Trash-* -prune -o";
        system ("find $home $prune ! -user $login -printf \"%u\t%g\t%p\n\"");
    }
    exit;
}


# --check-horde
if ($check_horde==1){
    my %horde_users=();
    my $database="horde";
    my $hostname="localhost";
    my $password=&get_horde_password();

    my $dsn = "DBI:mysql:database=$database;host=$hostname";
    my $dbh = DBI->connect($dsn, "horde",$password);
    print "Checking horde database for obsolete stuff\n";
    my $sth = $dbh->prepare( "SELECT pref_uid FROM horde_prefs");

    $sth->execute();
    my $array_ref = $sth->fetchall_arrayref();
    foreach my $row (@$array_ref){
	my ($uid)=@$row;
        $horde_users{$uid}="seen";
	#print "$uid\n";
    }


    while(my ($uid, $value) = each(%horde_users)) {
	my $return=system("id $uid > /dev/null");
        if ($return!=0){
        print "id returned $return\n";
        print "  User $uid ninexisting in system\n"; 
       }
    }

    $dbh->disconnect();
    exit;
}


# --dump-pg-ldap
if ($dump_pg_ldap==1){
    my $timestamp=&zeit_stempel;
    print "Timestamp: $timestamp\n";
    &backup_user_database($timestamp, "janitor.sql","JANITOR");
    exit;
}


sub pro_name {
    my ($id)=@_;
    my $dbh=&db_connect();
    my ($name)= $dbh->selectrow_array( "SELECT gid 
                                         FROM projectdata 
                                         WHERE id=$id
                                        ");
    &db_disconnect($dbh);
    return $name;
}


sub user_name_from_id {
    my ($uid) = @_;
    my $username = getpwuid($uid);
    return $username;
}


sub update_future_members {
    my ($gidnumber,$uidnumber,$reason) = @_;
    if (exists $future_members{$gidnumber}{$uidnumber}){
        print "          uid $uidnumber exists.",
              " Updating reason:\n";
        # fetching old_reason
        my $oldreason=$future_members{$gidnumber}{$uidnumber};
        my $newreason="";
        $newreason=$oldreason.",".$reason;
        print "          $oldreason -> $newreason\n";
        $future_members{$gidnumber}{$uidnumber}="$newreason";
    } else {
        print "          uid $uidnumber missing.".
              " Creating entry.\n";
        $future_members{$gidnumber}{$uidnumber}="$reason";
   }
}


sub group_name_from_id {
    my ($gid) = @_;
    my ($groupname) = getgrgid($gid);
    return $groupname;
}



# --check-project-members
if ($check_project_members==1){
    print "Checking ALL project memberships ...\n";

    # save this in a hash to avoid multiple database queries
    my %projectid_gidnumber=();


    # %current_members is the table groups_users
    # key:    gidnumber
    # value:  memberuidnumber
    my %current_members=();

    # %memberrelation contains the table projects_memberprojects
    # key:   projectID 
    # value: memberprojectIDs
    my %memberrelation=();

    my $dbh=&db_connect();

    # read current members
    my $sth0= $dbh->prepare( "SELECT groups_users.gidnumber,
                                     groups_users.memberuidnumber
                              FROM groups_users
                              JOIN projectdata 
                              ON projectdata.gidnumber = groups_users.gidnumber
                              ORDER BY gidnumber
                           ");
    $sth0->execute();
    my $array_ref0 = $sth0->fetchall_arrayref();
    foreach my $row (@$array_ref0){
        my ($gidnumber,$memberuidnumber)=@$row;
        $current_members{$gidnumber}{$memberuidnumber}="seen";
    }


    my $sth= $dbh->prepare( "SELECT id,gid,gidnumber,longname,maxmembers 
                             FROM projectdata 
                             ORDER BY gid");
    $sth->execute();
    my $array_ref = $sth->fetchall_arrayref();
    foreach my $row (@$array_ref){
        my ($id,$gid,$gidnumber,$longname,$maxmembers)=@$row;
        $projectid_gidnumber{$id}=$gidnumber;
        # nn
        print "$id, $gid, $longname, $gidnumber, $maxmembers\n";       


        # 1) adding admins
        my $sth1= $dbh->prepare( "SELECT uidnumber
                             FROM projects_admins 
                             WHERE projectid=$id");
        $sth1->execute();
        my $array_ref1 = $sth1->fetchall_arrayref();
        foreach my $row (@$array_ref1){
            my ($uidnumber)=@$row;
            # nn
            my $user=&user_name_from_id($uidnumber);
            print "   * $uidnumber ($user) is admin in $gidnumber ($gid)\n";
            #$future_members{$gidnumber}{$uidnumber}="admin";
            &update_future_members($gidnumber,
                                   $uidnumber,
                                   "admin");
        }


        # 2) adding members_by_option
        my $sth2= $dbh->prepare( "SELECT memberuidnumber
                             FROM projects_members 
                             WHERE projectid=$id");
        $sth2->execute();
        my $array_ref2 = $sth2->fetchall_arrayref();
        foreach my $row (@$array_ref2){
            my ($uidnumber)=@$row;
            # nn
            my $user=&user_name_from_id($uidnumber);
            print "   * $uidnumber ($user) is MemberByOption in $gidnumber ($gid)\n";
            #$future_members{$gidnumber}{$uidnumber}="MemberByOption";
            &update_future_members($gidnumber,
                                   $uidnumber,
                                   "MemberByOption");
        }


        # 3) adding members by class(group)
        my $sth3= $dbh->prepare( "SELECT membergid
                             FROM project_groups 
                             WHERE projectid=$id");
        $sth3->execute();
        my $array_ref3 = $sth3->fetchall_arrayref();
        foreach my $row (@$array_ref3){
            my ($membergid)=@$row;
            # nn
            my $group=&group_name_from_id($membergid);
            print " * $membergid ($group) is MemberByClass in $gid\n";
            # A) Adding Teachers
            my $sth3a= $dbh->prepare( "SELECT memberuidnumber
                                 FROM groups_users 
                                 WHERE gidnumber=$membergid");
            $sth3a->execute();
            my $array_ref3a = $sth3a->fetchall_arrayref();
            foreach my $row (@$array_ref3a){
                my ($uidnum)=@$row;
                # nn
                my $user=&user_name_from_id($uidnum);
                print "   * $uidnum ($user) is MemberByClass in $membergid ($group)\n";

                #$future_members{$gidnumber}{$uidnum}="MemberByClass";
                &update_future_members($gidnumber,
                                       $uidnum,
                                       "MemberByClass");
            }
            # B) Adding Students (primary group)
            my $sth3b= $dbh->prepare( "SELECT uid,uidnumber
                                FROM userdata
                                WHERE gidnumber=$membergid");
            $sth3b->execute();
            my $array_ref3b = $sth3b->fetchall_arrayref();
            foreach my $row (@$array_ref3b){
                my ($uid,$uidnum)=@$row;
                print "   * $uidnum ($uid) is MemberByClass in $membergid ($group)\n";
                #$future_members{$gidnumber}{$uidnum}="MemberByClass";
                &update_future_members($gidnumber,
                                       $uidnum,
                                       "MemberByClass");

            }
        }


        # 4) Step1 (projectmembers) Save Project -> Memberprojects 
        my $sth4= $dbh->prepare( "SELECT memberprojectid
                             FROM projects_memberprojects 
                             WHERE projectid=$id");
        $sth4->execute();
        my $array_ref4 = $sth4->fetchall_arrayref();
        foreach my $row (@$array_ref4){
            my ($memberprojectid)=@$row;
            # nn
            print "  * $memberprojectid (ProjectID)\n";
            $memberrelation{$id}{$memberprojectid}="seen";
        }
    }


    my $i=0;
    my @update_order=();
    my @delete=();
    my $count=0;

    until (keys %memberrelation == 0){
        # CAREFUL: do not modify the hash that you are 
        # using as a loop!
        $count++;
        print "############### Run $count ###############\n";

        # find, what can be deleted in this step
        while (my ($topkey,$topvalue) = each %memberrelation){
            print "$topkey --> $topvalue\n";
            while (my ($key,$value) = each %{ $memberrelation{$topkey} }){
                print "   $key --> $value\n";
                if (not exists $memberrelation{$key}){
                    print "    * $key is not on toplevel:\n";
                    print "      Add members of project $key to $topkey\n";
                    # get gidnumber of project
                    my $gidnumber_fetch=$projectid_gidnumber{$key};
                    my $gidnumber_push=$projectid_gidnumber{$topkey};

                    # future members of project $key
                    while (my ($memberuid,$reason) = 
			   each %{ $future_members{$gidnumber_fetch} }){
                        print "        * $memberuid is in $gidnumber_fetch ($reason)\n";
                        &update_future_members($gidnumber_push,
                                               $memberuid,
                                               "ByMemProject");
                    }
                    push @update_order, "${key}->${topkey}";
                    push @delete, "$topkey,$key";
	        }
            }
        }
        # END: find, what can be deleted in this step

    
        # delete findings of this step
        print "### Deleting findings or run $count:\n";
        print "  1) Deleting secondlevel keys:\n";
        foreach my $item (@delete){
            my ($topkey,$key)=split(/,/,$item);
            print "     Delete: $topkey --> $key\n";
            my $deleted = delete($memberrelation{$topkey}{$key});
        }

        print "  2) Deleting empty toplevel keys:\n";
        while (my ($topkey,$topvalue) = each %memberrelation){
            if (keys $memberrelation{$topkey} == 0){
                print "     $topkey is empty\n";
                my $deleted = delete($memberrelation{$topkey});
            } else {
                print "   $topkey has elements\n";
            }
        }
        # END: delete findings of this step


        # list whats left
        print "\n### Thats left:\n";
        while (my ($topkey,$topvalue) = each %memberrelation){
            print "$topkey --> $topvalue\n";
            while (my ($key,$value) = each %{ $memberrelation{$topkey} }){
                print "   $key --> $value\n";
            }
        }
        # END: list whats left
    } # END: until


    &db_disconnect($dbh);
    print "### Update order:\n";
    foreach my $pro (@update_order){
	print "$pro ";
    }
    print "\n... Done after $count runs\n";

    print "\nLook what memberships to add:\n";
    # anzulegen: future hash durchgehen, welche fehlen
    # $gid --> $uid --> whymember($value)
    my $add=0;
    foreach my $gid (keys %future_members) {
         foreach my $uid (keys %{ $future_members{$gid} }) {
             my $value = $future_members{$gid}->{$uid};
              my $user=&user_name_from_id($uid);
              my $group=&group_name_from_id($gid);
             if (exists $current_members{$gid}{$uid}){
                 print "   OK: $gid($group) --> $uid($user) --> $value\n";
             } else {
                 print "  ADD: $gid($group) --> $uid($user) --> $value\n";
                 $add++;
             }
         }
    }
    print "$add users must be added as members\n\n";


    print "\nLook what memberships to delete:\n";
    # delete: current hash durchgehen, welche sind zuviel
    # $gid --> $uid --> whymember($value)
    my $delete=0;
    foreach my $gid (keys %current_members) {
         foreach my $uid (keys %{ $current_members{$gid} }) {
              my $value = $current_members{$gid}->{$uid};
              my $user=&user_name_from_id($uid);
              my $group=&group_name_from_id($gid);
 
              if (exists $future_members{$gid}{$uid}){
                  print "   OK: $gid($group) --> $uid($user) --> $value\n";
              } else {
                  print "  DEL: $gid($group) --> $uid($user) --> $value\n";
                  $delete++;
              }
         }
    }
    print "$delete users must be deleted as members\n\n";


    print "Done\n";
}



# ===========================================================================
# list files and do something
# ===========================================================================
my @dirs=("/home/students/");

if ($uid==0 and $login ne ""){
    # fetch uid of name
    my ($name, $pass, $uid_of_user, $gid)= getpwnam($login);
    if (not defined $uid_of_user){
        print "ERROR: Could not determine uid of user $login\n";
        print "       Please specify a uid\n\n";
        exit;
    } else {
        $uid=$uid_of_user;
    }
}


# --listfiles and --uid or existing user (--user user)
if ($listfiles==1 and $uid!=0 ){
    my $out_file=$list_files_path."/".$login."-dir-list.txt";
    my $out_file_share=$list_files_path."/".$login."-dir-list-share.txt";
    my $out_file_summary=$list_files_path."/".
                         $login."-dir-list-summary.txt";
    my $out_file_tmp=$list_files_path."/".
                         $login."-dir-list-tmp.txt";
    open(SUMMARY, ">$out_file_summary");

    ########## searching $HOME of a user ##########
    # fetching $HOME
    my ($search_dir) = &fetchdata_from_account($login);
    print SUMMARY "##### Ordner im persoenlichen Ordner: #####\n";
    my $search_command="find $search_dir -maxdepth 1 ".
                       "-type d -user $login > $out_file";
    print "Looking for files of user $login with uid $uid:\n",
          "   $search_command\n";
    system($search_command);

    # Performance: 
    #   A) im home eines users(20 GB): ca. 30s
    #      Dateigroesse 6,7 MB, 72.000 Zeilen (1.800 Schreibmaschinenseiten)
    #   B) in /home user mit 20GB: ca: 
    #      Dateigroesse xx MB, x.000 Zeilen ( Schreibmaschinenseiten)
    # langsam
    #    find( \&files_of_uid,  @dirs);
    #    exit;

    # processing out_file
    my $count=-1;
    open(OUT, "<$out_file");
    while(<OUT>){
        my $dir=$_;
        chomp($dir);
        # ignore home
        if ($dir eq $search_dir){
            next;
        }
        # ignore dotfiles (--dotfiles, --nodotfiles) ?????
        if ($dir=~/$search_dir\/\./) {
            #print "Skipping dotfile $dir\n";
            next;
        }
        my $count_files=`find '$dir' -type f | wc -l`;
        my $count_dirs=`find '$dir' -type d | wc -l`;
        chomp($count_files);
        chomp($count_dirs);
        $count_dirs=$count_dirs-1; # ignore ..
        print SUMMARY "   $dir  --->  $count_dirs Ordner ",
                      "/ $count_files Dateien \n";
    }
    close(OUT);


    ########## searching /home/share ##########
    my $search_dir_share = "/home/share";
    print SUMMARY "##### Ordner in den Tausch-Ordnern: #####\n";
    #my $search_command_share="find $search_dir_share -maxdepth 2 ".
    #                   "-type d -user $login > $out_file_share";
    #print "Executing:\n   $search_command_share\n";
    #system($search_command_share);
    print "Looking in $search_dir_share/teachers for dirs:\n";
    system("find ${search_dir_share}/teachers -maxdepth 1 -type d -user $login > $out_file_share");

    print "Looking in $search_dir_share/classes for dirs:\n";
    system("find ${search_dir_share}/classes -maxdepth 2 -type d -user $login >> $out_file_share");

    print "Looking in $search_dir_share/subclasses for dirs:\n";
    system("find ${search_dir_share}/subclasses -maxdepth 2 -type d -user $login >> $out_file_share");

    print "Looking in $search_dir_share/projects for dirs:\n";
    system("find ${search_dir_share}/projects -maxdepth 2 -type d -user $login >> $out_file_share");

    print "Looking in $search_dir_share/exams for dirs:\n";
    system("find ${search_dir_share}/exams -maxdepth 2 -type d -user $login >> $out_file_share");

    print "Looking in $search_dir_share/school for dirs:\n";
    system("find ${search_dir_share}/school -maxdepth 1 -type d -user $login >> $out_file_share");

   # ????? -ignore_readdir_race einfuegen

    my $prune_string="";
    my %prune_hash=();

    my $count_share=-1;
    open(OUT, "<$out_file_share");
    while(<OUT>){
        my $dir=$_;
        chomp($dir);
        my $count_files=`find '$dir' -type f | wc -l`;
        my $count_dirs=`find '$dir' -type d | wc -l`;
        chomp($count_files);
        chomp($count_dirs);
        $count_dirs=$count_dirs-1; # ignore ..
        print SUMMARY "   $dir  --->  $count_dirs Ordner ",
                      "/ $count_files Dateien \n";
        # save dir and prune it in next find
        $prune_string=$prune_string."-path \"$dir\" -prune -o ";
	$prune_hash{$dir}="seen";
    }
    close(OUT);

# find /home/share/teachers/ -path /home/share/teachersopenoffice -prune -type f -user bz -o -print

    print SUMMARY "##### Sonstige Dateien in den Tausch-Ordnern: #####\n";

    #my $search_command_share_files="find $search_dir_share $prune_string ".
    #                   "-type f -user $login -o -print >> $out_file_summary";
    my $search_command_share_files="find $search_dir_share  $prune_string ".
                       "-type f -user $login >> $out_file_tmp";
    print "Looking in $search_dir_share for files:\n",
          "   $search_command_share_files\n";
    system($search_command_share_files);

    # remove pruned dirs from results 
    open(TMP, "<$out_file_tmp");
    while(<TMP>){
        my $line = $_;
        chomp($line);
        if (not exists $prune_hash{$line}){
            print SUMMARY "  $line\n";
        } else {
            # ignored
        }
    }
    close(TMP);

    # tauschdirs:
    # A) dirs suchen mit owner ...
    #    B) darin Anzahl Dateien und Ordner
    # C) alle Dateien suchen, Ordner von A) auslassen

    close(SUMMARY);
    print "--> Summary written to $out_file_summary\n";
    exit;
}



# ===========================================================================
# Subs
# ===========================================================================

sub files_of_user {
    my ($login) = @_;
    # find /home -user bz > bz-files-in-home.log
}

# langsam
sub files_of_uid {
    my ($f_dev, $f_ino, $f_mode, $f_nlink, $f_uid, $f_gid) = lstat($_);
    if ($uid==$f_uid){
        print "$uid $f_uid $File::Find::name\n";
        # do something with $File::Find::name

    }
}

sub get_horde_password {
    my $password="";
    my $conf="/etc/horde/horde3/conf.php";
    if (-e $conf){
        open (HORDECONF,$conf);
        while(<HORDECONF>){
            if (m/password/){
		my $line=$_;
                chomp($line);
                my ($trash,$string)=split(/=/,$line);
                $string=~m/ '([A-Za-z0-9_]+)';/;
                $password=$1;
            }
        }
        close HORDECONF;
    } else {
        print "\nERROR: Retrieving horde password failed:\n";
        print "    $conf nonexisting\n\n";
        exit;
    }
    return $password;
}
