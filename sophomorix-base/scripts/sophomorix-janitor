#!/usr/bin/perl -w
# $Id$
# This script (sophomorix-janitor) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@gmx.de


# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Time::Local;
use Time::localtime;
use Term::ANSIColor qw(:constants); # farbiger Text RED, BLUE, ...
use Date::Calc qw(check_date);

use DBI;
use Net::LDAP;

use File::Find;

use File::Basename;

my @arguments = @ARGV;

# Scriptname ermitteln
my @list = split(/\//,$0);
my $scriptname = pop @list;

# nach jedem Printbefehl wieder auf Standardfarbe zurücksetzen
$Term::ANSIColor::AUTORESET = 1;
#use Sophomorix::SophomorixPgLdap qw(get_sys_users
#                                   );

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
$Conf::log_level=1;
my $help=0;
my $user="";
my $uid=0;
my $listfiles=0;

# ???????
my $list_files_path="/var/log/sophomorix/list_files";
system("mkdir -p $list_files_path");

# Parsen der Optionen
my $testopt=GetOptions(
           "verbose|v+" => \$Conf::log_level,
           "user|u=s" => \$user,
           "uid=i" => \$uid,
           "listfiles" => \$listfiles,
           "help|h" => \$help,
          );

# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);

# --help
if ($help==1) {
   # Befehlbeschreibung
   print "\n$scriptname does some housekeeping:\n";

   print('
Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  --listfiles --user name
  --listfiles --uid uidnumber

Please see the sophomorix-janitor(8) man pages for full documentation
');
   print "\n";
   exit;
}



# ===========================================================================
# script starts here
# ===========================================================================


print "\n$scriptname is alpha, do not use it!\n\n";




# ===========================================================================
# list files and do something
# ===========================================================================
my @dirs=("/home/students/");

if ($uid==0 and $user ne ""){
    # fetch uid of name
    my ($name, $pass, $uid_of_user, $gid)= getpwnam($user);
    if (not defined $uid_of_user){
        print "ERROR: Could not determine uid of user $user\n";
        print "       Please specify a uid\n\n";
        exit;
    } else {
        $uid=$uid_of_user;
    }
}


# --listfiles and --uid or existing user (--user user)
if ($listfiles==1 and $uid!=0 ){
    my $out_file=$list_files_path."/".$user."-dir-list.txt";
    my $out_file_share=$list_files_path."/".$user."-dir-list-share.txt";
    my $out_file_summary=$list_files_path."/".
                         $user."-dir-list-summary.txt";
    my $out_file_tmp=$list_files_path."/".
                         $user."-dir-list-tmp.txt";
    open(SUMMARY, ">$out_file_summary");

    ########## searching $HOME of a user ##########
    my $search_dir = "/home/teachers/$user";
    print "Looking for files of user $user with uid $uid\n";
    print SUMMARY "##### Ordner im persoenlichen Ordner: #####\n";
    my $search_command="find $search_dir -maxdepth 1 ".
                       "-type d -user $user > $out_file";
    print "Executing:\n $search_command\n";
    system($search_command);

    # Performance: 
    #   A) im home eines users(20 GB): ca. 30s
    #      Dateigroesse 6,7 MB, 72.000 Zeilen (1.800 Schreibmaschinenseiten)
    #   B) in /home user mit 20GB: ca: 
    #      Dateigroesse xx MB, x.000 Zeilen ( Schreibmaschinenseiten)
    # langsam
    #    find( \&files_of_uid,  @dirs);
    #    exit;

    # processing out_file
    my $count=-1;
    open(OUT, "<$out_file");
    while(<OUT>){
        my $dir=$_;
        chomp($dir);
        # ignore home
        if ($dir eq $search_dir){
            next;
        }
        # ignore dotfiles (--dotfiles, --nodotfiles) ?????
        if ($dir=~/$search_dir\/\./) {
            #print "Skipping dotfile $dir\n";
            next;
        }
        my $count_files=`find '$dir' -type f | wc -l`;
        my $count_dirs=`find '$dir' -type d | wc -l`;
        chomp($count_files);
        chomp($count_dirs);
        $count_dirs=$count_dirs-1; # ignore ..
        print SUMMARY "   $dir  --->  $count_dirs Ordner ",
                      "/ $count_files Dateien \n";
    }
    close(OUT);


    ########## searching /home/share ##########
    my $search_dir_share = "/home/share";
    print "Looking in $search_dir_share for dirs/files of user $user\n";
    print SUMMARY "##### Ordner in den Tausch-Ordnern: #####\n";
    #my $search_command_share="find $search_dir_share -maxdepth 2 ".
    #                   "-type d -user $user > $out_file_share";
    #print "Executing:\n $search_command_share\n";
    #system($search_command_share);
    system("find ${search_dir_share}/teachers -maxdepth 1 -type d -user $user > $out_file_share");
    system("find ${search_dir_share}/classes -maxdepth 2 -type d -user $user >> $out_file_share");
    system("find ${search_dir_share}/subclasses -maxdepth 2 -type d -user $user >> $out_file_share");
    system("find ${search_dir_share}/projects -maxdepth 2 -type d -user $user >> $out_file_share");
    system("find ${search_dir_share}/exams -maxdepth 2 -type d -user $user >> $out_file_share");
    system("find ${search_dir_share}/school -maxdepth 1 -type d -user $user >> $out_file_share");

   # ????? -ignore_readdir_race einfuegen

    my $prune_string="";
    my %prune_hash=();

    my $count_share=-1;
    open(OUT, "<$out_file_share");
    while(<OUT>){
        my $dir=$_;
        chomp($dir);
        my $count_files=`find '$dir' -type f | wc -l`;
        my $count_dirs=`find '$dir' -type d | wc -l`;
        chomp($count_files);
        chomp($count_dirs);
        $count_dirs=$count_dirs-1; # ignore ..
        print SUMMARY "   $dir  --->  $count_dirs Ordner ",
                      "/ $count_files Dateien \n";
        # save dir and prune it in next find
        $prune_string=$prune_string."-path \"$dir\" -prune -o ";
	$prune_hash{$dir}="seen";
    }
    close(OUT);

# find /home/share/teachers/ -path /home/share/teachersopenoffice -prune -type f -user bz -o -print

    print "Looking in $search_dir_share for files of user $user\n";
    print SUMMARY "##### Sonstige Dateien in den Tausch-Ordnern: #####\n";

    #my $search_command_share_files="find $search_dir_share $prune_string ".
    #                   "-type f -user $user -o -print >> $out_file_summary";
    my $search_command_share_files="find $search_dir_share  $prune_string ".
                       "-type f -user $user >> $out_file_tmp";
    print "Executing:\n $search_command_share_files\n";
    system($search_command_share_files);

    # remove pruned dirs from results 
    open(TMP, "<$out_file_tmp");
    while(<TMP>){
        my $line = $_;
        chomp($line);
        if (not exists $prune_hash{$line}){
            print SUMMARY "  $line\n";
        } else {
            # ignored
        }
    }
    close(TMP);

    # tauschdirs:
    # A) dirs suchen mit owner ...
    #    B) darin Anzahl Dateien und Ordner
    # C) alle Dateien suchen, Ordner von A) auslassen

    close(SUMMARY);
    exit;
}



# ===========================================================================
# Subs
# ===========================================================================

sub files_of_user {
    my ($user) = @_;
    # find /home -user bz > bz-files-in-home.log
}

# langsam
sub files_of_uid {
    my ($f_dev, $f_ino, $f_mode, $f_nlink, $f_uid, $f_gid) = lstat($_);
    if ($uid==$f_uid){
        print "$uid $f_uid $File::Find::name\n";
        # do something with $File::Find::name

    }
}

