#!/usr/bin/perl -w
# Dieses Script (sophomorix-teach-in) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixBase;
#use Schedule::at;
# Für das Fuzzy-matching
use String::Approx 'amatch';
use Term::ANSIColor qw(:constants); # farbiger Text RED, BLUE, ...
# nach jedem Printbefehl wieder auf Standardfarbe zurücksetzen
$Term::ANSIColor::AUTORESET = 1;

# Einlesen der Konfigurationsdatei für Entwickler
#{ package DevelConf ; do "/etc/sophomorix/devel/user/sophomorix-devel.conf"}

# jeffbecks Bibliothek und
# Einlesen der Konfigurationsdatei
#require "${DevelConf::library_pfad}/sophomorix-lib";



# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                       );

# list of functions to load if db is 'ldap'
use if ${DevelConf::db_backend} eq 'ldap' ,
    'Sophomorix::SophomorixLDAP' => qw(show_modulename);;


# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if sys_db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                          );


# show the Database Modules that are loaded
&show_modulename();
&show_sys_modulename();





# Erlaubte Werte in einen Hash schreiben
my %match_fehlertoleranz_erlaubt = qw(
       5     0           10     0
      15     0           20     0
      25     0           30     0
      35     0           40     0
      45     0           50     0
      55     0           60     0
);





# ===========================================================================
# Variablen, ...
# ===========================================================================

my $identifier;

# Hash in die Hinzukommende Schüler eingelesen werden
my %schueler_hinzu_hash;

# Hash für Eintage in der Teach-in-Datei
my %teach_in_hash_alt;
# Key und Value in diesem Hash
my $teachin_im_system;
my $teachin_replace;

# Hash für das Auswahlmenü
my %auswahl_hash;
# Variablen für das Auswahlmenü
my $schueler_weg="";
my $schueler_hinzu="";
my $entsprechungs_nummer=0;
my $user_antwort=0;

# Wiederverwendbare Variablen zur Hashausgabe
my $k;
my $v;





# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
my $testen=0;
$Conf::log_level=1;
my $help=0;
my $info=0;
my $clear=0;
# Parameter gibt an wie verschieden ähnliche Schüler finden soll (in Prozent)
# 10% nur sehr änliche Namen werden gefunden
# 25% sinnvoller Wert
# 45% auch Schüler mit vertauschtem Vor- und Nachname werden gefunden
my $match_fehlertoleranz="";;



# Parsen der Optionen
my $testopt=GetOptions(
           "clear|c" => \$clear,
           "approx|a=s" => \$match_fehlertoleranz,
#           "test|t" => \$testen,
#           "verbose|v+" => \$Conf::log_level,
           "help|h" => \$help,
           "info|i" => \$info
          );


# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print "Changes updated userdata (Name, Firstname, Birthday) in an existing\n",
         "account of the sophomorix database.\n";
   print('
Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -a value / --approx value
  -r login / --redo login

Please see the sophomorix-teach-in(8) man pages for full documentation
');
   exit;
}


# --approx
if ($match_fehlertoleranz eq ""){
# Standardwert angeben für das Argument
$match_fehlertoleranz="25";
} else {
   if (exists($match_fehlertoleranz_erlaubt{$match_fehlertoleranz})){# ist im Hash zu finden
           # nix tun
       } else {
           # Abbruch
           print "  Fehlertoleranz $match_fehlertoleranz ist nicht zulässig! \n";
           print "  Zulässige Argumente sind 5 bis 60 \n";
           print "    (in 5-er Schritten) \n";
           die;
       }
}

# --clear
if ($clear==1){
    # Löschen
    print "\nLösche ${DevelConf::config_pfad}/teach-in.txt ...\n";
    system("rm ${DevelConf::config_pfad}/teach-in.txt");
    # Leere Datei anlegen
    &check_datei_touch("${DevelConf::config_pfad}/teach-in.txt");
    # Meldung
    print "Sie müssen nun sophomorix-check aufrufen, und erst dann können\n";
    print "sie einen erneuten teach-in durchführen\n\n";
    exit;
}

# --info
if ($info==1){
    # Ausgabe von teach-in.txt
    open(TEACHIN, "${DevelConf::config_pfad}/teach-in.txt");

    print "\n  Folgende user sind schon in teach-in.txt:\n\n";

    print "Linux-Netzwerk-Identifier                Schulverwaltung-Identifier\n";
    &linie;
    while (<TEACHIN>){
      chomp();
      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      ($teachin_im_system,$teachin_replace)=split(/:::/);
      printf "%-40s %3s","$teachin_im_system","$teachin_replace\n";  
    }
    close(TEACHIN);
    exit;
}


# ===========================================================================
# Programmbeginn
# ===========================================================================

# ===========================================================================
# Start-Logo ausgeben
# ===========================================================================

&titel("sophomorix-teach-in startet mit einer Fehlertoleranz von $match_fehlertoleranz %");


# ===========================================================================
# Schüler-Hinzu-Hash erstellen
# ===========================================================================
open(SCHUELERHINZU,
     "${DevelConf::ergebnis_pfad}/sophomorix.add") 
     || die "Fehler: $!";



if($Conf::log_level>=3){
   &titel("Hinzukommen sollen folgende Schüler (Hinzu-Hash):");
 }
   while(<SCHUELERHINZU>){

      chomp();
      if($Conf::log_level>=3){
         print "Lese ein:                  $_\n";
       }
      ($a,$identifier,$a)=split(/::/);
      $schueler_hinzu_hash{$identifier}="hinzu";
#      if($Conf::log_level>=3){
         print "Extrahierter Identifier:   $identifier\n";
#       }
   }



close(SCHUELERHINZU);



# ===========================================================================
# Alter Teach-In-Hash aus teach-in.txt erstellen
# ===========================================================================
open(SCHUELERTEACHIN,
     "<${DevelConf::config_pfad}/teach-in.txt") 
     || die "Fehler: $!";

while(<SCHUELERTEACHIN>){
   chomp();
   if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
   ($teachin_im_system,$teachin_replace)=split(/:::/);
   $teach_in_hash_alt{$teachin_im_system}="$teachin_replace";
}

&titel("Einträge in der bisherigen Datei teach-in.txt:");

print " - Linux-Netzwerk Schreibweise -  :::  - Verwaltung Schreibweise -\n";
print "----------------------------------------",
      "----------------------------------------\n";

while (($k,$v) = each %teach_in_hash_alt) {
print "$k",":::","$v","\n";
}

print "\n";

close(SCHUELERTEACHIN);





# ===========================================================================
# Alle Schüler, die entfernt werden sollen einzeln abfragen
# ===========================================================================

&titel("Der Teach-in beginnt ...");

my @toleration=();


open(TOLERATION,"<${DevelConf::dyn_config_pfad}/user.protokoll");
while(<TOLERATION>){
     my @line=split(/;/);
     if(defined $line[7]){
       if ($line[7]){
         my $gecos=$line[1];
         my ($first,$last)=split(/ /,$gecos);
         my $identifier=$last.";".$first.";".$line[4];
         print $identifier."\n";
         push @toleration, $identifier;
       }	    
     }
}
close(TOLERATION);


foreach $identifier (@toleration){
   # Gesucht wird Entsprechung zu diesem Schüler
   printf "%-25s: %-40s\n" , 
          "Bereits im System ist", 
          "$identifier";
   print "----------------------------------------",
         "----------------------------------------\n";
   # Auswahlnummer auf eins setzen
   $entsprechungs_nummer=0;
   # Bisherige Werte löschen
   $user_antwort="";
   %auswahl_hash=();
   # ======================================================================
   # Auswahlmenü erzeugen
   # ======================================================================
   # Hash mit allen hinzukommenden Schülern durchgehen
   while (($_,$v) = each %schueler_hinzu_hash) {
      chomp();
      $schueler_hinzu=$_;
      # Approx-Match ausgeben
      # 25% ist realistisch für Approx-Matching
 # so tuts:#  if (amatch("$schueler_weg" , ["i 25%"])){
      if (amatch("$identifier" , ["i   ${match_fehlertoleranz}%"])){
         $entsprechungs_nummer++;
         printf "%-25s: %-40s\n" , 
                "($entsprechungs_nummer) Etwaige Entsprechung",
                "$schueler_hinzu";
         # Approx-Match ablegen im Auswahl-Hash
         $auswahl_hash{$entsprechungs_nummer}="$schueler_hinzu";
      }
   }# Alle Schüler durchgegangen
   # (0) = Nichts machen hinzufügen zum Auswahl-Hash
   printf "%-25s: %-40s\n" , 
          "(0)",
          "Nichts tun";
          $auswahl_hash{0}="Nichts tun!";
   print "----------------------------------------",
         "----------------------------------------\n";

   # ======================================================================
   # Useraktion einlesen
   # ======================================================================
   if($entsprechungs_nummer==0){
   # Es gibt nur 0=Nichts tun
   $user_antwort="0";
   } else { # Admin nach rat fragen
      while(){# Endlosschleife für die Eingabe
         $user_antwort= <STDIN>; # Lesen von Tastatur
         chomp($user_antwort); # Newline abschneiden
         if (exists($auswahl_hash{$user_antwort})){
            # Wenn Eingabewert im Auswahl-Hash vorkommt, aussteigen
            last; # Ausstieg aus Endlosschleife
         } else {
            # Endlosschleife, Eingabe wiederholen
            print "Fehlerhafte Eingabe. Bitte wiederholen! Zuerst die Ziffer, dann <RETURN>\n";
         }
      }
    }
   # ======================================================================
   # Resultat der Useraktion verarbeiten
   # ======================================================================
   print "========================================",
         "========================================\n";
   print "Speichere:  ", 
         "$identifier",
         ":::",
         "$auswahl_hash{$user_antwort}\n";
   print "========================================",
         "========================================\n\n\n\n";
   # Ausgabe in die tech-in-datei
   if ($user_antwort eq "0"){ # nur, wenn 1,2,3,... gewählt etwas tun
      # Nichts tun
   } else {
      # Wenn Eintrag im Hash_alt vorhanden, erstmal löschen
      if (exists($teach_in_hash_alt{$identifier})){
         # Dann den Eintrag löschen
         delete($teach_in_hash_alt{$identifier});
      } 
      # Eintrag neu schreiben (mit evtl. verändertem Wert)
      $teach_in_hash_alt{$identifier}="$auswahl_hash{$user_antwort}";
   }
}

#close(DULDUNG);
   

# ===========================================================================
# Modifizierten Teach-in-Hash-alt nach teach-in.txt schreiben
# ===========================================================================
open(SCHUELERTEACHIN,
     ">${DevelConf::config_pfad}/teach-in.txt") 
     || die "Fehler: $!";

# Kommentar einfügen !muss in sophomorix-check auch angepasst werden!
print SCHUELERTEACHIN "# sophomorix-Konfigurationsdatei\n";
print SCHUELERTEACHIN "# Alle Kommentare -außer den jetzt sichtbaren- werden wieder entfernt!\n";
print SCHUELERTEACHIN "# Editieren Sie diese Datei nur, wenn sie wissen, was sie tun!\n";
print SCHUELERTEACHIN "# Linux-Netzwerk Schreibweise ::: Verwaltung Schreibweise:\n";
print SCHUELERTEACHIN "# ---------------------------------------",
                   "---------------------------------------\n";
# Einträge schreiben
while (($k,$v) = each %teach_in_hash_alt) {
print SCHUELERTEACHIN "$k",":::","$v","\n";
}
close(SCHUELERTEACHIN);



# ===========================================================================
# Ende Logo ausgeben
# ===========================================================================

&titel("... sophomorix-teach-in beendet sich jetzt.");

