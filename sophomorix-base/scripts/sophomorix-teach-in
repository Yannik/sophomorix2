#!/usr/bin/perl -w
# Dieses Script (sophomorix-teach-in) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
# Für das Fuzzy-matching
use String::Approx 'amatch';
use Term::ANSIColor qw(:constants); # farbiger Text RED, BLUE, ...
# nach jedem Printbefehl wieder auf Standardfarbe zurücksetzen
$Term::ANSIColor::AUTORESET = 1;

use DBI;
use Net::LDAP;

# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
#use if ${DevelConf::db_backend} eq 'files' , 
#    'Sophomorix::SophomorixFiles' => qw(show_modulename
#                                        check_connections
#                                        get_teach_in_sys_users
#                                        update_user_db_entry
#                                        get_sys_users
#                                       );

# list of functions to load if db is 'pgldap'
#use if ${DevelConf::db_backend} eq 'pgldap' , 
#    'Sophomorix::SophomorixPgLdap' => qw(show_modulename
#                                        check_connections
#                                        get_teach_in_sys_users
#                                        update_user_db_entry
#                                        get_sys_users
#                                       );

use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    check_connections
                                    get_teach_in_sys_users
                                    update_user_db_entry
                                    get_sys_users
                                   );



# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if sys_db is 'files'
#use if ${DevelConf::sys_db} eq 'files' , 
#    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
#                                           update_gecos      
#                                          );

# list of functions to load if sys_db is 'pgldap'
#use if ${DevelConf::sys_db} eq 'pgldap' , 
#    'Sophomorix::SophomorixSYSPgLdap' => qw(show_sys_modulename
#                                           update_gecos      
#                                          );

# show the Database Modules that are loaded
#&show_modulename();
#&show_sys_modulename();
&check_connections();

# Erlaubte Werte in einen Hash schreiben
my %match_fehlertoleranz_erlaubt = qw(
       5     0           10     0
      15     0           20     0
      25     0           30     0
      35     0           40     0
      45     0           50     0
      55     0           60     0
);


# ===========================================================================
# Variablen, ...
# ===========================================================================

my $identifier;
my $hinzu_klasse;

# Hash in die Hinzukommende Schüler eingelesen werden
my %schueler_hinzu_hash;

# Hash für das Auswahlmenü
my %auswahl_hash;
# Variablen für das Auswahlmenü
my $schueler_weg="";
my $schueler_hinzu="";
my $entsprechungs_nummer=0;
my $user_antwort=0;

# Wiederverwendbare Variablen zur Hashausgabe
my $k;
my $v;


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
my $testen=0;
$Conf::log_level=1;
my $help=0;
my $info=0;
my $undo_login="";
# Parameter gibt an wie verschieden ähnliche Schüler finden soll (in Prozent)
# 10% nur sehr änliche Namen werden gefunden
# 25% sinnvoller Wert
# 45% auch Schüler mit vertauschtem Vor- und Nachname werden gefunden
my $match_fehlertoleranz="";;

# Parsen der Optionen
my $testopt=GetOptions(
           "undo=s" => \$undo_login,
           "approx|a=s" => \$match_fehlertoleranz,
#           "test|t" => \$testen,
           "verbose|v+" => \$Conf::log_level,
           "help|h" => \$help,
           "info|i" => \$info
          );

# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print "Updates userdata (Lastname, Firstname, Birthday) in an existing\n",
         "account of the sophomorix database in an interactive way.\n";
   print('
Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -a value / --approx value
  -r login / --redo login

Please see the sophomorix-teach-in(8) man pages for full documentation
');
   exit;
}


# --approx
if ($match_fehlertoleranz eq ""){
# Standardwert angeben für das Argument
$match_fehlertoleranz="25";
} else {
   if (exists($match_fehlertoleranz_erlaubt{$match_fehlertoleranz})){
           # ist im Hash zu finden
           # nix tun
       } else {
           # Abbruch
           print "  Fehlertoleranz $match_fehlertoleranz ist nicht zulässig! \n";
           print "  Zulässige Argumente sind 5 bis 60 \n";
           print "    (in 5-er Schritten) \n";
           die;
       }
}


# --info
if ($info==1){
    my $count=0;
    print "Undoable changes:\n";
    open(HISTORY,
     "${DevelConf::log_files}/user-modify.log") 
     || die "Fehler: $!";

    while (<HISTORY>){
      chomp();
      my @line=split(/::/);
      if (not defined $line[6]){$line[6]=""}
      my $info=$line[0]."(".$line[1]."): ";
      if (($undo_login ne "" and $line[2] eq $undo_login) or
          ($undo_login eq "") ){
        $count++;
        print "Loginname  $line[2]($count):\n";
        printf "  %-27s %-12s %-55s \n",$info,"Old entry:",$line[3];
        printf "%-8s %-20s %-12s %-55s \n\n","  Unid:",$line[6],"System:",$line[5];
      }
    }
    if ($undo_login ne ""){
        print "Action ($count) can be undone.\n";
    }
    close(HISTORY);
    exit;
}

# --redo
if ($undo_login ne ""){
    print "Undoing changes to account $undo_login:\n\n";
    open(LOG,
     "${DevelConf::log_files}/user-modify.log") 
     || die "Fehler: $!";
    my $count=0;
    my ($last,$first,$birth);
    my ($kind,$date,$login,$identifier_old,$a,$identifier_sys);
    while (<LOG>){
        ($kind,$date,$login,$identifier_old,$a,$identifier_sys)=split(/::/);
        if ($login eq $undo_login){
	  $count++;
	  ($last,$first,$birth)=split(/;/,$identifier_old);
          printf " %-14s %-64s \n",
                 "($count) $login","System:           $identifier_sys";
          printf " %-14s %-64s \n\n",
                 "","Can be undone to: $identifier_old";
        }
    }
    close(LOG);

    if ($count>=1){
       &update_user_db_entry($login, 
                             "Name=$first",
                             "LastName=$last",
                             "Birthday=$birth");
       # update the system
       &update_gecos($login,$first,$last);

       # removing last entry in log-lines
       open(LOG,
       "${DevelConf::log_files}/user-modify.log") 
       || die "Fehler: $!";
       my @log_lines = reverse <LOG>;
       my @log_lines_tmp;
       my $hit=0;
       foreach my $line (@log_lines){
          ($kind,$date,$login,$identifier_old,$a,$identifier_sys)=split(/::/,$line);
	  if ($login eq $undo_login and $hit==0){
              # dont print line
              $hit=1;
          } else {
              unshift(@log_lines_tmp,$line),
          }
       }

       # write the tmp-file
       open(LOGTMP,
       ">${DevelConf::log_files}/user-modify.log-tmp") 
       || die "Fehler: $!";
       foreach my $line (@log_lines_tmp){
	   print LOGTMP $line;
       }
       close(LOGTMP);

       # cp the tmp-file
       system("mv ${DevelConf::log_files}/user-modify.log-tmp ${DevelConf::log_files}/user-modify.log");
       print "Action ($count) was undone!\n";
    } else {
       print "Sorry: Could not find loginname $undo_login\n";
    }
    exit;
}


# ===========================================================================
# Programmbeginn
# ===========================================================================

&titel("sophomorix-teach-in starts with $match_fehlertoleranz % amatch");

my $today=`date +%d.%m.%Y`;
my $today_pg=`date +%Y-%m-%d`;
chomp($today);
chomp($today_pg);

# ===========================================================================
# Schüler-Hinzu-Hash erstellen
# ===========================================================================
open(SOPHOMORIXADD,
     "${DevelConf::ergebnis_pfad}/sophomorix.add") 
     || die "Fehler: $!";

if($Conf::log_level>=3){
   &titel("Users that would be added (sophomorix.add):");
 }

while(<SOPHOMORIXADD>){
   chomp();
   ($hinzu_klasse,$identifier,$a)=split(/::/);
   $schueler_hinzu_hash{$identifier}="$hinzu_klasse";
   if($Conf::log_level>=3){
      print "Reading:    $_\n";
      print "Identifier: $identifier\n";
    }
}

close(SOPHOMORIXADD);


# ===========================================================================
# Alle Schüler, die entfernt werden sollen einzeln abfragen
# ===========================================================================

&titel("Asking the system for users ...");

my ($ref_login, 
    $ref_adminclass,
    $ref_status,
    $ref_subclass,
    $ref_toleration_date,
    $ref_deactivation_date,
    $ref_unid_identifier,
    $ref_exit_adminclass,
    $ref_account_type,
   ) = &get_sys_users();

# identifier - klasse (ohne k = sophomorixAdminClass)
my %schueler_im_system_hash = %$ref_adminclass;

# identifier - loginname (uid in ldap)
my %schueler_im_system_loginname = %$ref_login;

# identifier - ExitAdminClass
my %schueler_im_system_exit_admin_class = %$ref_exit_adminclass;



&titel("Extracting teach-in users from the system ...");

my @toleration=&get_teach_in_sys_users();
&print_list("Teach-in users from the system",@toleration);

foreach $identifier (@toleration){
   # Gesucht wird Entsprechung zu diesem Schüler
   printf "%-25s: %-40s\n" , 
          "User in the system is", 
          "$identifier";
   printf "%-25s: %-40s\n" , 
          "Login", 
          "$schueler_im_system_loginname{$identifier}";
   printf "%-25s: %-40s\n" , 
          "AdminClass", 
          "$schueler_im_system_hash{$identifier}";
   if (exists $schueler_im_system_exit_admin_class{$identifier}){
      printf "%-25s: %-40s\n" , 
             "ExitAdminClass", 
             "$schueler_im_system_exit_admin_class{$identifier}";
   }
   print "----------------------------------------",
         "----------------------------------------\n";
   # Auswahlnummer auf eins setzen
   $entsprechungs_nummer=0;
   # Bisherige Werte löschen
   $user_antwort="";
   %auswahl_hash=();
   # ======================================================================
   # Auswahlmenü erzeugen
   # ======================================================================
   # Hash mit allen hinzukommenden Schülern durchgehen
   while (($_,$v) = each %schueler_hinzu_hash) {
      chomp();
      $schueler_hinzu=$_;
      # Approx-Match ausgeben
      # 25% ist realistisch für Approx-Matching
 # so tuts:#  if (amatch("$schueler_weg" , ["i 25%"])){
      if (amatch("$identifier" , ["i   ${match_fehlertoleranz}%"])){
         $entsprechungs_nummer++;
         printf "%-25s: %-40s\n" , 
                "($entsprechungs_nummer) Approx match",
                "$schueler_hinzu";
         printf "%-25s: %-40s\n" , 
                "    AdminClass",
                "$schueler_hinzu_hash{$schueler_hinzu}";
         # Approx-Match ablegen im Auswahl-Hash
         $auswahl_hash{$entsprechungs_nummer}="$schueler_hinzu";
      }
   }# Alle Schüler durchgegangen
   # (0) = Nichts machen hinzufügen zum Auswahl-Hash
   printf "%-25s: %-40s\n" , 
          "(0)",
          "Do nothing";
          $auswahl_hash{0}="Nichts tun!";
   print "----------------------------------------",
         "----------------------------------------\n";

   # ======================================================================
   # Useraktion einlesen
   # ======================================================================
   if($entsprechungs_nummer==0){
   # Es gibt nur 0=Nichts tun
   $user_antwort="0";
   } else { # Admin nach rat fragen
      while(){# Endlosschleife für die Eingabe
         $user_antwort= <STDIN>; # Lesen von Tastatur
         chomp($user_antwort); # Newline abschneiden
         if (exists($auswahl_hash{$user_antwort})){
            # Wenn Eingabewert im Auswahl-Hash vorkommt, aussteigen
            last; # Ausstieg aus Endlosschleife
         } else {
            # Endlosschleife, Eingabe wiederholen
            print "Fehlerhafte Eingabe. Bitte wiederholen!",
                  " Zuerst die Ziffer, dann <RETURN>\n";
         }
      }
    }
   # ======================================================================
   # Resultat der Useraktion verarbeiten
   # ======================================================================
   # Ausgabe in die tech-in-datei
   if ($user_antwort eq "0"){ # nur, wenn 1,2,3,... gewählt etwas tun
      # Nichts tun
      print "\n\n\n";
   } else {
      print "========================================",
            "========================================\n";
      print "Updating sophomorix database:  ", 
            "$identifier",
            ":::",
            "$auswahl_hash{$user_antwort}\n";
      print "========================================",
            "========================================\n\n\n";

      my $identifier_sys=$identifier;
      my $identifier_file=$auswahl_hash{$user_antwort},
      my $login=$schueler_im_system_loginname{$identifier_sys};
      my ($last,$first,$birth)=split(/;/,$identifier_file);
#      print "\nlogin: $login";
#      print "\nsys: $identifier_sys";
#      print "\nfile: $identifier_file";
#      print "\nlast: $last";
#      print "\nfirst: $first";
#      print "\nbirth: $birth\n\n";
      # updating the database

 

      &update_user_db_entry($login, 
                            "Name=$first",
                            "LastName=$last",
                            "Birthday=$birth",
                            "Status=E",
                            "TolerationDate=");
      # log
      &append_teach_in_log("man-teach-in",
                                $login,
                                $identifier_sys,
                                $identifier_file,
                               );
      # update the system
      &update_gecos($login,$first,$last);

      # update the hashes
      if (exists $schueler_im_system_hash{$identifier_sys}){
        my $save_class=$schueler_im_system_hash{$identifier_sys};
        delete($schueler_im_system_hash{$identifier_sys});
        $schueler_im_system_hash{$identifier_file}="$save_class";
      }

      if (exists $schueler_im_system_loginname{$identifier_sys}){
        my $save_login=$schueler_im_system_loginname{$identifier_sys};
        delete($schueler_im_system_loginname{$identifier_sys});
        $schueler_im_system_loginname{$identifier_file}="$save_login";
      }
      if (exists $schueler_im_system_exit_admin_class{$identifier_sys}){
        my $save_exit=$schueler_im_system_exit_admin_class{$identifier_sys};
        delete($schueler_im_system_exit_admin_class{$identifier_sys});
        $schueler_im_system_exit_admin_class{$identifier_file}="$save_exit";
      }
   }
}

&titel("... sophomorix-teach-in is terminated regularly.");
