#!/usr/bin/perl -w
# Dieses Script (sophomorix-kill) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
#use Sophomorix::SophomorixFiles;
#use Schedule::at;

use DBI;
use Net::LDAP;

# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                        check_connections
                                        backup_user_database
                                        remove_user_db_entry
                                       );

use if ${DevelConf::db_backend} eq 'pgldap' , 
    'Sophomorix::SophomorixPgLdap' => qw(show_modulename
                                        check_connections
                                        deleteuser_from_all_projects
                                        backup_user_database
                                        remove_user_db_entry
                                        pg_get_group_list
                                        db_connect
                                        db_disconnect
                                       );

# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                           delete_user_from_sys
                                          );

# list of functions to load if db is 'pgldap'
use if ${DevelConf::sys_db} eq 'pgldap' , 
    'Sophomorix::SophomorixSYSPgLdap' => qw(show_sys_modulename
                                           delete_user_from_sys
                                          );

my $zeit=&zeit_stempel;
my $user_nummer=0;

my $identifier_to_kill="";
my $login_name_to_kill="";
my $home_verzeichnis_to_kill="";
my $linux_gruppe_to_kill="";
my $linie_to_kill="";
#my %protokoll_hash=();

my $k="";
my $v="";

# ===========================================================================
# Optionen verarbeiten
# ===========================================================================

# Variablen für Optionen
$DevelConf::testen=0;
$Conf::log_level=1;
my $help=0;
my $info=0;
my $loginname="";

# Parsen der Optionen
my $testopt=GetOptions(
           "test|t" => \$DevelConf::testen,
           "login|loginname|user|u|l=s" => \$loginname,
           "verbose|v+" => \$Conf::log_level,
           "info|i" => \$info,
           "help|h" => \$help
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung




   print('
sophomorix-kill removes users from the sophomorix database and deletes their data for good.

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  -l  loginname /   --loginame loginname 
  -t  / --test

Please see the sophomorix-kill(8) man pages for full documentation
');
   print "\n";
   exit;
}



# --loginname
if ($loginname ne "") {
  #
  print "Loginname $loginname angegeben.\n";
}


# ===========================================================================
# Abbruch, wenn sophomorix.kill fehlt oder leer
# ===========================================================================
if (not (-s "${DevelConf::ergebnis_pfad}/sophomorix.kill")) {
  print "\n  Die Datei\n\n";
  print "    ${DevelConf::ergebnis_pfad}/sophomorix.kill\n\n";
  print "  ist leer oder wurde nicht gefunden.\n\n";
  print "  Es sind keine User zu löschen\n\n";
  print "   sophomorix-kill beendet sich deshalb!\n\n";
  exit; 
}


# --info
if ($info==1) {
   # Ausgabe der loeschbaren user

   print "\nFolgende User können endgültig gelöscht werden:\n\n";
   print "Loginname   AdminClass   Identifier\n";
   &linie;
   open(KILL,"${DevelConf::ergebnis_pfad}/sophomorix.kill") || die "Fehler: $!";
     while(<KILL>){
       chomp();
       ($identifier_to_kill, $login_name_to_kill)=split(/::/);
       # Klasse ermitteln
       ($linux_gruppe_to_kill)=&pg_get_group_list($login_name_to_kill);
       printf "%-11s %-12s %-40s\n",
              "$login_name_to_kill","$linux_gruppe_to_kill","$identifier_to_kill";
     }
   close(KILL);
   print "\n";
   exit;
}


# show the Database Modules that are loaded
&show_modulename();
&show_sys_modulename();
&check_connections();

# sophomorix database sichern
&backup_user_database($zeit, "before.kill");
# sophomorix.kill mitloggen
&backup_amk_file($zeit,"kill","before");

# ===========================================================================
# Protokolldatei lesen
# ===========================================================================
#%protokoll_hash=&protokoll_linien();
#%protokoll_hash=&get_protokoll_lines();


# ===========================================================================
# Datei mit den Schülern, die nicht gelöscht wurden
# ===========================================================================
open(YETTOKILL,">${DevelConf::ergebnis_pfad}/sophomorix.kill.neu") || die "Fehler: $!";


# ===========================================================================
# Datei mit den zu löschenden Schülern
# ===========================================================================
&titel("Löschvorgang beginnt ...");
print "${DevelConf::ergebnis_pfad}/sophomorix.kill";
open(KILL,"${DevelConf::ergebnis_pfad}/sophomorix.kill") || die "Fehler: $!";

while(<KILL>){
     $user_nummer++;
     chomp();
     ($identifier_to_kill, $login_name_to_kill)=split(/::/);
     # Klasse ermitteln
#     ($linux_gruppe_to_kill)=&get_group_list($login_name_to_kill);
     ($linux_gruppe_to_kill)=&pg_get_group_list($login_name_to_kill);
     # Home-Verzeichnis ermitteln

     my $dbh=&db_connect();
     my $sql="";
     $sql="SELECT homedirectory FROM userdata WHERE uid='$login_name_to_kill'";
     if($Conf::log_level>=3){
        print "\nSQL: $sql\n";
     }
     my ($home_verzeichnis_to_kill)= $dbh->selectrow_array($sql);
     &db_disconnect($dbh);

     # Abbruch, wenn nicht der richtige loginname entfernt wird
     if ($loginname ne "") {
       if ($login_name_to_kill ne $loginname) {
          print "\n$login_name_to_kill wird NICHT gelöscht\n";
          # Merken, dass user noch nicht entfernt wird
          print YETTOKILL "$_\n";
          next;
       }
     }

     # Ermittelte Daten ausgeben
     if($Conf::log_level>=1){
        print("\nRemoving User $user_nummer:\n");
        print("Identifier:          $identifier_to_kill\n");
        print("Login-Name:          $login_name_to_kill\n");
        print("Home-Verzeichnis:    $home_verzeichnis_to_kill\n");
#        print("public_html:         $www_to_kill\n");
#        print("public_html-link:    $www_link_to_kill\n");
#        print("Protokolllinie:      $linie_to_kill\n");
        print("Klasse:              $linux_gruppe_to_kill\n\n");
      } 

      # tschmitt: delete cyrus user
      if (-s "/usr/lib/linuxmuster/bin/cyrus-user.pl") {
        system("/usr/lib/linuxmuster/bin/cyrus-user.pl -u $login_name_to_kill -d");
      }

      # Jetzt wird gelöscht
      # memberships
      &deleteuser_from_all_projects($login_name_to_kill);
      # user itself
      &delete_user_from_sys($login_name_to_kill);
      
      if ($home_verzeichnis_to_kill=~/^\/home\//){
          if ($DevelConf::testen==0) {
	    print "Removing recursively $home_verzeichnis_to_kill \n";
            system("rm -rf $home_verzeichnis_to_kill");
	} else {
	    print "Test: Removing recursively $home_verzeichnis_to_kill \n";
        }
      }

      # Zeile aus user_db entfernen
      if ($DevelConf::testen==0) {
         &remove_user_db_entry($login_name_to_kill);
         &archive_log_entry($login_name_to_kill);
      } else {
        print "Test: Removing $login_name_to_kill from the",
              " sophomorix database.\n"
      }
 
      # webmin
#      &remove_webmin_account($login_name_to_kill);

      if ($linux_gruppe_to_kill ne ${DevelConf::teacher}) {
         # Es ist ein Schüler
         # Klassenverzeichnis in denen die Homes sind löschen, falls leer
         &do_falls_nicht_testen(
             "rmdir --ignore-fail-on-non-empty ${DevelConf::homedir_pupil}/$linux_gruppe_to_kill",
          # Klassentauschverzeichnis löschen, falls leer 
          # (Ist normalerweise nicht Leer)
          "rmdir --ignore-fail-on-non-empty ${DevelConf::share_classes}/$linux_gruppe_to_kill"
          );
       }


     
      # Sonst noch löschen:

      # find über die Tauschverzeichnisse, löschen (evt. noch aufheben)

      # Wenn letzter Schüler einer Klasse gelöscht wird:
      # Die Gruppe Klasse löschen (kein Nachteil, wenn die Gruppe erhalten bleibt)

      # Evtl. gefährlich:
      # Klassentauschverzeichnis löschen, wenn letzter Schüler gelöscht???

      # Logonscript für Klasse entfernen (nicht so wichtig)
      # Wenns die Klasse wiedergibt, wirds überbügelt
      # Wenns die Klasse nicht mehr gibt, liegt halt a bissle Müll herum

   }
close(KILL);
close(YETTOKILL);



# ===========================================================================
# Datei-Zustand (NACHHER) mitloggen 
# ===========================================================================
# sophomorix database sichern
&backup_user_database($zeit, "after.kill");
# sophomorix.kill mitloggen
&backup_amk_file($zeit,"kill","after");

# ===========================================================================
# Falls nur getestet wird, darf die Datei nicht ersetzt werden
# ===========================================================================
if ($DevelConf::testen==0) {
   # Kein Test
   rename("${DevelConf::ergebnis_pfad}/sophomorix.kill.neu",
          "${DevelConf::ergebnis_pfad}/sophomorix.kill" );
 } else {
   # Test
   system("rm -f ${DevelConf::ergebnis_pfad}/sophomorix.kill.neu > /dev/null");
 }


# webmin
# dont restart webmin (this is done later)
# webmin not needed anymore
#&do_falls_nicht_testen("sophomorix-webmin --modules --no-restart");


print ("\nsophomorix-kill terminated regularly ...\n");




# old, not used anymore
# ===========================================================================
# sub
# ===========================================================================
sub remove_webmin_account {
   my ($user)=@_;
   my $wmsu="/etc/webmin/miniserv.users";
   my $webminacl="/etc/webmin/webmin.acl";
   my @miniserv_users=();
   my @webmin_acl=();
   
   # removing miniserv.users entry
   if (-e $wmsu){
      # remove entry
      open (MINISERVUSERS, "<$wmsu") || die "Cannot open  $wmsu\n";
      open (TMP, ">$wmsu.tmp") || die "Cannot open $wmsu.tmp\n";
      while(<MINISERVUSERS>){ 
         if (/^$user:/){ # wenn die user-Zeile gefunden
             # nix tun
         } else {
	      print TMP $_;
         }
      }
      close(MINISERVUSERS);
      close(TMP);
      # really do it
      if ($DevelConf::testen==0) {
          system("mv $wmsu.tmp $wmsu");
      } else {
         print "Test: removing user from $wmsu\n";
         # remove tmp?         
      }
   }


   # removing webmin.acl entry
   if (-e $webminacl){
      # remove entry
      open (WEBMINACL, "<$webminacl") || die "Cannot open $webminacl\n";
      open (TMP, ">$webminacl.tmp") || die "Cannot open $webminacl.tmp\n";
      while(<WEBMINACL>){ 
         if (/^$user:/){ # wenn die user-Zeile gefunden
             # nix tun
         } else {
	      print TMP $_;
         }
      }
      close(WEBMINACL);
      close(TMP);
      # really do it
      if ($DevelConf::testen==0) {
          system("mv $webminacl.tmp $webminacl");
      } else {
         print "Test: removing user from $webminacl\n";
         # remove tmp?         
      }
  }


  # removing users acl, if existing 
  if (-e "/etc/webmin/custom/${user}.acl"){
        &do_falls_nicht_testen(
          "rm /etc/webmin/custom/$user.acl"
        );
  }
}
