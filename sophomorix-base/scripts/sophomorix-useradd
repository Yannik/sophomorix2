#!/usr/bin/perl -w
# $Id$
# Dieses Script (sophomorix-useradd) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
use DBI;
use Net::LDAP;

use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    check_connections
                                    create_user_db_entry
                                    adduser_to_project
                                   );


my @arguments = @ARGV;

&check_connections();
&log_script_start(@arguments);

# ===========================================================================
# Variablen
# ==========================================================================

my $help=0;
my $login="";
my $type="";
my $shell="";

# mandatory
my $administrator="";
my $workstation="";
my $unix_group="";


# optional
my $uid_number=-1;
my $gecos="";
my $sec_groups="";


my $home="";
my $epoch_now=time;
my $password="";
my $quota="";
my $unid="";


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================


# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "administrator=s" => \$administrator,
           "workstation=s" => \$workstation,
           "unix-group=s" => \$unix_group,
           "secondary-groups=s" => \$sec_groups,
           "gecos=s" => \$gecos,
           "uidnumber=i" => \$uid_number,
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-useradd adds a group to the sophomorix database (and ldap)

Options
  -h  / --help
  --workstation name
  --administrator name

Please see the sophomorix-useradd(8) man pages for full documentation
');
   print "\n";
   exit;
}




# exit if options are missing
if ($unix_group eq "" or ($workstation eq "" 
                          and $administrator eq "") ){
    print "\nThe options:\n";
    print "   --unix-group name \n";
    print "and one of:\n";
    print "   --administarator name\n";
    print "   --workstation name\n";
    print "are mandatory.\n\n";
    exit;
}





# set some stuff
if ($workstation ne ""){
    $type="workstation";
    $login=$workstation;
    $shell="/bin/false";
    $home=$DevelConf::homedir_ws."/".$unix_group."/".$login;
}
if ($administrator ne ""){
    $type="administrator";
    $login=$administrator;
    $shell="/bin/bash";
    $home=$DevelConf::homedir_all_admins."/".$login;
}



if ($password eq ""){
    $password="linux";
}







# Do it !

print "Creating user account $login:\n";
print "    Uidnumber      : $uid_number\n";
print "    Type           : $type\n";
print "    Secondary Grp. : $sec_groups\n";
print "    Group          : $unix_group\n";
print "    Home           : $home\n";
print "    Gecos          : $gecos\n";
print "    Shell          : $shell\n";
print "    Epoch          : $epoch_now\n";
print "    Password       : $password\n";
print "    Quota          : $quota\n";


# create postgres entry
&create_user_db_entry("","","01.01.1970",
                      $unix_group,$login,$password,
                      $shell,$quota,$unid,$epoch_now,undef,undef,
                      $uid_number,$home,$gecos);

# add to secondary groups
if ($sec_groups ne ""){
    my @grp_list=split(/,/,$sec_groups);
    foreach my $group (@grp_list){
        # 3rd param: 0=do not keep track of memberships in projects
        &adduser_to_project($login,$group,0);
    }
}


&Sophomorix::SophomorixPgLdap::auth_useradd($login,
     $uid_number,$gecos,$home,$unix_group,$sec_groups,$shell);


# set quota




&log_script_end(@arguments);
