#!/usr/bin/perl -w
# Dieses Script (sophomorix-useradd) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;

use DBI;
use Net::LDAP;

# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                        check_connections
                                        create_user_db_entry
                                        backup_user_database
                                        set_sophomorix_passwd
                                        create_class_db_entry
                                       );
use if ${DevelConf::db_backend} eq 'pgldap' , 
    'Sophomorix::SophomorixPgLdap' => qw(show_modulename
                                        check_connections
                                        db_connect
                                        db_disconnect
                                        create_user_db_entry
                                        backup_user_database
                                        set_sophomorix_passwd
                                        create_class_db_entry
                                       );

# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                           add_class_to_sys
                                           add_user_to_sys
                                          );

use if ${DevelConf::sys_db} eq 'pgldap' , 
    'Sophomorix::SophomorixSYSPgLdap' => qw(show_sys_modulename
                                            add_class_to_sys
                                            add_user_to_sys
                                           );




my $epoche_jetzt=time;
   print "Epochenzeit:                                 ",
         "$epoche_jetzt (right now)\n";



my $pg_timestamp=&pg_timestamp();






# CANNOT BE PASSED AS OPTIONS
my $nachname="";
my $vorname="";
my $birthday_perl="01.01.1970";
my $quota="quota";
my $unid="";
my $unix_epoc="";
my $identifier="";

# MUST OPTIONS
my $login="";
my $password="";
my $homedir="";
my $gecos="";
my $group="";

# MAY OPTIONS
my $wunsch_gidnumber="";
my $gid_force_number="";
my $wunsch_uidnumber="";
my $uid_force_number="";
my $shell="/bin/false";
my $shell_force="";

my $sophomorix_status="P"; # standard
my $workstation=0; # midfies status

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$DevelConf::testen=0;
$DevelConf::system=0;
$Conf::log_level=1;
my $help=0;
my $info=0;
my $loginname="";
my $smbroot=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "uidnumber=i" => \$uid_force_number,
           "gid|group=s" => \$group,
           "gidnumber=s" => \$gid_force_number,
           "shell|s=s" => \$shell_force,
           "verbose|v+" => \$Conf::log_level,
           "password=s" => \$password,
           "workstation|w" => \$workstation,
           "homedir|d=s" => \$homedir,
           "gecos|c=s" => \$gecos,
           "help|h" => \$help
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-useradd adds permanent (P) user accounts to the sophomorix 
database and the authentification system

usage: sophomorix-useradd username

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  --uidnumber number
  --gid name
  --password password

Please see the sophomorix-useradd(8) man pages for full documentation
');
   print "\n";
   exit;
}


# repair.directories einlesen
&get_alle_verzeichnis_rechte();




# exit if arguments are bad
if (not defined $ARGV[0] or defined $ARGV[1]){
    print "ERROR\n";
    print "\n   sophomorix-useradd needs exactly ONE argument\n\n";
    exit;
}


$login=$ARGV[0];


if ($gid_force_number ne ""){
    $wunsch_gidnumber=$gid_force_number;
}


if (defined $uid_force_number){
    $wunsch_uidnumber=$uid_force_number;
} else {
    $wunsch_uidnumber="";
}


if ($shell_force ne ""){
    $shell=$shell_force;
}



if ($workstation==1){
    $sophomorix_status="W";
} else {
    $sophomorix_status="P";
}


   # Ermittelte Daten ausgeben
   if($Conf::log_level>=1){
      print "\n";
      &titel("Creating User $login:");
#      print("   Nachname:         $nachname\n");
#      print("   Vorname:          $vorname\n");
#      print("   Geburtsdatum:     $birthday_perl\n");
#      print("   Identifier:       $identifier\n");
      print "MUST: \n";
      print("   User:             $login\n"); # lehrer oder klasse
      print("   Gruppe:           $group\n"); # lehrer oder klasse
      print("   GECOS:            $gecos\n");
      print("   Homedir:          $homedir\n");
      print("   Passwort:         $password\n");
      print "MAY: \n";
      print("   Unix-gid:         $wunsch_gidnumber\n"); # lehrer oder klasse
      print "   Unix-uid:         $wunsch_uidnumber\n";
      print("   Shell:            $shell\n");
      print("   SophomorixStatus  $sophomorix_status\n");
   }


#exit;


   # Nun wird der User angelegt
   # 1. Entry in sophomorix database
   &create_user_db_entry($nachname,
                         $vorname,
                         $birthday_perl,
                         $group,
                         $login,
                         $password,
                         $shell,
                         "",
                         $unid,
                         $epoche_jetzt,
                         $pg_timestamp,
                         $sophomorix_status,
                         $wunsch_uidnumber,
                         $homedir,
                         $gecos,
                        );

  # 2. Add the class (db and dirs,links, ...)
  if (${DevelConf::db_backend} ne "pgldap"){
     # this is done already with create_user_db_entry, when using postgres
     &create_class_db_entry($group);
     &add_class_to_sys($group,$wunsch_gidnumber); # VOR add_user_to_sys !
  }
  &provide_class_files($group);

  # 3. Add  user to db
  &add_user_to_sys($nachname,
                   $vorname,
                   $birthday_perl,
                   $group,
                   $login,
                   $password,
                   $shell,
                   $wunsch_uidnumber);
  &set_sophomorix_passwd($login,$password);

#  # 4. Add user to webmin
#  &create_webmin_account($login);

  # 5. Creating dirs, links for the user
#  &provide_user_files($login,$group);

# ??????  home erstellen



# neue gruppe anlegen und gidnumber holen, falls erforderlich


#$gidnumber=&create_class_db_entry($ARGV[0],3,$gid_force_number);

