#!/usr/bin/perl -w
# Dieses Script (sophomorix-user) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
#use Schedule::at;
use String::Approx 'amatch';
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Time::Local;
use Time::localtime;
use Term::ANSIColor qw(:constants); # farbiger Text RED, BLUE, ...
# nach jedem Printbefehl wieder auf Standardfarbe zurücksetzen
$Term::ANSIColor::AUTORESET = 1;

use DBI;

# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                        search_user
                                        update_user_db_entry
                                        user_deaktivieren
                                        user_reaktivieren     
                                       );

# list of functions to load if db is 'pgldap'
use if ${DevelConf::db_backend} eq 'pgldap' , 
    'Sophomorix::SophomorixPgLdap' => qw(show_modulename
                                        search_user
                                        update_user_db_entry
                                        user_deaktivieren
                                        user_reaktivieren     
                                       );


# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                          );

# list of functions to load if db is 'pgldap'
use if ${DevelConf::sys_db} eq 'pgldap' , 
    'Sophomorix::SophomorixSYSPgLdap' => qw(show_sys_modulename
                                          );



# show the Database Modules that are loaded
&show_modulename();
&show_sys_modulename();


my $today=`date +%d.%m.%Y`;
chomp($today);


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
$Conf::log_level=1;
my $help=0;
my $freeze="";
my $permanent="";
my $removable="";
my $killable="";
my $activate="";

my $search="";

# Parsen der Optionen
my $testopt=GetOptions(
       "verbose|v+" => \$Conf::log_level,
           "help|h" => \$help,
       "s|search=s" => \$search,
       "F|freeze=s" => \$freeze,
       "P|permanent=s" => \$permanent,
       "R|removable=s" => \$removable,
       "K|killable=s" => \$killable,
       "A|activate=s" => \$activate,
          );


# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);



# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-user edits the sophomorix user database.

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -s string / --search string
  -F loginname   /   --freeze loginname
  -P loginname   /   --permanent loginname
  -R loginname   /   --removable loginname
  -K loginname   /   --killable loginname
  -A loginname   /   --activate loginname

Please see the sophomorix-user(8) man pages for full documentation
');
   print "\n";

   exit;
}




# --freeze
if ($freeze ne""){
    print "Freezing the account of $freeze:\n";
    # check if it is really an account
#    if (getpwnam("$freeze")){
#	print "   - $freeze is a valid username.\n";
#    } else {
#	print "   - $freeze is not a valid username.\n";
#        exit;
#    }
    # doing the freeze
    &update_user_db_entry($freeze, 
                          "Status=F",
                          "TolerationDate=",
                          "DeactivationDate=");
    &user_deaktivieren($freeze);
    exit;
}



# --permanent
if ($permanent ne""){
    print "Making the account of $permanent permanent:\n";
    # check if it is really an account
#    if (getpwnam("$permanent")){
#	print "   - $permanent is a valid username.\n";
#    } else {
#	print "   - $permanent is not a valid username.\n";
#        exit;
#    }
    # making the account permanent
    &update_user_db_entry($permanent, 
                          "Status=P",
                          "TolerationDate=",
                          "DeactivationDate=");
    &user_reaktivieren($permanent);
    exit;
}




# --removable
if ($removable ne""){
    print "Making the account of $removable removable by sophomorix-kill:\n";
    # check if it is really an account
#    if (getpwnam("$removable")){
#	print "   - $removable is a valid username.\n";
#    } else {
#	print "   - $removable is not a valid username.\n";
#        exit;
#    }
    # doing the removable
    &update_user_db_entry($removable, 
                          "Status=R",
                          "TolerationDate=01.01.1970",
                          "DeactivationDate=01.01.1970");
    &user_deaktivieren($removable);
    exit;
}




# --killable
if ($killable ne""){
    print "Making the account of $killable killable by sophomorix-kill:\n";
    # check if it is really an account
#    if (getpwnam("$killable")){
#	print "   - $killable is a valid username.\n";
#    } else {
#	print "   - $killable is not a valid username.\n";
#        exit;
#    }
    # doing the killable
    &update_user_db_entry($killable, 
                          "Status=K",
                          "TolerationDate=01.01.1970",
                          "DeactivationDate=01.01.1970");
    &user_deaktivieren($killable);
    exit;
}




# --activate
if ($activate ne""){
    print "Actvating the account of $activate:\n";
    # check if it is really an account
#    if (getpwnam("$activate")){
#	print "   - $activate is a valid username.\n";
#    } else {
#	print "   - $activate is not a valid username.\n";
#        exit;
#    }
    # activating the account
    &update_user_db_entry($activate, 
                          "Status=A",
                          "TolerationDate=$today",
                          "DeactivationDate=");
    &user_reaktivieren($activate);
    exit;
}




######################################################################
# Standard: suchen nach string
######################################################################

if ($search eq ""){
   print "I don't know what to search for! (searchstring is empty)\n";
   exit;  
}


# suche, falls $search nicht leer



############################################################
# Start
############################################################
&search_user($search);








