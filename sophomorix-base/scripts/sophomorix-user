#!/usr/bin/perl -w
# Dieses Script (sophomorix-user) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
#use Schedule::at;
use String::Approx 'amatch';
use Sophomorix::SophomorixBase;
#use Sophomorix::SophomorixFiles;
use Time::Local;
use Time::localtime;
use Term::ANSIColor qw(:constants); # farbiger Text RED, BLUE, ...
# nach jedem Printbefehl wieder auf Standardfarbe zurücksetzen
$Term::ANSIColor::AUTORESET = 1;

# loading the Module for the Database-Backend 
if (${DevelConf::db_backend} eq 'files'){
    #print "Using ${DevelConf::db_backend} \n";
    require Sophomorix::SophomorixFiles;
    import Sophomorix::SophomorixFiles;
#    use Sophomorix::SophomorixFiles;   # tut nicht
} elsif (${DevelConf::db_backend} eq 'ldap'){
    #print "Using $DevelConf::db_backend \n";
    require Sophomorix::SophomorixLDAP;
    import Sophomorix::SophomorixLDAP;
#    use Sophomorix::SophomorixLDAP;   # tut nicht
} elsif (${DevelConf::db_backend} eq 'postgresql'){
    #print "Using $DevelConf::db_backend \n";
    require Sophomorix::SophomorixPostgreSQL;
    import Sophomorix::SophomorixLPostgreSQL;
#    use Sophomorix::SophomorixPostgreSQL;   # tut nicht
}



my $today=`date +%d.%m.%Y`;
chomp($today);


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
$Conf::log_level=1;
my $help=0;
my $freeze="";
my $permanent="";
my $removable="";
my $killable="";
my $activate="";

my $search="";

# Parsen der Optionen
my $testopt=GetOptions(
       "verbose|v+" => \$Conf::log_level,
           "help|h" => \$help,
       "s|search=s" => \$search,
       "F|freeze=s" => \$freeze,
       "P|permanent=s" => \$permanent,
       "R|removable=s" => \$removable,
       "K|killable=s" => \$killable,
       "A|activate=s" => \$activate,
          );


# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);



# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-user edits the sophomorix user database.

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -s string / --search string
  -F loginname   /   --freeze loginname
  -P loginname   /   --permanent loginname
  -R loginname   /   --removable loginname
  -K loginname   /   --killable loginname
  -A loginname   /   --activate loginname

Please see the sophomorix-user(8) man pages for full documentation
');
   print "\n";

   exit;
}





# show the Database Module that is loaded
&show_modulename();



# --freeze
if ($freeze ne""){
    print "Freezing the account of $freeze:\n";
    # check if it is really an account
    if (getpwnam("$freeze")){
	print "   - $freeze is a valid username.\n";
    } else {
	print "   - $freeze is not a valid username.\n";
        exit;
    }
    # doing the freeze
    &update_user_db_entry($freeze, 
                          "Status=F",
                          "TolerationDate=",
                          "DeactivationDate=");
    &user_deaktivieren($freeze);
}



# --permanent
if ($permanent ne""){
    print "Making the account of $permanent permanent:\n";
    # check if it is really an account
    if (getpwnam("$permanent")){
	print "   - $permanent is a valid username.\n";
    } else {
	print "   - $permanent is not a valid username.\n";
        exit;
    }
    # making the account permanent
    &update_user_db_entry($permanent, 
                          "Status=P",
                          "TolerationDate=",
                          "DeactivationDate=");
    &user_reaktivieren($permanent);
}




# --removable
if ($removable ne""){
    print "Making the account of $removable removable by sophomorix-kill:\n";
    # check if it is really an account
    if (getpwnam("$removable")){
	print "   - $removable is a valid username.\n";
    } else {
	print "   - $removable is not a valid username.\n";
        exit;
    }
    # doing the removable
    &update_user_db_entry($removable, 
                          "Status=R",
                          "TolerationDate=01.01.1970",
                          "DeactivationDate=01.01.1970");
    &user_deaktivieren($removable);
}




# --killable
if ($killable ne""){
    print "Making the account of $killable killable by sophomorix-kill:\n";
    # check if it is really an account
    if (getpwnam("$killable")){
	print "   - $killable is a valid username.\n";
    } else {
	print "   - $killable is not a valid username.\n";
        exit;
    }
    # doing the killable
    &update_user_db_entry($killable, 
                          "Status=K",
                          "TolerationDate=01.01.1970",
                          "DeactivationDate=01.01.1970");
    &user_deaktivieren($killable);
}




# --activate
if ($activate ne""){
    print "Actvating the account of $activate:\n";
    # check if it is really an account
    if (getpwnam("$activate")){
	print "   - $activate is a valid username.\n";
    } else {
	print "   - $activate is not a valid username.\n";
        exit;
    }
    # activating the account
    &update_user_db_entry($activate, 
                          "Status=A",
                          "TolerationDate=$today",
                          "DeactivationDate=");
    &user_reaktivieren($activate);
}




######################################################################
# Standard: suchen nach string
######################################################################

if ($search eq ""){
   print "I don't know what to search for! (searchstring is empty)\n";
   exit;  
}


# suche, falls $search nicht leer



############################################################
# Start
############################################################
&search_user($search);





sub search_user {
    # database dependent
    my ($string) = @_;
my ($class,
    $gec_user,
    $login,
    $first_pass,
    $birth,
    $unid,
    $subclass,
    $status,
    $tol,
    $deact,
    $ex_admin,
    $acc_type)=();

 my ($loginname_passwd,
     $passwort,
     $uid_passwd,
     $gid_passwd,
     $quota_passwd,
     $name_passwd,
     $gcos_passwd,
     $home,
     $shell)=();

my $group_string="";
my @group_list=();
my $pri_group_string="";
my $grp_string="";
my $home_ex="---";
my $samba="";
my @samba_lines="";

&titel("I'm looking for $string in $DevelConf::protokoll_datei ...");

open(PROTOKOLL,"<$DevelConf::protokoll_datei");
   while (<PROTOKOLL>){
       if (/$string/){
          chomp();

          ($class,$gec_user,$login,$first_pass,$birth,
           $unid,$subclass,$status,$tol,$deact,$ex_admin,$acc_type)=split(/;/);
          # Abfragen der /etc/passwd
          ($loginname_passwd,
          $passwort,
          $uid_passwd,
          $gid_passwd,
          $quota_passwd,
          $name_passwd,
          $gcos_passwd, 
          $home,
          $shell
          )=getpwnam("$login");
          # GCOS-Feld aufsplitten

          # Gruppen-Zugehoerigkeit
          @group_list=();
          $grp_string="";
          $pri_group_string=`id -gn $login`;
          $group_string=`id -Gn $login`;
          chomp($group_string);
          chomp($pri_group_string);
          @group_list=split(/ /, $group_string);
	  print "User                :  $login  ";
       if (defined $loginname_passwd){
	     print "($loginname_passwd exists in the system) \n";
       } else {
	     print "(ERROR: $login is not in the system) \n";
       }
          print "=======================================";
          print "=======================================\n";

       printf "   AdminClass       : %-47s %-11s\n",$class,$login;

       printf "   PrimaryGroup     : %-47s %-11s\n",$pri_group_string,$login;
       foreach my $gr (@group_list){
	   $grp_string= $grp_string." ".$gr;
	  #print $gr," ";
       }
       printf "   SecondaryGroups  :%-48s %-11s\n",$grp_string,$login;

       printf "   Gecos            : %-47s %-11s\n", $gec_user,$login;
  
          if (defined $loginname_passwd){
             printf "   SystemGecos      : %-47s %-11s\n",$gcos_passwd, $login;
	  }

          if (-e $home){
              $home_ex=$home."  (existing)";
	      #print "(existing) \n";
          } else {
	      #print "(ERROR: non-existing!) \n";
              $home_ex=$home."  (ERROR: non-existing)";
	      
          }
          if (defined $home){
             printf "   Home             : %-47s %-11s\n",$home_ex,$login;
	  }
        

          if (defined $shell){
             printf "   LoginShell       : %-47s %-11s\n",$shell,$login;
	  }


	  printf "   FirstPassword    : %-47s %-11s\n",$first_pass,$login;
	  printf "   Birthday         : %-47s %-11s\n",$birth,$login;

          if (defined $unid){
	     printf "   Unid             : %-47s %-11s\n",$unid,$login;
          }

          if (defined $subclass){
	     printf "   SubClass         : %-47s %-11s\n",$subclass,$login;
          }

          if (defined $status){
	     printf "   Status           : %-47s %-11s\n",$status,$login;
          }

          if (defined $tol){
	     printf "   TolerationDate   : %-47s %-11s\n",$tol,$login;
          }

          if (defined $deact){
	     printf "   DeactivationDate : %-47s %-11s\n",$deact,$login;
          }

          if (defined $ex_admin){
	     printf "   ExitAdminClass   : %-47s %-11s\n",$ex_admin,$login;
          }

          if (defined $acc_type){
	     printf "   AccountType      : %-47s %-11s\n",$acc_type,$login;
          }

          # samba
          # database independent
          print "Samba:\n";
          $samba=`pdbedit -v -u $login`;
          @samba_lines=split(/\n/,$samba);
	  foreach (@samba_lines){
#            s/\s//g;
            # ??? nur am ersten auftreten von : splitten
            my ($attr,$value)=split(/: /);
            $value=~s/\s//g;

	    if (/^Account Flags/){
              printf "   Account Flags    : %-47s %-11s\n",$value,$login;    
            }
	    if (/^Home Directory/){
              printf "   Home Directory   : %-47s %-11s\n",$value,$login;    
            }
	    if (/^Password last set/){
              printf "   Pwd last set     : %-47s %-11s\n",$value,$login;    
            }
	    if (/^Password can change/){
              printf "   Pwd can change   : %-47s %-11s\n",$value,$login;    
            }
	    if (/^Password must change/){
              printf "   Pwd must change  : %-47s %-11s\n",$value,$login;    
            }
	  }

          # history
          # database independent
          print "History of $login:\n";
          &get_history($login);

          ($class,$gec_user,$login,$first_pass,$birth,$unid,
           $subclass,$status,$tol,$deact,$ex_admin,$acc_type)=(
           "","","","","","","","","","","","");
       }
   }
close(PROTOKOLL);
}








sub get_history {
   my ($login) = @_;
   my @line=();
   my $count=0;
   &check_datei_touch("${DevelConf::log_files}/user-modify.log");
   open(HISTORY, 
       "<${DevelConf::log_files}/user-modify.log") 
        || die "Fehler: $!";

   while (<HISTORY>){
      chomp();
      @line=split(/::/);
      if (not defined $line[6]){$line[6]=""}
      if ($line[2] eq $login){
	 $count++;
         my $info=$line[0]."(".$line[1]."): ";
         printf "   %-27s %-55s \n",$info,$line[3];
         printf "      Unid: %-18s %-55s \n",$line[6],$line[5];
          
      }
   }
   close(HISTORY);
   if ($count==0){
       print "   No History exists.\n";
   }
}


# ToDo


# history zu sophomorix-base modul



