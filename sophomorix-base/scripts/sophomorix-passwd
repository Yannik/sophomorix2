#!/usr/bin/perl -w
# $Id$
# Dieses Script (sophomorix-passwd) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
use DBI;
use Net::LDAP;
use Sophomorix::SophomorixPgLdap qw(show_modulename
                                    check_connections
                                    get_first_password
                                    update_user_db_entry
                                    check_sophomorix_user
                                    set_sophomorix_passwd
                                   );

&check_connections();

# ===========================================================================
# Variablen
# ==========================================================================

my @users=();

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$DevelConf::testen=0;
$DevelConf::system=0;
$Conf::log_level=1;
my $help=0;
my $info=0;
my $loginname="";
my $classes="";
my $pupil=0;
my $rooms="";
my $ws=0;

my $password="";
my $reset=0;
my $common=0;
my $random=0;

my $char_num=0;

my $hide=0;
my $force=0;
# flag, if (1) user has specified ONE password for all (-p or --common)  , 
#    or if (2) password must be calculated for each user
my $password_given=0;

my $password_lehrer="";
my $password_other="";

my $info_line="";

# Parsen der Optionen
my $testopt=GetOptions(
           "login|user|u|l=s" => \$loginname,
           "class|klasse|c|k=s" => \$classes,
           "students" => \$pupil,
           "room|=s" => \$rooms,
           "workstations|workstation|ws" => \$ws,
           "password|p=s" => \$password,
           "reset" => \$reset,
           "common" => \$common,
           "random" => \$random,
           "plength=i" => \$char_num,
           "verbose|v+" => \$Conf::log_level,
           "hide" => \$hide,
           "force" => \$force,
           "info|i" => \$info,
           "help|h" => \$help
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-passwd adds users to the sophomorix database and the authentification system

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  --hide
  -p password, --password password
  --common
  --reset
  --random
  --plength number
  -l  login1, ... / --login login1, .../ -u login1, ... / --user login1, ...
  -c class / --class class 
  --students
  -r room / --room room
  --workstations

Please see the sophomorix-passwd(8) man pages for full documentation
');
   print "\n";
   exit;
}



# create the list of users
if ($force==1){
   @users=&create_userlist($loginname,$classes,$pupil,$rooms,$ws,0);
} else {
   # check the users
   &titel("Checking login names ...");
   @users=&create_userlist($loginname,$classes,$pupil,$rooms,$ws,1);
}

################################################################################
# Exit
################################################################################


# exit if no users specified
if ($#users+1==0){
    print "ERROR: No users specified. \n";
    exit;
}


# limit plength to 1 to 25
if ($char_num >=26 or $char_num < 0){
    print "Error: $char_num characters is too long/short for a password\n";
    exit;
}

if ($password ne "" and $char_num!=0){
    print "Error: What do you need --plength for? \n";  
    exit;
}

if ($char_num!=0 and($common==0 and $random==0)){
    print "Error: Options make no sense: add  --random or --common\n";  
    exit;
}

################################################################################
# Start
################################################################################



# use the charlist of SophomorixBase
my @chars=&get_passwd_charlist();

if ($password ne ""){
   $info_line="Password will be '$password'";
   $password_given=1;
}

if ($common==1){
   if ($char_num==0){
      $password_lehrer=&get_plain_password(${DevelConf::teacher},@chars);
      $password_other=&get_plain_password("",@chars);
   } else {
      $password_lehrer=&get_random_password($char_num,${DevelConf::teacher},@chars);
      $password_other=&get_random_password($char_num,"",@chars);
   }
   $info_line="Passwords will be :\n".
              "   '$password_lehrer'  (for teachers) \n".
              "   '$password_other'  (for others) ";

}


if ($reset==1){
   $info_line="Passwords will be looked up in the sophomorix database";
}

if ($random==1){
   $info_line="Every user will have its own a random password";
}


# --info, show only the users
if ($info==1) {
   &print_list_column(6,"Passwörter setzen für user ",@users);
   print "INFO: $info_line  \n";
   exit;
}

# Setting the passwords
foreach my $user (@users){
    # gruppe ermitteln
    my ($home,$group)=&Sophomorix::SophomorixPgLdap::fetchdata_from_account($user);
    # which password to set
    if ($password_given==1){
         # use $password, do nothing
    } elsif ($reset==1){
         # lookup old password
        $password=&get_first_password($user);
    } elsif ($common==1){
       # set password
       if ($group eq ${DevelConf::teacher}){ 
	   $password=$password_lehrer;
       } else {
	   $password=$password_other;
       }
    } elsif ($random==1){
       # set password randomly
       $password=&get_random_password($char_num,$group,@chars);
    } else {
       #print "No password option specified: using sophomorix.conf\n";
       # nothing specified: use sophomorix.conf
       $password=&get_plain_password($group,@chars)
    }
    if ($hide==1){
       print "  Setting password for user $user in $group to xxxxxxxx ...\n";
    } else {
       print "  Setting password for user $user in $group to $password ...\n";
    }
       # Passwort für user setzten
       &set_sophomorix_passwd($user,$password);
       # updating the database
       &update_user_db_entry($user,"FirstPass=$password");
}







