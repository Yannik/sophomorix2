#!/usr/bin/perl -w
# Dieses Script (sophomorix-add) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;

use DBI;

# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                        create_user_db_entry
                                        backup_user_database
                                        create_class_db_entry
                                       );
use if ${DevelConf::db_backend} eq 'pgldap' , 
    'Sophomorix::SophomorixPgLdap' => qw(show_modulename
                                        db_connect
                                        create_user_db_entry
                                        backup_user_database
                                        create_class_db_entry
                                       );

# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                           add_class_to_sys
                                           add_user_to_sys
                                          );

use if ${DevelConf::sys_db} eq 'pgldap' , 
    'Sophomorix::SophomorixSYSPgLdap' => qw(show_sys_modulename
                                            add_class_to_sys
                                            add_user_to_sys
                                           );



# show the Database Modules that are loaded
&show_modulename();
&show_sys_modulename();

my $zeit=&zeit_stempel;
my $user_nummer=0;

my $identifier;
my $nachname;
my $vorname;
my $gebdat;
my $gecos="";
my $wunsch_login;
my $wunsch_passwort;
my $wunsch_id;
my $wunsch_gid;
my $unid;
my $login_teil_1="";
my $login_teil_2="";
my $login_name_to_check="";
my $login_name_to_check_mod="";
my $login_name_ok="";
my $klartext_passwort="";
my $new_admin_group="";
my $shell="";
#my $quotastring="";

my %user_login_hash=();

#my $datei="";

#my $i;

my $dev_null="1>/dev/null 2>/dev/null";

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$DevelConf::testen=0;
$DevelConf::system=0;
$Conf::log_level=1;
my $help=0;
my $info=0;
my $loginname="";
my $gruppe="";

# Parsen der Optionen
my $testopt=GetOptions(
           "test|t" => \$DevelConf::testen,
           "login|user|u|l=s" => \$loginname,
           "group|class|klasse|g|c|k=s" => \$gruppe,
           "verbose|v+" => \$Conf::log_level,
           "system|s" => \$DevelConf::system,
           "info|i" => \$info,
           "help|h" => \$help
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-add adds users to the sophomorix database and the authentification system

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  -l  loginname /   --loginame loginname / -u loginname --user loginname
  -g class / --group class / -c class / --class class / -k class / --klasse class
  -t  / --test

Please see the sophomorix-add(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --info
if ($info==1) {
   # Ausgabe der Anlegbaren user
   print "\nThe following users can be added:\n";
   print "(Fields with --- are automatically created by sophomorix-add):\n\n";
   printf "%-10s %-6s %-10s %-4s %-10s %-10s %-35s\n",
          "login",
          "id",
          "AdminClass",
          "gid",
          "Old-Pass",
          "unid",
          "Identifier";
   &linie;

   open(USERHINZU,"${DevelConf::ergebnis_pfad}/sophomorix.add") || die "Fehler: $!";
      while(<USERHINZU>){
        chomp();
        ($new_admin_group,
         $identifier,
         $wunsch_login,
         $wunsch_passwort,
         $wunsch_id,
         $wunsch_gid,
         $unid)=split("::");
        printf "%-10s %-6s %-10s %-4s %-10s %-10s %-35s\n",
               "$wunsch_login",
               "$wunsch_id", 
               "$new_admin_group",
	       "$wunsch_gid",
               "$wunsch_passwort",
               "$unid", 
               "$identifier";
     }
   close(USERHINZU);
   print "\n";
   exit;
}


# --loginname
if ($loginname ne "") {
  #
  print "Loginname $loginname angegeben.\n";
}

# --gruppe
if ($gruppe ne "") {
  #
  print "Gruppe/Klasse $gruppe angegeben.\n";
}



################################################################################
# Start
################################################################################

my $dbh=&db_connect();


################################################################################
# User (Schüler und Lehrer) anlegen aus sophomorix.add
################################################################################

# repair.directories einlesen
&get_alle_verzeichnis_rechte();

# ===========================================================================
# Abbruch, wenn sophomorix.add fehlt oder leer
# ===========================================================================
if (not (-s "${DevelConf::ergebnis_pfad}/sophomorix.add")) {
  print "\n  Die Datei\n\n";
  print "    ${DevelConf::ergebnis_pfad}/sophomorix.add\n\n";
  print "  ist leer oder wurde nicht gefunden.\n\n";
  print "  Es sind keine User anzulegen\n\n";
  print "   sophomorix-add beendet sich deshalb!\n\n";
  exit; 
}


# sophomorix database sichern
&backup_user_database($zeit, "before.add");
# sophomorix.add mitloggen
&backup_amk_file($zeit,"add","before");

# Verbessern, siehe idealx
if (${DevelConf::debian} ne "yes") {
   &do_falls_nicht_testen("rcnscd stop"); # Wozu?
}


my @passwort_zeichen=&get_passwd_charlist();


# ===========================================================================
# Alle vorhandenen Loginnamen einlesen 
# ===========================================================================
%user_login_hash=&user_login_hash();


# Datei mit den Schülern, die nicht angelegt wurden
open(NOCHANLEGEN,">${DevelConf::ergebnis_pfad}/sophomorix.add.new") || die "Fehler: $!";


open(USERHINZU,"${DevelConf::ergebnis_pfad}/sophomorix.add") || die "Fehler: $!";
while(<USERHINZU>){
   $user_nummer++;
   chomp();
   # absplitten von Wunschlogin und Wunschpasswort
   ($new_admin_group,
    $identifier,
    $wunsch_login,
    $wunsch_passwort,
    $wunsch_id,
    $wunsch_gid,
    $unid)=split("::");

   if (not defined $unid){
       $unid="";
   }

   ($nachname,$vorname,$gebdat)=split(";", $identifier);
   # GECOS-Feld:
   $gecos=$vorname." ".$nachname; 

   # Falls Wunsch-Login-Namen gegeben, diesen benutzen
   if ($wunsch_login ne "---"){
    $login_name_to_check="$wunsch_login";
   } else {
    # Sonst: Login-Name bilden
    $login_teil_1=substr($nachname,0,$Conf::schueler_login_nachname_zeichen);
    $login_teil_2=substr($vorname,0,$Conf::schueler_login_vorname_zeichen);
    # Zu prüfender Loginname
    $login_name_to_check="$login_teil_1"."$login_teil_2";
   }

   # Existenz prüfen ???ldap
   if (not exists($user_login_hash{$login_name_to_check})){
       # Wenn der zu prüfende Login-Name nicht schon vorhanden
       # Kann er benutzt werden 
       $login_name_ok=$login_name_to_check;
   } elsif ($wunsch_login ne "---"){
       # Wunsch-Login angegeben
       # Abbrechen, Wunsch-Login soll nicht verändert werden
       print "\nERROR:\n";
       print "Cannot add user   $vorname $nachname \n";
       print "Loginname   $wunsch_login   exists in the system already!\n\n";
       next;
   } else {
       # Wenn schon vorhanden, muss Login-Namen modifiziert werden
       $login_name_to_check_mod="$login_name_to_check";
       my $i=1; # Erster Wert für Zusatzziffer
       while (exists($user_login_hash{$login_name_to_check_mod})) { 
          # An zu prüfenden Loginame eine Ziffer anhängen
          $login_name_to_check_mod="$login_name_to_check"."$i";
          $i=$i+1;
       }
       # Nun kann modifizierter Loginname benutzt werden
       $login_name_ok=$login_name_to_check_mod;
   }


   # Login-Name des anzulegenden users darf ab jetzt nicht mehr verwendet werden,
   # deshalb dem Hash mit vorhandenen Loginnamen hinzufügen
   $user_login_hash{$login_name_ok}="neu";


   # Klartext-Passwort
   if ($wunsch_passwort eq "---") {
       $klartext_passwort=&get_plain_password($new_admin_group,@passwort_zeichen);
   } else {
       $klartext_passwort=$wunsch_passwort
   }

   # Shell
   $shell=&shell_ermitteln($new_admin_group);

   # Abbruch, wenn nicht der richtige loginname angelegt wird
   if ($loginname ne "") {
     if ($login_name_to_check ne $loginname) {
        print "##### $login_name_to_check wird nicht angelegt!\n";
        print NOCHANLEGEN "$_\n";
        next;
     }
   }

   # Abbruch, wenn nicht die richtige klasse angelegt wird
   if ($gruppe ne "") {
     if ($new_admin_group ne $gruppe) {
        print "$login_name_to_check ($new_admin_group) wird nicht angelegt!\n";
        print NOCHANLEGEN "$_\n";
        next;
     }
   }

   # Ermittelte Daten ausgeben
   if($Conf::log_level>=1){
      print "\n";
      &titel("Creating User $user_nummer :");
      print("Nachname:         $nachname\n");
      print("Vorname:          $vorname\n");
      print("Geburtsdatum:     $gebdat\n");
      print("Identifier:       $identifier\n");
      print("AdminClass:       $new_admin_group\n"); # lehrer oder klasse
      print("Unix-gid:         $wunsch_gid\n"); # lehrer oder klasse
      print("GECOS:            $gecos\n");
      print("Login (prüfen):   $login_name_to_check\n");
      print("Login (OK):       $login_name_ok\n");
      print("Passwort:         $klartext_passwort\n");
      print("Unix-id:          $wunsch_id\n");
      if ($new_admin_group eq ${DevelConf::teacher}) {
         # Es ist ein Lehrer
         print("Shell (Lehrer):  $shell\n"); 
      } else {
         # Es ist ein Schüler
         print("Shell (Schüler):  $shell\n"); 
      }
   }

   # Nun wird der User angelegt
  
   # 1. Entry in sophomorix database
   &create_user_db_entry($nachname,
                         $vorname,
                         $gebdat,
                         $new_admin_group,
                         $login_name_ok,
                         $klartext_passwort,
                         $shell,
                         "",
                         $unid,
                        );

  # 2. Add the class (db and dirs,links, ...)
  if (${DevelConf::db_backend} ne "pgldap"){
     # this is done already with create_user_db_entry, when using postgres
     &create_class_db_entry($new_admin_group);
     &add_class_to_sys($new_admin_group,$wunsch_gid); # VOR add_user_to_sys !
  }
  &provide_class_files($new_admin_group);

  # 3. Add  user to db
  &add_user_to_sys($nachname,
                   $vorname,
                   $gebdat,
                   $new_admin_group,
                   $login_name_ok,
                   $klartext_passwort,
                   $shell,
                   $wunsch_id);
  &set_sophomorix_passwd($login_name_ok,$klartext_passwort);

#  # 4. Add user to webmin
#  &create_webmin_account($login_name_ok);

  # 5. Creating dirs, links for the user
  &provide_user_files($login_name_ok,$new_admin_group);
}

close(USERHINZU);
close(NOCHANLEGEN);

# webmin
# dont restart webmin (this is done later)
&do_falls_nicht_testen("sophomorix-webmin --modules --no-restart");


# Webmin neu starten
if (-e "/etc/init.d/webmin"){
   &do_falls_nicht_testen("/etc/init.d/webmin restart");
}


# ?????
if (${DevelConf::debian} ne "yes") {
   &do_falls_nicht_testen("rcnscd start");
}

# später ???
&print();

# sophomorix.add moven, damit sie nicht nochmal eingelesen werden kann
&backup_amk_file($zeit,"add","after","mv");
# sophomorix database sichern
&backup_user_database($zeit, "after.add");

# ===========================================================================
# add.pdf, add.csv mitloggen
# ===========================================================================
&do_falls_nicht_testen(
    "cp ${DevelConf::druck_pfad}/add.pdf ${DevelConf::log_pfad}/${zeit}.add.pdf",
    "chmod 600 ${DevelConf::log_pfad}/${zeit}.add.pdf",
    "chown root:root ${DevelConf::log_pfad}/${zeit}.add.pdf",

    "cp ${DevelConf::druck_pfad}/add.csv ${DevelConf::log_pfad}/${zeit}.add.csv",
    "chown root:root ${DevelConf::log_pfad}/${zeit}.add.pdf"
		     );



# Falls nur getestet wird, darf die Datei nicht ersetzt werden
if ($DevelConf::testen==0) {
   # Kein Test
   rename("${DevelConf::ergebnis_pfad}/sophomorix.add.new",
          "${DevelConf::ergebnis_pfad}/sophomorix.add" );
} else {
   # Test
   system("rm -f ${DevelConf::ergebnis_pfad}/sophomorix.add.new > /dev/null");
}

# Nur root darf lesen
#system ("chown root:root $DevelConf::protokoll_datei");
#system ("chmod 600 $DevelConf::protokoll_datei");



if ($Conf::use_quota eq "yes") {
    system("sophomorix-quota --noninteractive");
} else {
    &titel("NOT setting quota");
}




&titel("sophomorix-add terminated regularly");







################################################################################
# Subroutinen
################################################################################

# ===========================================================================
# sophomorix-print aufrufen
# ===========================================================================
sub print {
   if ($DevelConf::testen==0) {
      # Mit 1mal sophomorix-print aufrufen sollte es tun, tut es aber nicht
      system("$DevelConf::executable_pfad/sophomorix-print");
   } else {
       &titel("NOT generating print data (Test)");
#      print "\n\nDruckdaten werden NICHT erzeugt: Testmodus\n\n"; 
   }
}


# ===========================================================================
# Shell ermitteln
# ===========================================================================
sub shell_ermitteln {
   my ($gruppe)=@_;
   my $login_shell;
   # Shell ermitteln (Lehrer <> Schüler)
      if ($gruppe eq ${DevelConf::teacher}) {
         # Es ist ein Lehrer
         if ($Conf::lehrer_per_ssh eq "ja") {
             $login_shell="/bin/bash";
           } else {
             $login_shell="/bin/false";
           }
       } else {
         # Es ist ein Schüler
         if ($Conf::schueler_per_ssh eq "ja") {
             $login_shell="/bin/bash";
           } else {
             $login_shell="/bin/false";
	   }
       }
 return $login_shell;
}





# old, not used

# ===========================================================================
# Eintrag Users in webmin machen
# ===========================================================================
sub create_webmin_account {
   my ($user)=@_;
   # files to modify
   my $wmsu="/etc/webmin/miniserv.users";
   my $webminacl="/etc/webmin/webmin.acl";

   # miniserv.users entry
   if (not -e $wmsu){
       system ("install -d /etc/webmin");
       system ("touch $wmsu");
   }
   # append entry
   open (MINISERVUSERS, ">>$wmsu") ||   die "Cannot open $wmsu \n";
   if ($DevelConf::testen==0) {
      # Ausführen: User anhängen
      print MINISERVUSERS "$user:x:0::\n";
   } else {
      # Ausgeben
      print "Appending Line to $wmsu (Test):   $user:x:0::\n";
   }
   close(MINISERVUSERS);


   # webmin.acl entry
   if (not -e $webminacl){
       system ("install -d /etc/webmin");
       system ("touch $webminacl");
   }
   # append entry
   open (WEBMINACL, ">>$webminacl") ||   die "Cannot open $webminacl \n";
   if ($DevelConf::testen==0) {
      # Ausführen: User anhängen
      print WEBMINACL "$user:\n";
   } else {
      # Ausgeben
      print "Appending Line to $webminacl (Test):   $user:\n";
   }
   close(WEBMINACL);
}


