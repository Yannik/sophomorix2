#!/usr/bin/perl -w
# Dieses Script (sophomorix-add) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixBase;


# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                        create_user_db_entry
                                        backup_user_database
                                       );

# list of functions to load if db is 'ldap'
use if ${DevelConf::db_backend} eq 'ldap' ,
    'Sophomorix::SophomorixLDAP' => qw(show_modulename);;



# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                           add_class_to_sys
                                           add_user_to_sys
                                          );



# show the Database Modules that are loaded
&show_modulename();
&show_sys_modulename();

my $zeit=&zeit_stempel;
my $user_nummer=0;

my $identifier;
my $nachname;
my $vorname;
my $gebdat;
my $gecos="";
my $wunsch_login;
my $wunsch_passwort;
my $wunsch_id;
my $wunsch_gid;
my $login_teil_1="";
my $login_teil_2="";
my $login_name_to_check="";
my $login_name_to_check_mod="";
my $login_name_ok="";
my $klartext_passwort="";
my $new_admin_group="";
my $shell="";
my $quotastring="";

#my %schueler_ok_hash=();
my %user_login_hash=();

my %login_quota=();
my $login_quota_typ="";

my $webmin_neustart=0;

my $i;

my $dev_null="1>/dev/null 2>/dev/null";

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$DevelConf::testen=0;
$DevelConf::system=0;
$Conf::log_level=1;
my $help=0;
my $info=0;
my $loginname="";
my $gruppe="";

# Parsen der Optionen
my $testopt=GetOptions(
           "test|t" => \$DevelConf::testen,
           "login|user|u|l=s" => \$loginname,
           "group|class|klasse|g|c|k=s" => \$gruppe,
           "verbose|v+" => \$Conf::log_level,
           "system|s" => \$DevelConf::system,
           "info|i" => \$info,
           "help|h" => \$help
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-add adds users to the sophomorix database and the authentification system

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  -l  loginname /   --loginame loginname / -u loginname --user loginname
  -g class / --group class / -c class / --class class / -k class / --klasse class
  -t  / --test

Please see the sophomorix-add(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --info
if ($info==1) {
   # Hash mit identifier--klasse
#   %schueler_ok_hash=&schueler_ok_hash();
   # Ausgabe der Anlegbaren user
    print "\nThe following users can be added:\n";
   print "(Fields with --- are automatically created by sophomorix-add):\n\n";
   printf "%-10s %-6s %-10s %-4s %-10s %-40s\n",
          "login",
          "id",
          "AdminClass",
          "gid",
          "Old-Pass",
          "Identifier";
   &linie;

   open(USERHINZU,"${DevelConf::ergebnis_pfad}/sophomorix.add") || die "Fehler: $!";
      while(<USERHINZU>){
        chomp();
        ($new_admin_group,
         $identifier,
         $wunsch_login,
         $wunsch_passwort,
         $wunsch_id,
         $wunsch_gid)=split("::");
        printf "%-10s %-6s %-10s %-4s %-10s %-40s\n",
               "$wunsch_login",
               "$wunsch_id", 
               "$new_admin_group",
	       "$wunsch_gid",
               "$wunsch_passwort", 
               "$identifier";
     }
   close(USERHINZU);
   print "\n";
   exit;
}


# --loginname
if ($loginname ne "") {
  #
  print "Loginname $loginname angegeben.\n";
}

# --gruppe
if ($gruppe ne "") {
  #
  print "Gruppe/Klasse $gruppe angegeben.\n";
}



################################################################################
# Start
################################################################################

my $datei="";

################################################################################
# Soll-Quota ermitteln
################################################################################

# später mit ldap


#if($Conf::log_level>=3){
      &titel("Calculating quota for new users ...");
#}

my %standard_quota=();
my %lehrer_quota=();
my %klassen_quota=();
my @quota_fs_liste=();


if ($Conf::use_quota eq "yes") {
   # quota.txt auslesen
   %standard_quota=&get_standard_quota();

   # lehrer.txt auslesen
   %lehrer_quota=&get_lehrer_quota();

   # schulinfo.txt auslesen
   %klassen_quota=&get_klassen_quota();

   # Quotierte Dateisysteme ermitteln
   @quota_fs_liste=&get_quota_fs_liste();
}


#  project database auslesen
#  AdminClass - AddQuota
#my %project_add_quota=&get_project_add__quota();




################################################################################
# User (Schüler und Lehrer) anlegen aus sophomorix.add
################################################################################

# repair.directories einlesen
&get_alle_verzeichnis_rechte();

# ===========================================================================
# Abbruch, wenn sophomorix.add fehlt oder leer
# ===========================================================================
if (not (-s "${DevelConf::ergebnis_pfad}/sophomorix.add")) {
  print "\n  Die Datei\n\n";
  print "    ${DevelConf::ergebnis_pfad}/sophomorix.add\n\n";
  print "  ist leer oder wurde nicht gefunden.\n\n";
  print "  Es sind keine User anzulegen\n\n";
  print "   sophomorix-add beendet sich deshalb!\n\n";
  exit; 
}


# sophomorix database sichern
&backup_user_database($zeit, "before.add");
# sophomorix.add mitloggen
&backup_amk_file($zeit,"add","before");

# Verbessern, siehe idealx
if (${DevelConf::debian} ne "yes") {
   &do_falls_nicht_testen("rcnscd stop"); # Wozu?
}


# Zeichen, die in den verschlüsselten Passwörtern vorkommen dürfen
# auslassen: 1,i,l,I,L,j
# auslassen: 0,o,O
# auslassen: Grossbuchstaben, die mit Kleinbuchstaben 
#            verwechselbar: C,I,J,K,L,O,P,S,U,V,W,X,Y,Z 
my @passwort_zeichen=('a','b','c','d','e','f','g','h','i','j','k',
                      'm','n','o','p','q','r','s','t','u','v',
                      'w','x','y','z',
                      'A','B','D','E','F','G','H','L','M','N','Q','R','T',
                      '2','3','4','5','6','7','8','9');


srand;
my $anzahl_zeichen=0;
my $chars="";
foreach $chars(@passwort_zeichen)              # Wieviele Zeichen gewaehlt?
{
  $anzahl_zeichen++;
};


# ===========================================================================
# Alle identifier von Schülern in schueler.ok in eine Hash-Tabelle
# ===========================================================================
#%schueler_ok_hash=&schueler_ok_hash();

# ===========================================================================
# Alle vorhandenen Loginnamen einlesen 
# ===========================================================================
%user_login_hash=&user_login_hash();


# Datei mit den Schülern, die nicht angelegt wurden
open(NOCHANLEGEN,">${DevelConf::ergebnis_pfad}/sophomorix.add.new") || die "Fehler: $!";


open(USERHINZU,"${DevelConf::ergebnis_pfad}/sophomorix.add") || die "Fehler: $!";
while(<USERHINZU>){
   $login_quota_typ="";
   $user_nummer++;
   chomp();
   # absplitten von Wunschlogin und Wunschpasswort
# alt   ($identifier,$wunsch_login,$wunsch_passwort)=split("::");
   # absplitten von Wunschlogin und Wunschpasswort
   ($new_admin_group,
    $identifier,
    $wunsch_login,
    $wunsch_passwort,
    $wunsch_id,
    $wunsch_gid)=split("::");

   ($nachname,$vorname,$gebdat)=split(";", $identifier);
   # Gruppennamen ermitteln, max 8 Zeichen, k als 1. Buchstaben vorsetzen
   # problematisch, da sich klassen erst nach 8 zeichen unterscheiden können????????????
   # Auf 14 hochgesetzt (groupadd erlaubt 16 Zeichen, 2 für Subklassen reserviert)
#   if ($schueler_ok_hash{$identifier} eq "lehrer") {
#      $new_admin_group="lehrer";
#   } else {
#       $new_admin_group=substr("k"."$schueler_ok_hash{$identifier}",0,14);
#   }
   # GECOS-Feld:
   $gecos=$vorname." ".$nachname; 

   # Falls Wunsch-Login-Namen gegeben, diesen benutzen
   if ($wunsch_login ne "---"){
    $login_name_to_check="$wunsch_login";
   } else {
    # Sonst: Login-Name bilden
    $login_teil_1=substr($nachname,0,$Conf::schueler_login_nachname_zeichen);
    $login_teil_2=substr($vorname,0,$Conf::schueler_login_vorname_zeichen);
    # Zu prüfender Loginname
    $login_name_to_check="$login_teil_1"."$login_teil_2";
   }

   # Existenz prüfen ???ldap
   if (not exists($user_login_hash{$login_name_to_check})){
       # Wenn der zu prüfende Login-Name nicht schon vorhanden
       # Kann er benutzt werden 
       $login_name_ok=$login_name_to_check;
   } elsif ($wunsch_login ne "---"){
       # Wunsch-Login angegeben
       # Abbrechen, Wunsch-Login soll nicht verändert werden
       print "\nFEHLER:\n";
       print "Kann User   $vorname $nachname   nicht anlegen\n";
       print "Wunsch-Login-Name   $wunsch_login   ist schon in Verwendung!\n\n";
       next;
   } else {
       # Wenn schon vorhanden, muss Login-Namen modifiziert werden
       $login_name_to_check_mod="$login_name_to_check";
       my $i=1; # Erster Wert für Zusatzziffer
       while (exists($user_login_hash{$login_name_to_check_mod})) { 
          # An zu prüfenden Loginame eine Ziffer anhängen
          $login_name_to_check_mod="$login_name_to_check"."$i";
          $i=$i+1;
       }
       # Nun kann modifizierter Loginname benutzt werden
       $login_name_ok=$login_name_to_check_mod;
   }


   # Login-Name des anzulegenden users darf ab jetzt nicht mehr verwendet werden,
   # deshalb dem Hash mit vorhandenen Loginnamen hinzufügen
   $user_login_hash{$login_name_ok}="neu";


# Klartext-Passwort
if ($wunsch_passwort eq "---") {
    $klartext_passwort=&klartext_passwort_ermitteln($new_admin_group);
 } else {
    $klartext_passwort=$wunsch_passwort
 }

# Shell
$shell=&shell_ermitteln($new_admin_group);

if($Conf::use_quota eq "yes"){
  # Quota
   if ($new_admin_group eq "lehrer") {
      # Es ist ein Lehrer
      if (exists $lehrer_quota{$login_name_ok}) {
         # Es gibt lehrerquota
         $login_quota{$login_name_ok}=$lehrer_quota{"$login_name_ok"};
         $login_quota_typ="Einzel-Lehrer-Quota";
      } else {
         $login_quota{$login_name_ok}=$standard_quota{"standard-lehrer"};
         $login_quota_typ="Standard-Lehrer-Quota";
      }
   } else {
      # Es ist ein Schüler
      if (exists $klassen_quota{$new_admin_group}) {
         # Es gibt klassenquota
         $login_quota_typ="Klassen-Quota";
         $login_quota{$login_name_ok}=$klassen_quota{"$new_admin_group"};
      } else {
         # standart-wert setzten
         # 1) im Hash %standard_quota
         # 2) den key standard-schueler suchen
         # 3) auf dessen Value (Referenz auf liste)
         # 4) eine neue Referenz setzten
         #$login_quota{$login_name_ok}=[@null_quota_liste];
         $login_quota{$login_name_ok}=$standard_quota{"standard-schueler"};
         $login_quota_typ="Standard-Schüler-Quota";
         # $login_quota{$login_name_ok}=$standard_quota{"standard-lehrer"};
       }
   }
}
# Test
#my @test_array=("0-0-0-0","test","test2");
#$login_quota{"michelgr"}=\@test_array;

   # Abbruch, wenn nicht der richtige loginname angelegt wird
   if ($loginname ne "") {
     if ($login_name_to_check ne $loginname) {
        print "##### $login_name_to_check wird nicht angelegt!\n";
        print NOCHANLEGEN "$_\n";
        next;
     }
   }


   # Abbruch, wenn nicht die richtige klasse angelegt wird
   if ($gruppe ne "") {
     if ($new_admin_group ne $gruppe) {
        print "$login_name_to_check ($new_admin_group) wird nicht angelegt!\n";
        print NOCHANLEGEN "$_\n";
        next;
     }
   }


# Ermittelte Daten ausgeben
  if($Conf::log_level>=1){
      print "\n";
      &titel("Creating User $user_nummer :");
      print("Nachname:         $nachname\n");
      print("Vorname:          $vorname\n");
      print("Geburtsdatum:     $gebdat\n");
      print("Identifier:       $identifier\n");
      print("AdminClass:       $new_admin_group\n"); # lehrer oder klasse
      print("Unix-gid:         $wunsch_gid\n"); # lehrer oder klasse
      print("GECOS:            $gecos\n");
      print("Login (prüfen):   $login_name_to_check\n");
      print("Login (OK):       $login_name_ok\n");
      print("Passwort:         $klartext_passwort\n");
      print("Unix-id:          $wunsch_id\n");
      if ($new_admin_group eq "lehrer") {
         # Es ist ein Lehrer
         print("Shell (Lehrer):  $shell\n"); 
       } else {
         # Es ist ein Schüler
         print("Shell (Schüler):  $shell\n"); 
       }
       { # Klammern um $j lokal zu halten, Beginn
       my $j; 
       $quotastring="";
          for ($j=0; $j < @quota_fs_liste; $j++){
             print ("Quota:       ${ $login_quota{$login_name_ok} }[$j]");
             print ("  on $quota_fs_liste[$j]  ($login_quota_typ)\n");
             if ($quotastring eq ""){
                $quotastring=${ $login_quota{$login_name_ok} }[$j];
             } else {
                $quotastring=$quotastring."+".${ $login_quota{$login_name_ok} }[$j];
	     }
          }
       } # Klammern um $j lokal zu halten, Ende
       print "Quotastring: $quotastring \n";
  }

  # Nun wird der User angelegt
  
  # 1. Entry in sophomorix database
  &create_user_db_entry($nachname,
                        $vorname,
                        $gebdat,
                        $new_admin_group,
                        $login_name_ok,
                        $klartext_passwort,
                        $shell,
                        $quotastring);

  # 2. Add the class (db and dirs,links, ...)
  &add_class_to_sys($new_admin_group,$wunsch_gid); # VOR add_user_to_sys !
  &provide_class_files($new_admin_group);

  # 3. Add  user to db
  &add_user_to_sys($nachname,
                   $vorname,
                   $gebdat,
                   $new_admin_group,
                   $login_name_ok,
                   $klartext_passwort,
                   $shell,
                   $wunsch_id);
  &set_password($login_name_ok,$klartext_passwort);

  # 4. Add teacher to webmin
  if ($new_admin_group eq "lehrer"){
     &webmin_eintrag($login_name_ok);
  }

  # 5. Creating dirs, links for the user
  &provide_user_files($login_name_ok,$new_admin_group);

  # 6. Setting quota 
  &setze_quota($DevelConf::system,
               $login_name_ok, 
               \@quota_fs_liste, 
               \@{ $login_quota{$login_name_ok} });
}

close(USERHINZU);
close(NOCHANLEGEN);


if ($webmin_neustart==1){
   # Webmin neu starten, falls Lehrer angelegt wurden:
  if (-e "/etc/init.d/webmin"){
    &do_falls_nicht_testen(
                           "/etc/init.d/webmin stop",
                           "/etc/init.d/webmin start"
                          );

  }
}



if (${DevelConf::debian} ne "yes") {
   &do_falls_nicht_testen("rcnscd start");
}

# später ???
&print();

# sophomorix.add moven, damit sie nicht nochmal eingelesen werden kann
&backup_amk_file($zeit,"add","after","mv");
# sophomorix database sichern
&backup_user_database($zeit, "after.add");

# ===========================================================================
# hinzu.pdf, hinzu.csv mitloggen
# ===========================================================================
&do_falls_nicht_testen(
    "cp ${DevelConf::druck_pfad}/hinzu.pdf ${DevelConf::log_pfad}/${zeit}.hinzu.pdf",
    "chmod 600 ${DevelConf::log_pfad}/${zeit}.hinzu.pdf",
    "chown root:root ${DevelConf::log_pfad}/${zeit}.hinzu.pdf",

    "cp ${DevelConf::druck_pfad}/hinzu.csv ${DevelConf::log_pfad}/${zeit}.hinzu.csv",
    "chown root:root ${DevelConf::log_pfad}/${zeit}.hinzu.pdf"
		     );



# Falls nur getestet wird, darf die Datei nicht ersetzt werden
if ($DevelConf::testen==0) {
   # Kein Test
   rename("${DevelConf::ergebnis_pfad}/sophomorix.add.new",
          "${DevelConf::ergebnis_pfad}/sophomorix.add" );
} else {
   # Test
   system("rm -f ${DevelConf::ergebnis_pfad}/sophomorix.add.new > /dev/null");
}

# Nur root darf lesen
#system ("chown root:root $DevelConf::protokoll_datei");
#system ("chmod 600 $DevelConf::protokoll_datei");

&titel("sophomorix-add terminated regularly");













################################################################################
# Subroutinen
################################################################################

# ===========================================================================
# sophomorix-print aufrufen
# ===========================================================================
sub print {
   if ($DevelConf::testen==0) {
      # Mit 1mal sophomorix-print aufrufen sollte es tun, tut es aber nicht
      system("$DevelConf::executable_pfad/sophomorix-print");
   } else {
      print "\n\nDruckdaten werden NICHT erzeugt: Testmodus\n\n"; 
   }
}

# ===========================================================================
# Eintrag eines Lehers in webmin machen
# ===========================================================================
sub webmin_eintrag {
   my ($user)=@_;
   my $wmsu="/etc/webmin/miniserv.users";
   my $webminacl="/etc/webmin/webmin.acl";
   if (-e $wmsu){

      # ======================================================================
      #  miniserv.users mitloggen
      # ======================================================================
      &do_falls_nicht_testen(
         "cp  $wmsu ${DevelConf::log_pfad}/${zeit}.miniserv.users-vor",
         "chmod 600 ${DevelConf::log_pfad}/${zeit}.miniserv.users-vor"
      );

      open (MINISERVUSERS, ">>$wmsu") 
         ||   die "Kann $wmsu nicht öffnen\n";
        if ($DevelConf::testen==0) {
           # Ausführen: Lehrer anhängen
           print MINISERVUSERS "$user:x:0::\n";
        } else {
           # Ausgeben
           print "Schreibe (Test) $wmsu:   $user:x:0::\n";
        }
      close(MINISERVUSERS);

      # ======================================================================
      #  miniserv.users mitloggen
      # ======================================================================
      &do_falls_nicht_testen(
        "cp  $wmsu ${DevelConf::log_pfad}/${zeit}.miniserv.users-after",
        "chmod 600 ${DevelConf::log_pfad}/${zeit}.miniserv.users-after",
       # Webmin acl für den Lehrer erstellen
# ???????
#       "cp -f /etc/webmin/muster.acl /etc/webmin/$user.acl"
      );

#   &do_falls_nicht_testen(
#       "cp $webminacl  ${DevelConf::log_pfad}/${zeit}.webmin.acl-after",
#       "chmod 600 ${DevelConf::log_pfad}/${zeit}.webmin.acl-after",
#       # set webmin acl 
#       "cp -f /etc/webmin/acl/muster.acl /etc/webmin/acl/$user.acl"
#   );

      # Bei Debian bessere Lösung anstreben wie custom-Befehle
      if (${DevelConf::debian} ne "yes") {
         &do_falls_nicht_testen(
             # Angeben, welche Befehle der Lehrer in custom ausführen darf
             # Besser: Lehrer darf alle Befehle in der Rubrik Lehrer ausführen
             "cp -f /etc/webmin/custom/muster.acl /etc/webmin/custom/$user.acl"
         );
      }
      # Alle notwendigen Module den neuen Lehrern freigeben
      if (-e "/usr/sbin/sophomorix-webmin") {
         system("sophomorix-webmin");
      }
      # Mail-alias
      if (-e "/usr/sbin/sophomorix-mail") {
         system("sophomorix-mail");
      }
      # Webmin muss neu gestartet werden
      $webmin_neustart=1;
   }
}

# ===========================================================================
# Klartext-Passwort erzeugen
# ===========================================================================
sub klartext_passwort_ermitteln {
   my ($gruppe)=@_;
   my $passwort="";

     if ($gruppe eq "lehrer") {
         # Es ist ein Lehrer
            if ($Conf::lehrer_zufall_passwort eq "ja") {
            # Zufallspasswort erzeugen
            for ($i=1;$i<=${Conf::zufall_passwort_anzahl_lehrer};$i++)
              {
                 $passwort=$passwort.$passwort_zeichen[int (rand $anzahl_zeichen)];
              }
         } else {
            # Standard-Passwort verwenden
            $passwort="linux";
	  }

       } else {
         # Es ist ein Schüler
         if ($Conf::schueler_zufall_passwort eq "ja") {
             # Zufallspasswort erzeugen
             for ($i=1;$i<=${Conf::zufall_passwort_anzahl_schueler};$i++)
               {
                  $passwort=$passwort.$passwort_zeichen[int (rand $anzahl_zeichen)];
               }
           } else {
             # Standard-Passwort verwenden
             $passwort="linux";
           }
       }
    return $passwort;
}

# ===========================================================================
# Shell ermitteln
# ===========================================================================
sub shell_ermitteln {
   my ($gruppe)=@_;
   my $login_shell;
   # Shell ermitteln (Lehrer <> Schüler)
      if ($gruppe eq "lehrer") {
         # Es ist ein Lehrer
         if ($Conf::lehrer_per_ssh eq "ja") {
             $login_shell="/bin/bash";
           } else {
             $login_shell="/bin/false";
           }
       } else {
         # Es ist ein Schüler
         if ($Conf::schueler_per_ssh eq "ja") {
             $login_shell="/bin/bash";
           } else {
             $login_shell="/bin/false";
	   }
       }
 return $login_shell;
}

# ===========================================================================
# Passwort setzen Linux und Samba
# ===========================================================================
sub set_password {
    my ($login,$pass) = @_;
    if ($DevelConf::testen==0) {
       # Passwort verschlüsseln
       open(PASSWD,"| /usr/sbin/chpasswd");
          print PASSWD "$login:$pass\n";     
       close(PASSWD);
       # Passwort in smbpasswd setzen
       open(SMBPASSWD,"| /usr/bin/smbpasswd -s -a $login");
          print SMBPASSWD "$pass\n$pass\n"; 
       close(SMBPASSWD);
  } else {
     print "Test: Passwort setzten\n";
  }
}

















################################################################################
# Alte Subroutinen, nur zum nachgucken
################################################################################

sub neuer_linux_user_lehrer {
# Vorraussetzungen:
# /home/lehrer existiert schon
# /home/tausch/lehrer existiert schon

my $lehrer_home = "/home/lehrer/$login_name_ok";
my $www_home = "/home/lehrer/$login_name_ok/www";

# Zugriff auf zentrale Rechte
if ($DevelConf::testen==0) {
   &setup_verzeichnis("/home/lehrer/\$lehrer",
                      "/home/lehrer/$login_name_ok",
                      "$login_name_ok");

   &setup_verzeichnis("/home/lehrer/\$lehrer/windows",
                      "/home/lehrer/$login_name_ok/windows",
                      "$login_name_ok");

   &setup_verzeichnis("/home/lehrer/\$lehrer/www",
                      "$www_home");

   &setup_verzeichnis("/home/lehrer/\$lehrer/www/public_html",
                      "$www_home/public_html",
                      "$login_name_ok");
}

&do_falls_nicht_testen(
              # Link von windows aus
              "rm -rf /home/lehrer/$login_name_ok/windows/public_html",
              "cd /home/lehrer/$login_name_ok/windows; ln -s ../www/public_html public_html",
              # Link von Linux aus
              "cd /home/lehrer/$login_name_ok; ln -s www/public_html public_html"
);

&webmin_eintrag($login_name_ok);
# passwort verschlüsseln, samba
&passwort_setzen();
&protokolldatei_modifizieren();
}


# ===========================================================================
# Eintrag in user.protokoll
# ===========================================================================
# alt
sub protokolldatei_modifizieren {
  if ($DevelConf::testen==0) {
     open(PROTOKOLL,">>$DevelConf::protokoll_datei");
     
       # zeile anhängen
       print PROTOKOLL "$new_admin_group;$gecos;$login_name_ok;$klartext_passwort;$gebdat\n";
       # Datei Schließen, damit Schreiben erzwingen (Falls Programmabsturz)
     close(PROTOKOLL);
  } else {
       print "Test:   $DevelConf::protokoll_datei modifizieren\n";
  }

}



# ===========================================================================
# Schüler anlegen
# ===========================================================================
sub neuer_schueler {
my ($login, $gruppe, $gec, $passwort, $sh)=@_;
my $schueler_home = "/home/schueler/$gruppe/$login";
my $tausch_klasse = "/home/tausch/klassen/$gruppe";
my $www_home = "/home/schueler/$gruppe/$login/www";

# Eigentümer von /home/schueler/klasse/name REKURSIV ändern in:   user:lehrer
&do_falls_nicht_testen(
     "chown -R $login:lehrer $schueler_home"
);

if ($DevelConf::testen==0) {
   &setup_verzeichnis("/home/schueler/\$klassen/\$schueler",
                      "$schueler_home",
                      "$login");
   &setup_verzeichnis("/home/schueler/\$klassen/\$schueler/windows",
                      "$schueler_home/windows",
                      "$login");
   &setup_verzeichnis("/home/schueler/\$klassen/\$schueler/windows/sammelordner",
                      "$schueler_home/windows/sammelordner",
                      "$login");
   &setup_verzeichnis("/home/schueler/\$klassen/\$schueler/www",
                      "$www_home");
   &setup_verzeichnis("/home/schueler/\$klassen/\$schueler/www/public_html",
                      "$www_home/public_html",
                      "$login");
}


#www
&do_falls_nicht_testen(
           # Link von windows aus
           "rmdir $schueler_home/windows/public_html $dev_null",
           "cd $schueler_home/windows; ln -s ../www/public_html public_html",
           # Link von Linux aus
           "cd $schueler_home; ln -s www/public_html public_html"
);

&user_links($login, $gruppe);

&passwort_setzen();

&protokolldatei_modifizieren();

}







