#!/usr/bin/perl -w
# Dieses Script (sophomorix-move) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
#use Sophomorix::SophomorixFiles;
Getopt::Long::Configure ("bundling");

use DBI;
use Net::LDAP;

# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                        check_connections
                                        update_user_db_entry
                                        backup_user_database
                                        create_class_db_entry
                                       );

# list of functions to load if db is 'pgldap'
use if ${DevelConf::db_backend} eq 'pgldap' , 
    'Sophomorix::SophomorixPgLdap' => qw(show_modulename
                                        check_connections
                                        update_user_db_entry
                                        backup_user_database
                                        create_class_db_entry
                                        deleteuser_from_all_projects
                                        add_newuser_to_her_projects
                                       );

# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                           add_class_to_sys
                                          );

# list of functions to load if db is 'pgldap'
use if ${DevelConf::sys_db} eq 'pgldap' , 
    'Sophomorix::SophomorixSYSPgLdap' => qw(show_sys_modulename
                                           add_class_to_sys
                                          );

# show the Database Modules that are loaded
&show_modulename();
&show_sys_modulename();
&check_connections();


my $zeit=&zeit_stempel;
my $user_nummer=0;

my $alte_klasse;
my $neue_klasse;
my $login_versetzen;
my $old_status;
my $identifier;
my $alte_zeile="";
my $neue_zeile="";
my $new_home="";
my $new_homedir_above="";
my $old_home="";

my $altes_www="";
my $neues_www="";
my $www_link="";

#my %protokoll_hash;

my $k;
my $v;
my $key;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$DevelConf::testen=0;
$Conf::log_level=1;
my $help=0;
my $info=0;
my $alt_gruppe="";
my $neu_gruppe="";
my $loginname="";


# Parsen der Optionen
my $testopt=GetOptions(
           "test|t" => \$DevelConf::testen,
           "verbose|v+" => \$Conf::log_level,
           "login|user|u|l=s" => \$loginname,
           "oldclass|altklasse|a|o=s" => \$alt_gruppe,
           "newclass|neuklasse|n=s" => \$neu_gruppe,
           "info|i" => \$info,           
           "help|h" => \$help
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-move moves a user to a different AdminClass

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  -l  loginname /   --loginame loginname / -u loginname --user loginname
  -a klasse / --altklasse klasse / -o class / --oldclass class
  -n klasse / --neuklasse klasse / --newclass class
  -t  / --test

Please see the sophomorix-move(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --loginname
if ($loginname ne "") {
  #
  print "Loginname $loginname angegeben.\n";
}


# --altgruppe
if ($alt_gruppe ne "") {
  #
  print "Alte Gruppe/Klasse $alt_gruppe angegeben.\n";
}


# --neugruppe
if ($neu_gruppe ne "") {
  #
  print "Neue Gruppe/Klasse $neu_gruppe angegeben.\n";
}



# ===========================================================================
# Abbruch, wenn sophomorix.move fehlt oder leer
# ===========================================================================
if (not (-s "${DevelConf::ergebnis_pfad}/sophomorix.move")) {
  print "\n  Die Datei\n\n";
  print "    ${DevelConf::ergebnis_pfad}/sophomorix.move\n\n";
  print "  ist leer oder wurde nicht gefunden.\n\n";
  print "  Es sind keine User zu versetzen\n\n";
  print "  sophomorix-move beendet sich deshalb!\n\n";
  exit; 
}


# --info
if ($info==1) {
  open(USERVERSETZEN,"${DevelConf::ergebnis_pfad}/sophomorix.move") 
     || die "Fehler: $!";

      print "\nThe following users can be moved:\n\n";
      printf "%-12s %-18s %-18s %-18s \n","Login",
             "Old AdminClass","New AdminClass","Old Status";
      &linie;
    while(<USERVERSETZEN>){
      chomp();
      $user_nummer++;
      ($login_versetzen, $alte_klasse, $neue_klasse,$old_status)=split(/::/);
      if (not defined $old_status){$old_status=""};
      # Ausgabe
      printf "%-12s %-18s %-18s %-18s \n",
             "$login_versetzen","$alte_klasse","$neue_klasse", $old_status;
     }
     print "\n";
    exit;
}


# ===========================================================================
print ("sophomorix-move startet ...\n");
# ===========================================================================

# repair.directories einlesen
&get_alle_verzeichnis_rechte();


# sophomorix database sichern
&backup_user_database($zeit, "before.move");
# sophomorix.move mitloggen
&backup_amk_file($zeit,"move","before");



## Protokolldatei lesen
#%protokoll_hash=&protokoll_linien();
#
#if($Conf::log_level>=3){
#   # Nur zum ausgeben  
#   while (($key) = each %protokoll_hash){
#      printf "%-40s\n","$key";
#   }
#}




# Datei mit den Schülern, die nicht versetzt wurden
open(NOCHVERSETZEN,">${DevelConf::ergebnis_pfad}/sophomorix.move.neu") 
     || die "Fehler: $!";

open(USERVERSETZEN,"${DevelConf::ergebnis_pfad}/sophomorix.move") 
     || die "Fehler: $!";
while(<USERVERSETZEN>){
   chomp();
   $user_nummer++;
   ($login_versetzen, $alte_klasse, $neue_klasse,$old_status)=split(/::/);
   if (not defined $old_status){$old_status=""};
   # Home ermitteln
   # altes home ermiteln
   my @pwnam = getpwnam("$login_versetzen");
   $old_home="$pwnam[7]";
   if ($neue_klasse eq ${DevelConf::teacher}) {
      # in klasse lehrer versetzten
      $new_home="${DevelConf::homedir_teacher}/${login_versetzen}";
      $new_homedir_above="${DevelConf::homedir_teacher}";
   } else {
      # in andere Klasse versetzten (auch dachboden/speicher)
      $new_home="${DevelConf::homedir_pupil}/${neue_klasse}/${login_versetzen}";
      $new_homedir_above="${DevelConf::homedir_pupil}/${neue_klasse}";
   } 

   # Abbruch, wenn nicht der richtige loginname versetzt wird
   if ($loginname ne "") {
     if ($login_versetzen ne $loginname) {
        print "##### $login_versetzen wird nicht versetzt\n";
        print NOCHVERSETZEN "$_\n";
        next;
     }
   }
   # Abbruch, wenn nicht aus der richtigen Alt-Klasse versetzt wird
   if ($alt_gruppe ne "") {
     if ($alte_klasse ne $alt_gruppe) {
        print "##### $login_versetzen wird NICHT aus $alt_gruppe versetzt!\n";
        print NOCHVERSETZEN "$_\n";
        next;
     }
   }
   # Abbruch, wenn nicht in die richtige Neu-Klasse versetzt wird
   if ($neu_gruppe ne "") {
     if ($neue_klasse ne $neu_gruppe) {
        print "##### $login_versetzen wird NICHT nach $neu_gruppe vesetzt!\n";
        print NOCHVERSETZEN "$_\n";
        next;
     }
   }


   #####################################
   # Ermittelte Daten ausgeben
   #####################################
   if($Conf::log_level>=1){
      print("\n##### Moving User $user_nummer to different class: \n");
      print("Login:                 $login_versetzen\n");
      print("Linux-Gruppe (Alt):    $alte_klasse\n");
      print("Linux-Gruppe (Neu):    $neue_klasse\n");
      print("Altes Home:            $old_home\n");
      print("Neues Home:            $new_home\n");
      print("Neues Homedir:         $new_homedir_above\n");
      print("Alter Status:          $old_status\n");
    }

   if ($neue_klasse eq ${DevelConf::teacher} && not $alte_klasse eq "speicher") {
      # Es ist die Gruppe lehrer beteiligt
      print("##### User kann nicht vesetzt werden!\n");
      print("In die Gruppe lehrer kann man nur aus dem speicher versetzt werden\n");
      next; # Nächster User
   } 


   # die Daten aus dem Tausch-Verzeichnis dem Schüler in sein home moven
   &save_tausch_klasse($login_versetzen, $alte_klasse);

   # Sicherstellen dass neue Klasse (Linux-Gruppe) existiert
   if ($neue_klasse ne ${DevelConf::teacher}) {
     &provide_class_files($neue_klasse);
     &create_class_db_entry($neue_klasse);
     &add_class_to_sys($neue_klasse);
   }
   # Benutzerdatenbank ändern
   # LDAP
   # usermod:
   # -d -m: home verschieben
   # -g : gruppe ändern
       if (${DevelConf::db_backend} ne "pgldap"){
          &do_falls_nicht_testen(
            "usermod -d $new_home -m -g $neue_klasse $login_versetzen"
	    );
       } else {
          # move home directory
          &do_falls_nicht_testen(
            "mkdir -p $new_homedir_above",
            "mv $old_home $new_homedir_above"
	    );
          # change primary group
          # neue gruppe anlegen und gidnumber holen, falls erforderlich
          my $gidnumber=&create_class_db_entry($neue_klasse);
          &update_user_db_entry($login_versetzen, 
                          "Gid=$neue_klasse",
                         );

       }

   # Dateien im neuen home gehoeren nun der Klassengruppe.
   # Muss angepasst werden an Eigentümer lehrer
   &do_falls_nicht_testen(
        "chown -R .${DevelConf::teacher} $new_home",
        "chown .root $new_home/www"
   );

   # links 
   &user_links($login_versetzen, $neue_klasse, $alte_klasse);

   &deleteuser_from_all_projects($login_versetzen,0);
   &add_newuser_to_her_projects($login_versetzen,$neue_klasse);

   # Protokoll-Hash ändern
   # Alte Linie aus dem Hash löschen
#   delete($protokoll_hash{$alte_zeile});


   # user in db updaten
#   $protokoll_hash{$neue_zeile}="";
   if ($DevelConf::testen==0) {
       if ($neue_klasse eq "dachboden"){
          &update_user_db_entry($login_versetzen,
                      "AdminClass=$neue_klasse",
                      "Gid=$neue_klasse",
                      "ExitAdminClass=$alte_klasse");
       } elsif ($old_status eq "A") {
          &update_user_db_entry($login_versetzen,
                      "AdminClass=$neue_klasse",
                      "Gid=$neue_klasse",
                      "Status=A",
                      "TolerationDate=",
                      "DeactivationDate=");
       } else {
          &update_user_db_entry($login_versetzen,
                      "AdminClass=$neue_klasse",
                      "Gid=$neue_klasse");
       }
   } else {
      print "Nur Test: Daten in $DevelConf::protokoll_datei schreiben\n";
   }

}

close(USERVERSETZEN);
close(NOCHVERSETZEN);






## Verarbeitete Datei mit Zeitstempel versehen
## Nur wenn nicht leer ?????
#&do_falls_nicht_testen(
#    "mv ${DevelConf::ergebnis_pfad}/sophomorix.move ${DevelConf::log_pfad}/${zeit}.sophomorix.move",
## Nur für root lesbar machen
#    "chmod 600 ${DevelConf::log_pfad}/${zeit}.sophomorix.move"
#);

# sophomorix database sichern
&backup_user_database($zeit, "after.move");
# sophomorix.move mitloggen
&backup_amk_file($zeit,"move","after");

# ===========================================================================
# Nicht verarbeitete User nach sophomorix.move kopieren
# ===========================================================================
# Falls nur getestet wird, darf die Datei nicht ersetzt werden
if ($DevelConf::testen==0) {
   # Richtig
   rename("${DevelConf::ergebnis_pfad}/sophomorix.move.neu",
          "${DevelConf::ergebnis_pfad}/sophomorix.move" );
 } else {
   # Test
   system("rm -f ${DevelConf::ergebnis_pfad}/sophomorix.move.neu > /dev/null");
 }


print ("\nsophomorix-move endet ...\n");
