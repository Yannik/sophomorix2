#!/usr/bin/perl -w
# Dieses Script (sophomorix-webmin) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# todo:

#--student-account: make sure, that account for students exists 
#--teacher-account: ''

# Bibliotheken
use strict;
use Getopt::Long;
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;
Getopt::Long::Configure ("bundling");

#use Schedule::at;

# Einlesen der Konfigurationsdatei für Entwickler
#{ package DevelConf ; do "/etc/sophomorix/devel/user/sophomorix-devel.conf"}

# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                       );

# list of functions to load if db is 'ldap'
use if ${DevelConf::db_backend} eq 'ldap' ,
    'Sophomorix::SophomorixLDAP' => qw(show_modulename);;


# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if sys_db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                          );

# show the Database Modules that are loaded
&show_modulename();
&show_sys_modulename();


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

my $webmin_lehrer_modules_config="${DevelConf::devel_pfad}/webmin-lehrermodule.txt";
my $webmin_admin_modules_config="${DevelConf::devel_pfad}/webmin-adminmodule.txt";
my $webmin_testing_modules_config="${DevelConf::config_pfad}/webmin-testmodule.txt";
my $webmin_modules_neu="/etc/webmin/webmin.acl.neu";

# Variablen für Optionen
#$DevelConf::testen=0;
$Conf::log_level=1;
my $help=0;
#my $info=0;
my $all_hosts=0;
my $localhost=0;
my $loghost=100;
my $auto_logout=5;
my $groups=0;
my $modules=0;
my $no_restart=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "verbose|v+" => \$Conf::log_level,
           "all-hosts" => \$all_hosts,
           "localhost" => \$localhost,
           "loghost=i" => \$loghost,
           "auto-logout=i" => \$auto_logout,
           "groups" => \$groups,
           "modules" => \$modules,
           "no-restart" => \$no_restart
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);


# check if I have to do nothing
if(not -e "/etc/webmin"){
  &titel("sphomorix-webmin: Not configuring webmin ... is not installed");
  exit; 
} else {
  &titel("sphomorix-webmin: Configuring webmin ... ");
}


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-webmin configures webmin

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  --all-hosts
  --localhost
  --auto-logout number_in_minutes
  --groups

Please see the sophomorix-webmin(8) man page for full documentation
');
   print "\n";
   exit;

   print "\nBeim Aufruf von $scriptname geschieht folgendes:\n\n";
   print " - Eine neue /etc/webmin/webmin.acl wird erzeugt.\n\n";
   print " - Module in $webmin_lehrer_modules_config\n";
   print "   werden allen usern in der Gruppe lehrer zugänglich.\n\n";
   print " - Module in $webmin_admin_modules_config\n";
   print "   werden admin zugänglich.\n\n";

   exit;
}



# --all-hosts
if ($all_hosts==1){
    my $file="/etc/webmin/miniserv.conf";
    if (not -e $file){
	print "webmin is not installed, $file missing\n\n";
        exit;
    }
    open(FILE, "<$file");
    open(TMP, ">$file.tmp");
    while (<FILE>){
        if (/^allow=/){
           # do nothing
        } else {
	   print TMP $_;
        }
    }
    close(FILE);
    close(TMP);
    system("mv $file.tmp $file");
    &restart_webmin();
}

# --localhost
if ($localhost==1){
    my $file="/etc/webmin/miniserv.conf";
    if (not -e $file){
	print "webmin is not installed, $file missing\n\n";
        exit;
    }
    my $done=0;
    open(FILE, "<$file");
    open(TMP, ">$file.tmp");
    while (<FILE>){
        if (/^allow=/){
	    print TMP "allow=127.0.0.1\n";
            $done=1;
        } else {
	   print TMP $_;
        }
    }
    if ($done==0){
     	print TMP "allow=127.0.0.1\n";
    }
    close(FILE);
    close(TMP);
    system("mv $file.tmp $file");
    &restart_webmin();
}


# --loghost
if ($loghost!=100){
    my $file="/etc/webmin/miniserv.conf";
    if (not -e $file){
	print "webmin is not installed, $file missing\n\n";
        exit;
    }
    my $done=0;
    open(FILE, "<$file");
    open(TMP, ">$file.tmp");
    while (<FILE>){
        if (/^loghost=/){
	    print TMP "loghost=$loghost\n";
            $done=1;
        } else {
	   print TMP $_;
        }
    }
    if ($done==0){
     	print TMP "loghost=$loghost\n";
    }
    close(FILE);
    close(TMP);
    system("mv $file.tmp $file");
    &restart_webmin();
}


# --auto-logout
if ($auto_logout!=5){
    my $file="/etc/webmin/miniserv.conf";
    if (not -e $file){
	print "webmin is not installed, $file missing\n\n";
        exit;
    }
    my $done=0;
    open(FILE, "<$file");
    open(TMP, ">$file.tmp");
    while (<FILE>){
        if (/^logouttime=/){
	    print TMP "logouttime=$auto_logout\n";
            $done=1;
        } else {
	   print TMP $_;
        }
    }
    if ($done==0){
     	print TMP "logouttime=$auto_logout\n";
    }
    close(FILE);
    close(TMP);
    system("mv $file.tmp $file");
    &restart_webmin();
}

# --group
if ($groups==1){
    my $file="/etc/webmin/webmin.groups";
    my @modules_teacher=();
    my @modules_student=();
    my @users=();
    my $line="";
    my $add_teacher=1;
    my $add_student=1;
    if (not -e $file){system("touch $file")}

    # search file if line exists
    open(FILE, "<$file") || die "Error: $! not found";
    while (<FILE>){
	chomp();
        my ($group,$users,$modules,$donnow)=split(/:/);
        if ($group eq ${DevelConf::teacher}){$add_teacher=0}
        if ($group eq ${DevelConf::student}){$add_student=0}
    }
    close(FILE);
    
    # add line if it doesn exist
    open(FILE, ">>$file") || die "Error: $! not found";
    if ($add_teacher==1){print FILE "${DevelConf::teacher}::::\n"}
    if ($add_student==1){print FILE "${DevelConf::student}::::\n"}
    close(FILE);

    # fill the lines with users
    open(FILE, "<$file") || die "Error: $! not found";
    open(TMP, ">${file}.tmp") || die "Error: $! not found";
    while (<FILE>){
	chomp();
        my ($group,$users,$modules,$donnow)=split(/:/);
        my @modules=split(/ /, $modules);

        if ($group eq ${DevelConf::teacher}){
            @modules_teacher=@modules;
            @users=&get_user_adminclass(${DevelConf::teacher});
            # create string
            my $string="";
            foreach my $item (@users){$string=$string." "."$item"}
            # remove first space
            $string=~s/^ //;
            print TMP "$group",":",
                      "$string",":",
                      "$modules",":",
	              "$donnow",":\n";

        } elsif ($group eq ${DevelConf::student}){
            @modules_student=@modules;
            my @users_pupil=&get_pupils_school();
            my @users_teacher=&get_user_adminclass(${DevelConf::teacher});
            @users = (@users_teacher, @users_pupil);
            # create string
            my $string="";
            foreach my $item (@users){$string=$string." "."$item"}
            # remove first space
            $string=~s/^ //;
            print TMP "$group",":",
                      "$string",":",
                      "$modules",":",
	              "$donnow",":\n";
        } else {
            # continue using this line unchanged
	    $line=$_."\n";
            print TMP $_."\n";
        }
    }
    close(FILE);
    close(TMP);
    system("mv $file.tmp $file");
    # ??? notwendig ?????
    &restart_webmin();
}







# --modules
if ($modules==1){
    my $miniserv="/etc/webmin/miniserv.users";
    my $webacl="/etc/webmin/webmin.acl";
    my @modules_teacher=();
    my @modules_student=();
    my @users=();
    my $line="";
    if (not -e $miniserv){
	print "webmin is not installed, $miniserv missing\n\n";
        exit;
    }
    if (not -e $webacl){
	print "webmin is not installed, $webacl missing\n\n";
        exit;
    }

    # fill miniserv with root
    open(MINISERV, "<$miniserv") || die "Error: $! not found";
    open(MINISERVTMP, ">${miniserv}.tmp") || die "Error: $! not found";
    open(WEBACL, "<$webacl") || die "Error: $! not found";
    open(WEBACLTMP, ">${webacl}.tmp") || die "Error: $! not found";

    while (<MINISERV>){
        my ($login,$pass,$unknown,$donnow,$last)=split(/:/);
        if ($login eq "root"){
	    print MINISERVTMP $_;
        }
    }

    while (<WEBACL>){
        my ($login,$modules)=split(/:/);
        if ($login eq "root"){
	    print WEBACLTMP $_;
        }
    }


    # admin
    my $admin_modules = &get_webmin_modules("admin");
    print MINISERVTMP "admin:x:0::\n";
    print WEBACLTMP "admin: ".$admin_modules."\n";

    # teachers
    my @users_teacher=&get_user_adminclass(${DevelConf::teacher});
    my $teacher_modules = &get_webmin_modules("teacher");
    print "TEACH:  $teacher_modules\n @users_teacher\n";

    foreach my $teacher (@users_teacher){
	my $miniserv_string=$teacher.":x:0::"."\n";
        print MINISERVTMP $miniserv_string;
	my $webacl_string=$teacher.": ".$teacher_modules."\n";
        print WEBACLTMP $webacl_string;
    }

    # students
    my @users_pupil=&get_pupils_school();
    my $pupil_modules = &get_webmin_modules("student");
    foreach my $pupil (@users_pupil){
	my $miniserv_string=$pupil.":x:0::"."\n";
        print MINISERVTMP $miniserv_string;
	my $webacl_string=$pupil.": ".$pupil_modules."\n";
        print WEBACLTMP $webacl_string;
    }

    close(MINISERV);
    close(MINISERVTMP);
    close(WEBACL);
    close(WEBACLTMP);

    system("mv $miniserv.tmp $miniserv");
    system("mv $webacl.tmp $webacl");
    # ??? notwendig ?????
    &restart_webmin();
}





sub get_webmin_modules {
    my ($group) = @_;
    my $file="${DevelConf::devel_webmin_path}/webmin-${group}-modules.conf";
    my $string="";
    print "File: $file\n";
    open(MOD, "<$file") || die "Error: $! not found";
    while (<MOD>){
       chomp();
       if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
       if(not /:/){next}; # Ohne : keine Zeile
       my ($mod,$option)=split(/:/);
       #print "Module: $mod \n";
       $string=$string." ".$mod;
    }
    return $string;
    close(MOD);    
}









sub restart_webmin{
    my $bin="/etc/init.d/webmin";
    if (not -e $bin){
       &titel("$bin is missing: webmin not installed?");       
    }
    if ($no_restart==0 and -e $bin){
       system("$bin restart");
    }
    
}


############################################################
# End of new command
############################################################



exit;




open(ADMINMODULENEU, ">$webmin_modules_neu");

# ===========================================================================
# alte webmin.acl sichern
# ===========================================================================
system("cp /etc/webmin/webmin.acl /etc/webmin/webmin.acl.old");



# ===========================================================================
# admin bearbeiten
# ===========================================================================

&titel("$webmin_admin_modules_config");

open(ADMINMODULE, 
    "$webmin_admin_modules_config") 
    || die "Fehler: $!";

   print ADMINMODULENEU "admin: ";
   while(<ADMINMODULE>){
      chomp(); # Returnzeichen abschneiden
      s/\s//g; # Spezialzeichen raus
      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      if($Conf::log_level>=3){
         print "Admin-Modul $_ gefunden\n";
       }
      # Eintragen
      print ADMINMODULENEU "$_ ";
    }
    # Ende der Datei
    print ADMINMODULENEU "\n";
    print "\n";
    
close(ADMINMODULE);




# ===========================================================================
# lehrer
# ===========================================================================

# String mit Lehrer-Modulen
my $modulstring="";

&titel("Lese $webmin_lehrer_modules_config ein ...");

open(LEHRERMODULE, 
    "$webmin_lehrer_modules_config") 
    || die "Fehler: $!";
   while(<LEHRERMODULE>){
      chomp(); # Returnzeichen abschneiden
      s/\s//g; # Spezialzeichen raus
      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      $modulstring="$modulstring"." $_";
      if($Conf::log_level>=3){
         print "Lehrer-Modul $_ gefunden\n";
         print "Modulstring:  $modulstring\n";
      }
   }
   print "\n";

close(LEHRERMODULE);




# ===========================================================================
# lehrer-testing-module
# ===========================================================================
my %testing_hash=();

&titel("Lese $webmin_testing_modules_config ein ...");

open(TESTINGMODULE, 
    "<$webmin_testing_modules_config") 
    || die "Fehler: $!";
   while(<TESTINGMODULE>){
      my @testing_lehrer=();
      my $lehrer_string="";
      my $modul="";
      chomp(); # Returnzeichen abschneiden
      s/\s//g; # Spezialzeichen raus
      if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
      if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
      if($Conf::log_level>=2){
         print "Testing-Modul-Zeile:  $_ \n";

      }
      # Zeile Verarbeiten
      ($modul, $lehrer_string) = split(/=/);
      @testing_lehrer=split(/,/,$lehrer_string);
      if($Conf::log_level>=2){
         print "\nModul: $modul\n";
         print "Lehrer: @testing_lehrer\n";
      }
      # Hash beladen
      foreach my $test_lehrer (@testing_lehrer) {
        # Prüfen. ob tatsächlich lehrer
        if(&check_lehrer("$test_lehrer")==0){exit};

        # falls vorhanden DAZUNEHMEN
        my $modul_neu="";
        if (exists ($testing_hash{$test_lehrer})) {
           $modul_neu=$testing_hash{$test_lehrer}." $modul";
           # Eintragen
           $testing_hash{$test_lehrer}="$modul_neu";
        } else {
           # Eintragen
           $testing_hash{$test_lehrer}="$modul";
        }

      }
   }
   print "\n";

close(TESTINGMODULE);




if($Conf::log_level>=3){
  # Ausgabe des testing zusatzstrings
  while (my ($key,$value) = each %testing_hash){
     printf "%-40s %3s\n","$key","---$value---";
  }
}



my $modulstring_plus="";
my @lehrer=&get_lehrer_in_schule();

foreach my $lehrer (@lehrer) {
   # Gibt es für diesen Lehrer noch in testing-module?
  if (exists $testing_hash{$lehrer}) {
     # testing-string anhängen
     $modulstring_plus="$modulstring"." $testing_hash{$lehrer}";
     # Eintragen
     print ADMINMODULENEU "$lehrer: "."$modulstring_plus"."\n";
  } else {
     # Eintragen
     print ADMINMODULENEU "$lehrer: "."$modulstring"."\n";

  }

}


close(ADMINMODULENEU);






# ===========================================================================
# webmin.acl ersetzten
# ===========================================================================
system("cp /etc/webmin/webmin.acl.neu /etc/webmin/webmin.acl");


# ===========================================================================
# generierte webmin.acl.neu löschen
# ===========================================================================
system("rm /etc/webmin/webmin.acl.neu");

 
# ===========================================================================
# config-Datei von Webmin erzeugen
# ===========================================================================


# Vorgaenger loeschen
unlink "/etc/webmin/config";

# slapd.conf-Datei oeffnen
open(WEBMINCONFIG,
     ">/etc/webmin/config") || die "Fehler: $!";




print WEBMINCONFIG ('os_version=7.0
lang_root=de
path=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin
passwd_pindex=1
lang=de
find_pid_command=ps auwwwx | grep NAME | grep -v grep | awk \'{ print $2 }\'
passwd_file=/etc/shadow
real_os_version=2.0/2.1
by_view=0
real_os_type=Schwabenlinux
ld_env=LD_LIBRARY_PATH
os_type=suse-linux
passwd_uindex=0
logtime=168
theme=
logusers=
logclear=
logfiles=1
log=1
logmodules=
');
