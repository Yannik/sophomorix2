#!/usr/bin/suidperl -w
#     Hey, EMACS: -*- perl -*-
# Dieses Script (sophomorix-teacher) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
# use log names of perl variables, i.e. $UID
use English;
use Sophomorix::SophomorixConfig;
use DBI;
use Sophomorix::SophomorixBase qw( check_options 
                                   linie
                                   handout
                                   collect
                                   get_alle_verzeichnis_rechte
                                 );
use Sophomorix::SophomorixAPI;
Getopt::Long::Configure ("bundling");

# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                       );
# list of functions to load if db is 'pgldap'
use if ${DevelConf::db_backend} eq 'pgldap' , 
    'Sophomorix::SophomorixPgLdap' => qw(show_modulename
                                       );




# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if sys_db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                          );

# list of functions to load if sys_db is 'pgldap'
use if ${DevelConf::sys_db} eq 'pgldap' , 
    'Sophomorix::SophomorixSYSPgLdap' => qw(show_sys_modulename
                                          );





############################################################
# Start
############################################################
$Conf::log_level=1;
my $help=0;
my $add="";
my $remove="";
my $teacher="";
my $handout=0;
my $collect=0;
my $collectcopy=0;
my $class="";
my $subclass="";
my $project="";

#my $copy=0;
#my $move=0;
#my $delete=0;

my $exam=0;
my $info=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "verbose|v+" => \$Conf::log_level,
           "help|h" => \$help,
           "add=s" => \$add,
           "remove=s" => \$remove,
           "teacher=s" => \$teacher,
           "handout" => \$handout,
           "collect" => \$collect,
           "collectcopy" => \$collectcopy,
           "class|c=s" => \$class,
           "subclass=s" => \$subclass,
           "project=s" => \$project,
           "exam" => \$exam,
           "info|i" => \$info,
          );

#           "copy" => \$copy,
#           "move" => \$move,
#           "delete" => \$delete,



# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);


# standard option für rsync: --delete
#if ($copy==0 and
#         $move==0 and
#         $delete==0){
#    # standard
#    $rsync="delete"
#} elsif ($copy==0 and
#         $move==1 and
#         $delete==0){
#    $rsync="move"
#} elsif ($copy==1 and
#         $move==0 and
#         $delete==0){
#    $rsync="copy"
#} elsif ($copy==0 and
#         $move==0 and
#         $delete==1){
#    $rsync="delete"
#} else {
#    print "You can only give on of the options:\n";
#    print "    --delete \n";
#    print "    --move \n";
#    print "    --copy \n";
#    exit;
#}


# repair.directories einlesen
&get_alle_verzeichnis_rechte();


my $UID_name=getpwuid($UID);
my $EUID_name=getpwuid($EUID);
my ($GID_name)=getgrgid($GID);
my ($EGID_name)=getgrgid($EGID);



print "UID:  $UID ($UID_name)\n",
      "EUID: $EUID ($EUID_name)\n",
      "GID:  $GID ($GID_name)\n", 
      "EGID: $EGID ($EGID_name)\n\n";



# make calls including path not tainted
$ENV{'PATH'} = '/bin:/usr/bin';



# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print "\n$scriptname manages your MyAdminClasses and distributes, collects and archives Data used during lessons or exams.\n";
   print('
Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  --add AdminClass
  --remove AdminClass
  --handout
  --collect

  --delete (standard)
  --copy
  --move

Options for the user root
  --teacher login

Please see the sophomorix-teacher(1) man pages for full documentation
');
   print "\n";
   exit;
}


# get login name of the user that calls the script
my $login=getpwuid($UID);
if ($login eq "root"){
    # if caller is root
    if ($teacher ne ""){
       $login=$teacher;
   } else {
       print "As root, you must specify a teacher with --teacher login \n";
       exit;
   }
}










############################################################
# Managing MyAdminClasses
############################################################


# show info if nothing has to be changed
if ($add eq "" and 
    $remove eq "" and
    $handout==0 and
    $collect==0 and
    $collectcopy==0
   ){
    $info=1;
}


# --add class
if ($add ne ""){
   my $result = &add_my_adminclass($login,$add);
   if ($result==0){
       print "ERROR: $add is not a valid AdminClass\n";
   } else {
       # add links
   }
   $info=1;
   exit;
}




# --remove class
if ($remove ne ""){
   my $result = &remove_my_adminclass($login,$remove);
   if ($result==0){
       print "ERROR: $remove is not existing in MyAdminClasses\n";
   } else {
       # remove links
   }
   $info=1;
   exit;
}


############################################################
# Info
############################################################

# --info
#
# Display info and exit
 
if ($info==1 and $collect==0 and $handout==0){
   my @list=&get_my_adminclasses($login);
   if ($#list==-1){
      print "\nTeacher $login has no AdminClasses in his list\n";
      print "Add a class with:   --add classname\n";
   } else {
      print "AdminClasses of $login:\n";
      foreach my $item (@list){
         print "   $item \n";
      }
   }
   exit;
} elsif ($info==1 and $collect==1 and $handout==0){
    # collect-info
    # ????? todo
   exit;
} elsif ($info==1 and $collect==0 and $handout==1){
   # handout-info
    my $ha_basedir = "${DevelConf::homedir_teacher}/$login/${Language::task_dir}";
    my $handout_dir = ""; 

    if ($class ne ""){
       $handout_dir = "${ha_basedir}/$class"; 
       my @list=&get_my_adminclasses($login);
       my $seen=0;
       foreach my $item (@list){
	   if ($item eq $class){$seen=1}
       }
       if ($seen==1){
          print "\nINFO: I would hand out $handout_dir to class $class:\n";
          &linie();
          system("ls $handout_dir");
          print "\n";
      } else {
          print "$class is not in MyAdmiClasses (add a class with:  --add class)\n";
      }
    }
    if ($subclass ne ""){
       $handout_dir = "${ha_basedir}/$subclass"; 
       print "\nINFO: I would hand out $handout_dir to subclass $subclass:\n";
       &linie();
       system("ls $handout_dir");
       print "\n";
    }
    if ($project ne ""){
       $handout_dir = "${ha_basedir}/$project"; 
       print "\nINFO: I would hand out $handout_dir to project $project:\n";
       &linie();
       system("ls $handout_dir");
       print "\n";
    }

   exit;
}



############################################################
# Handout
############################################################



# --handout
if ($handout==1 and ($class ne "" or $subclass ne "" or $project ne "")){
    my $group_type="";
    my $rsync="delete";
    print "Calling handout with rsync option $rsync\n";
    if ($class ne ""){
           &handout($login, $class,"class",$rsync);
    }
    if ($subclass ne ""){
           &handout($login, $subclass,"subclass",$rsync);
    }
    if ($project ne ""){
           &handout($login, $project,"project",$rsync);
    }


    exit;
}




############################################################
# Collect
############################################################


# --collect
if ($collect==1 and ($class ne "" or $subclass ne "" or $project ne "")){
    my $group_type="";
    my $rsync="move";
    print "Calling collect with rsync option $rsync\n";

    if ($class ne ""){
           &collect($login, $class,"class",$rsync,$exam);
    }
    if ($subclass ne ""){
           &collect($login, $subclass,"subclass",$rsync,$exam);
    }
    if ($project ne ""){
           &collect($login, $project,"project",$rsync,$exam);
    }
    exit;
}


# --collectcopy
if ($collectcopy==1 and ($class ne "" or $subclass ne "" or $project ne "")){
    my $group_type="";
    my $rsync="copy";
    print "Calling collect with rsync option $rsync\n";

    if ($class ne ""){
           &collect($login, $class,"class",$rsync,$exam);
    }
    if ($subclass ne ""){
           &collect($login, $subclass,"subclass",$rsync,$exam);
    }
    if ($project ne ""){
           &colect($login, $project,"project",$rsync,$exam);
    }
    exit;
}


