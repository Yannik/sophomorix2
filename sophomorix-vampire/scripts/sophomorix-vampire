#!/usr/bin/perl -w
# $Id$
# Dieses Script (sophomorix-vampire) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# Einlesen der Konfigurationsdatei für Entwickler
#{ package DevelConf ; do "/etc/sophomorix/devel/user/sophomorix-devel.conf"}


# Bibliotheken
use strict;
use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Sophomorix::SophomorixAPI;


# ===========================================================================
# Loading the db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::db_backend} eq 'files' , 
    'Sophomorix::SophomorixFiles' => qw(show_modulename
                                       );

# list of functions to load if db is 'ldap'
use if ${DevelConf::db_backend} eq 'ldap' ,
    'Sophomorix::SophomorixLDAP' => qw(show_modulename);



# ===========================================================================
# Loading the sys-db-Module, list of functions
# ===========================================================================
# list of functions to load if db is 'files'
use if ${DevelConf::sys_db} eq 'files' , 
    'Sophomorix::SophomorixSYSFiles' => qw(show_sys_modulename
                                          );

# show the Database Modules that are loaded
&show_modulename();
&show_sys_modulename();

my $server_key_location="";
my $command="";
my $fetch_files=0;

my $help=0;
my $clear=0;
my $server="";
my $sync_user=0;
my $sync_homes=0;
my $sync_dirs=0;
my $key=0;

my $loginname="";
my $classes="";
my $pupil=0;
my $rooms="";
my $ws=0;
my $force=0;
my @userlist=();
my $dir_old_files="/root/sophomorix-vampire";

my $old_version="2.x";


# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "clear" => \$clear,
           "server=s" => \$server,
           "sync-user" => \$sync_user,
           "sync-homes" => \$sync_homes,
           "sync-dirs" => \$sync_dirs,
           "key" => \$key,
           "files" => \$fetch_files,
           "login|user|u|l=s" => \$loginname,
           "class|klasse|c|k=s" => \$classes,
           "pupil|pupils" => \$pupil,
           "room|=s" => \$rooms,
           "workstations|workstation|ws" => \$ws,
           "force" => \$force,
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-vampire sucks all data from an old linux-ml-server and uses it

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  --server name / --server ip 
  --clear
  -l  login1, ... / --login login1, .../ -u login1, ... / --user login1, ...
  -c class / --class class 
  --pupils
  -r room / --room room
  --workstations

Please see the sophomorix-vampire(8) man pages for full documentation
');
   print "\n";
   exit;
}


if ($server eq ""){
    # try to fetch server ip
    if (-e "${DevelConf::vampire_path}/server"){
       open (SERVER, "<${DevelConf::vampire_path}/server");
       while (<SERVER>){
	   chomp();
           $server=$_;
       }
       close(SERVER);
       print "Using $server from ${DevelConf::vampire_path}/server as Server-IP\n";
    } else {
       # no IP available -> Error Message
       print "You must tell me which server I shall suck data from!\n";
       exit;
    }
} else {
    # save the server ip
    system("install -d ${DevelConf::vampire_path}");
    open (SERVER, ">${DevelConf::vampire_path}/server");
    print SERVER $server;
    close(SERVER);
}




############################################################
# Step 1: put a key on the server to be sucked out
############################################################

my $key_dsa="/root/.ssh/vampire_key_dsa";

if ($key==1) {
    # generate key
    print "* Step 1:  copying a key to a server\n";
    print "Generating a key ...\n";
    system("/usr/bin/ssh-keygen -f ${key_dsa} -t dsa -N ''");
    # copy key
    print "Copying public key to other server...\n";
    $command="ssh-copy-id -i ${key_dsa}.pub root\@${server}";
    system("$command");
} else {
    print "* Step 1:  --key \n",
          "   I assume you have a key on $server\n";
    # test this
}


############################################################
# Step 2: get some files
############################################################

if ($clear==1) {
    print "Fetching configuration data once again.\n";
    system("rm -rf $dir_old_files");
    system("mkdir $dir_old_files");
    $fetch_files=1,
}

if ($fetch_files==1){
    print "* Step 2:  fetching files to ${dir_old_files}\n";
    # reading the list of files to fetch from the old server
    my @files=&get_conf_lines("vampire_${old_version}_files");
    #foreach my $file (@files){
    #   print $file,"\n";
    #}
    foreach my $file (@files){
       $command="scp -i $key_dsa root\@${server}:$file $dir_old_files";
       system("$command");
    }
    # rename some files
    # put these in a file ?????????
    system("mv $dir_old_files/schulinfo.txt $dir_old_files/class_db");
    system("mv $dir_old_files/user.protokoll $dir_old_files/user_db");
} else {
    print "* Step 2:  --files\n",
          "   I assume you have fetched files already\n";
}


############################################################
# add the users
############################################################
if ($sync_user==1){
   print "* Step 3:  synchronizing users\n";
   system("cp ${dir_old_files}/schueler.txt ${DevelConf::users_pfad}/schueler.txt");
   system("cp ${dir_old_files}/lehrer.txt ${DevelConf::users_pfad}/lehrer.txt");
   system("sophomorix-check --get-info-from-old-files ${dir_old_files}");
# alles
#   system("sophomorix-add");
   system("sophomorix-add -c m1kb2t");
   system("sophomorix-move");
} else {
    print "* Step 3:  --sync-users\n",
          "   I assume you have synchronized users already\n";
}

# check the id of the group teacher
# is it the same as in ml 2.2?



############################################################
# synchronize the user data
############################################################


# create userlist with options
if ($loginname ne "" or $classes ne "" or $pupil!=0 or $rooms ne "" or $ws!=0){
    # create the list of users
    &titel("Creating a userlist from options ...");
    if ($force==1){
        @userlist=&create_userlist($loginname,$classes,$pupil,$rooms,$ws,0);
    } else {
        # check the users
        @userlist=&create_userlist($loginname,$classes,$pupil,$rooms,$ws,1);
    }
    if ($#userlist+1==0){
         print "INFO: No valid users given\n";
         $help=1;
    }
}


if ($sync_homes==1){
   print "* Step 4:  synchronizing user homes\n";
   &print_list_column(6,"Userlist for synchronising \$HOME",@userlist);
   # do this for all users
   foreach my $user (@userlist){
     my $old_home="";
     my $new_home="";
     my $command="";
     # look up homes in old passwd
     open(OLD, "<${dir_old_files}/passwd");
     while (<OLD>){
	my @list=split(/:/);
        if ($list[0] eq $user){
            $old_home=$list[5]."/";            
        }
     }
     close(OLD);

     # look up new homes  in passwd
     setpwent();
     while (my @list=getpwent()) {
        if ($list[0] eq $user){
            #print "$list[7]\n";
            $new_home=$list[7]."/";
        }
     }
     endpwent();

     # rsync all homes
     print "\n";
     &titel("Synchronizig home of user $user:");
     print "   $old_home --> $new_home\n";
     $command="/usr/bin/rsync -e \"ssh -i $key_dsa\" -avz --delete  root\@${server}:$old_home $new_home";
     #print "$command\n";
     system($command); 


    # repair directories
    # needed to correct permissions owner www-run becomes www-data, ...

    # sync mail (the dir in /var/spool/mail) 
   }
} else {
    print "* Step 4:  --sync-homes\n",
          "   I assume you have synchronized user homes already\n";
}



# what about horde database content?


############################################################
# add the workstations
############################################################

# copy the wimport_data to the new location
# (convert it if necessary)

# sync data is not necessary



############################################################
# synchronize the shares
############################################################


# do this for all groups



# look up old class in class_db

# sync share, if new class without k exists 


############################################################
# synchronize the school share
############################################################


############################################################
# rsync dirs im /etc/sophomorix/vampire/vampire_x.x_dirs
############################################################




# reading a list of dirs to rsync from the old server
my @dirs=&get_conf_lines("vampire_${old_version}_dirs");
#foreach my $dirline (@dirs){
#   print $dirline,"\n";
#}

if ($sync_dirs==1){
    print "* Step 8:  synchronizing other dirs\n";
    &rsync_dirs(@dirs);
} else {
    print "* Step 8:  --sync-dirs\n",
          "   I assume you have synchronized other dirs already\n";
}




############################################################
# sub
############################################################

sub rsync_dirs {
    my @dirlist = @_;
    foreach my $entry (@dirlist){
        my ($old,$new)=split(/::/,$entry);
        print"  - OLD: $old\n",
             "    NEW: $new\n";
        $command="/usr/bin/rsync -e \"ssh -i $key_dsa\" -avz --delete  root\@${server}:$old $new";
#        print "$command\n";
#       system($command); 
    }
}


sub get_conf_lines {
    my ($name) = @_;
    my $file = "${DevelConf::vampire_conf}/${name}";
    my @filelist = ();
    open(FILES,"<$file") || die "Cannot open $file: $!";
    while (<FILES>){
	chomp();
        s/^ //g; # Leerzeichen am Zeilenangfang entfernen
        if(/^\#/ or $_ eq ""){ # # am Anfang bedeutet Kommentarzeile
          next;
        }      
        push @filelist, $_;
    }
    close(FILES);
    return @filelist;
}



